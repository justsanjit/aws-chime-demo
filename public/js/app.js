/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";

module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}


/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};


/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";

module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};


/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}


/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";

module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}


/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";

module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}


/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};


/***/ }),

/***/ "./node_modules/alpinejs/dist/alpine.js":
/*!**********************************************!*\
  !*** ./node_modules/alpinejs/dist/alpine.js ***!
  \**********************************************/
/***/ (function(module) {

(function (global, factory) {
   true ? module.exports = factory() :
  0;
}(this, (function () { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  // Thanks @stimulus:
  // https://github.com/stimulusjs/stimulus/blob/master/packages/%40stimulus/core/src/application.ts
  function domReady() {
    return new Promise(resolve => {
      if (document.readyState == "loading") {
        document.addEventListener("DOMContentLoaded", resolve);
      } else {
        resolve();
      }
    });
  }
  function arrayUnique(array) {
    return Array.from(new Set(array));
  }
  function isTesting() {
    return navigator.userAgent.includes("Node.js") || navigator.userAgent.includes("jsdom");
  }
  function checkedAttrLooseCompare(valueA, valueB) {
    return valueA == valueB;
  }
  function warnIfMalformedTemplate(el, directive) {
    if (el.tagName.toLowerCase() !== 'template') {
      console.warn(`Alpine: [${directive}] directive should only be added to <template> tags. See https://github.com/alpinejs/alpine#${directive}`);
    } else if (el.content.childElementCount !== 1) {
      console.warn(`Alpine: <template> tag with [${directive}] encountered with multiple element roots. Make sure <template> only has a single child element.`);
    }
  }
  function kebabCase(subject) {
    return subject.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[_\s]/, '-').toLowerCase();
  }
  function camelCase(subject) {
    return subject.toLowerCase().replace(/-(\w)/g, (match, char) => char.toUpperCase());
  }
  function walk(el, callback) {
    if (callback(el) === false) return;
    let node = el.firstElementChild;

    while (node) {
      walk(node, callback);
      node = node.nextElementSibling;
    }
  }
  function debounce(func, wait) {
    var timeout;
    return function () {
      var context = this,
          args = arguments;

      var later = function later() {
        timeout = null;
        func.apply(context, args);
      };

      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  const handleError = (el, expression, error) => {
    console.warn(`Alpine Error: "${error}"\n\nExpression: "${expression}"\nElement:`, el);

    if (!isTesting()) {
      throw error;
    }
  };

  function tryCatch(cb, {
    el,
    expression
  }) {
    try {
      const value = cb();
      return value instanceof Promise ? value.catch(e => handleError(el, expression, e)) : value;
    } catch (e) {
      handleError(el, expression, e);
    }
  }

  function saferEval(el, expression, dataContext, additionalHelperVariables = {}) {
    return tryCatch(() => {
      if (typeof expression === 'function') {
        return expression.call(dataContext);
      }

      return new Function(['$data', ...Object.keys(additionalHelperVariables)], `var __alpine_result; with($data) { __alpine_result = ${expression} }; return __alpine_result`)(dataContext, ...Object.values(additionalHelperVariables));
    }, {
      el,
      expression
    });
  }
  function saferEvalNoReturn(el, expression, dataContext, additionalHelperVariables = {}) {
    return tryCatch(() => {
      if (typeof expression === 'function') {
        return Promise.resolve(expression.call(dataContext, additionalHelperVariables['$event']));
      }

      let AsyncFunction = Function;
      /* MODERN-ONLY:START */

      AsyncFunction = Object.getPrototypeOf(async function () {}).constructor;
      /* MODERN-ONLY:END */
      // For the cases when users pass only a function reference to the caller: `x-on:click="foo"`
      // Where "foo" is a function. Also, we'll pass the function the event instance when we call it.

      if (Object.keys(dataContext).includes(expression)) {
        let methodReference = new Function(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { return ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables));

        if (typeof methodReference === 'function') {
          return Promise.resolve(methodReference.call(dataContext, additionalHelperVariables['$event']));
        } else {
          return Promise.resolve();
        }
      }

      return Promise.resolve(new AsyncFunction(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables)));
    }, {
      el,
      expression
    });
  }
  const xAttrRE = /^x-(on|bind|data|text|html|model|if|for|show|cloak|transition|ref|spread)\b/;
  function isXAttr(attr) {
    const name = replaceAtAndColonWithStandardSyntax(attr.name);
    return xAttrRE.test(name);
  }
  function getXAttrs(el, component, type) {
    let directives = Array.from(el.attributes).filter(isXAttr).map(parseHtmlAttribute); // Get an object of directives from x-spread.

    let spreadDirective = directives.filter(directive => directive.type === 'spread')[0];

    if (spreadDirective) {
      let spreadObject = saferEval(el, spreadDirective.expression, component.$data); // Add x-spread directives to the pile of existing directives.

      directives = directives.concat(Object.entries(spreadObject).map(([name, value]) => parseHtmlAttribute({
        name,
        value
      })));
    }

    if (type) return directives.filter(i => i.type === type);
    return sortDirectives(directives);
  }

  function sortDirectives(directives) {
    let directiveOrder = ['bind', 'model', 'show', 'catch-all'];
    return directives.sort((a, b) => {
      let typeA = directiveOrder.indexOf(a.type) === -1 ? 'catch-all' : a.type;
      let typeB = directiveOrder.indexOf(b.type) === -1 ? 'catch-all' : b.type;
      return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);
    });
  }

  function parseHtmlAttribute({
    name,
    value
  }) {
    const normalizedName = replaceAtAndColonWithStandardSyntax(name);
    const typeMatch = normalizedName.match(xAttrRE);
    const valueMatch = normalizedName.match(/:([a-zA-Z0-9\-:]+)/);
    const modifiers = normalizedName.match(/\.[^.\]]+(?=[^\]]*$)/g) || [];
    return {
      type: typeMatch ? typeMatch[1] : null,
      value: valueMatch ? valueMatch[1] : null,
      modifiers: modifiers.map(i => i.replace('.', '')),
      expression: value
    };
  }
  function isBooleanAttr(attrName) {
    // As per HTML spec table https://html.spec.whatwg.org/multipage/indices.html#attributes-3:boolean-attribute
    // Array roughly ordered by estimated usage
    const booleanAttributes = ['disabled', 'checked', 'required', 'readonly', 'hidden', 'open', 'selected', 'autofocus', 'itemscope', 'multiple', 'novalidate', 'allowfullscreen', 'allowpaymentrequest', 'formnovalidate', 'autoplay', 'controls', 'loop', 'muted', 'playsinline', 'default', 'ismap', 'reversed', 'async', 'defer', 'nomodule'];
    return booleanAttributes.includes(attrName);
  }
  function replaceAtAndColonWithStandardSyntax(name) {
    if (name.startsWith('@')) {
      return name.replace('@', 'x-on:');
    } else if (name.startsWith(':')) {
      return name.replace(':', 'x-bind:');
    }

    return name;
  }
  function convertClassStringToArray(classList, filterFn = Boolean) {
    return classList.split(' ').filter(filterFn);
  }
  const TRANSITION_TYPE_IN = 'in';
  const TRANSITION_TYPE_OUT = 'out';
  const TRANSITION_CANCELLED = 'cancelled';
  function transitionIn(el, show, reject, component, forceSkip = false) {
    // We don't want to transition on the initial page load.
    if (forceSkip) return show();

    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_IN) {
      // there is already a similar transition going on, this was probably triggered by
      // a change in a different property, let's just leave the previous one doing its job
      return;
    }

    const attrs = getXAttrs(el, component, 'transition');
    const showAttr = getXAttrs(el, component, 'show')[0]; // If this is triggered by a x-show.transition.

    if (showAttr && showAttr.modifiers.includes('transition')) {
      let modifiers = showAttr.modifiers; // If x-show.transition.out, we'll skip the "in" transition.

      if (modifiers.includes('out') && !modifiers.includes('in')) return show();
      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out'); // If x-show.transition.in...out... only use "in" related modifiers for this transition.

      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index < modifiers.indexOf('out')) : modifiers;
      transitionHelperIn(el, modifiers, show, reject); // Otherwise, we can assume x-transition:enter.
    } else if (attrs.some(attr => ['enter', 'enter-start', 'enter-end'].includes(attr.value))) {
      transitionClassesIn(el, component, attrs, show, reject);
    } else {
      // If neither, just show that damn thing.
      show();
    }
  }
  function transitionOut(el, hide, reject, component, forceSkip = false) {
    // We don't want to transition on the initial page load.
    if (forceSkip) return hide();

    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_OUT) {
      // there is already a similar transition going on, this was probably triggered by
      // a change in a different property, let's just leave the previous one doing its job
      return;
    }

    const attrs = getXAttrs(el, component, 'transition');
    const showAttr = getXAttrs(el, component, 'show')[0];

    if (showAttr && showAttr.modifiers.includes('transition')) {
      let modifiers = showAttr.modifiers;
      if (modifiers.includes('in') && !modifiers.includes('out')) return hide();
      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out');
      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index > modifiers.indexOf('out')) : modifiers;
      transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hide, reject);
    } else if (attrs.some(attr => ['leave', 'leave-start', 'leave-end'].includes(attr.value))) {
      transitionClassesOut(el, component, attrs, hide, reject);
    } else {
      hide();
    }
  }
  function transitionHelperIn(el, modifiers, showCallback, reject) {
    // Default values inspired by: https://material.io/design/motion/speed.html#duration
    const styleValues = {
      duration: modifierValue(modifiers, 'duration', 150),
      origin: modifierValue(modifiers, 'origin', 'center'),
      first: {
        opacity: 0,
        scale: modifierValue(modifiers, 'scale', 95)
      },
      second: {
        opacity: 1,
        scale: 100
      }
    };
    transitionHelper(el, modifiers, showCallback, () => {}, reject, styleValues, TRANSITION_TYPE_IN);
  }
  function transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hideCallback, reject) {
    // Make the "out" transition .5x slower than the "in". (Visually better)
    // HOWEVER, if they explicitly set a duration for the "out" transition,
    // use that.
    const duration = settingBothSidesOfTransition ? modifierValue(modifiers, 'duration', 150) : modifierValue(modifiers, 'duration', 150) / 2;
    const styleValues = {
      duration: duration,
      origin: modifierValue(modifiers, 'origin', 'center'),
      first: {
        opacity: 1,
        scale: 100
      },
      second: {
        opacity: 0,
        scale: modifierValue(modifiers, 'scale', 95)
      }
    };
    transitionHelper(el, modifiers, () => {}, hideCallback, reject, styleValues, TRANSITION_TYPE_OUT);
  }

  function modifierValue(modifiers, key, fallback) {
    // If the modifier isn't present, use the default.
    if (modifiers.indexOf(key) === -1) return fallback; // If it IS present, grab the value after it: x-show.transition.duration.500ms

    const rawValue = modifiers[modifiers.indexOf(key) + 1];
    if (!rawValue) return fallback;

    if (key === 'scale') {
      // Check if the very next value is NOT a number and return the fallback.
      // If x-show.transition.scale, we'll use the default scale value.
      // That is how a user opts out of the opacity transition.
      if (!isNumeric(rawValue)) return fallback;
    }

    if (key === 'duration') {
      // Support x-show.transition.duration.500ms && duration.500
      let match = rawValue.match(/([0-9]+)ms/);
      if (match) return match[1];
    }

    if (key === 'origin') {
      // Support chaining origin directions: x-show.transition.top.right
      if (['top', 'right', 'left', 'center', 'bottom'].includes(modifiers[modifiers.indexOf(key) + 2])) {
        return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(' ');
      }
    }

    return rawValue;
  }

  function transitionHelper(el, modifiers, hook1, hook2, reject, styleValues, type) {
    // clear the previous transition if exists to avoid caching the wrong styles
    if (el.__x_transition) {
      el.__x_transition.cancel && el.__x_transition.cancel();
    } // If the user set these style values, we'll put them back when we're done with them.


    const opacityCache = el.style.opacity;
    const transformCache = el.style.transform;
    const transformOriginCache = el.style.transformOrigin; // If no modifiers are present: x-show.transition, we'll default to both opacity and scale.

    const noModifiers = !modifiers.includes('opacity') && !modifiers.includes('scale');
    const transitionOpacity = noModifiers || modifiers.includes('opacity');
    const transitionScale = noModifiers || modifiers.includes('scale'); // These are the explicit stages of a transition (same stages for in and for out).
    // This way you can get a birds eye view of the hooks, and the differences
    // between them.

    const stages = {
      start() {
        if (transitionOpacity) el.style.opacity = styleValues.first.opacity;
        if (transitionScale) el.style.transform = `scale(${styleValues.first.scale / 100})`;
      },

      during() {
        if (transitionScale) el.style.transformOrigin = styleValues.origin;
        el.style.transitionProperty = [transitionOpacity ? `opacity` : ``, transitionScale ? `transform` : ``].join(' ').trim();
        el.style.transitionDuration = `${styleValues.duration / 1000}s`;
        el.style.transitionTimingFunction = `cubic-bezier(0.4, 0.0, 0.2, 1)`;
      },

      show() {
        hook1();
      },

      end() {
        if (transitionOpacity) el.style.opacity = styleValues.second.opacity;
        if (transitionScale) el.style.transform = `scale(${styleValues.second.scale / 100})`;
      },

      hide() {
        hook2();
      },

      cleanup() {
        if (transitionOpacity) el.style.opacity = opacityCache;
        if (transitionScale) el.style.transform = transformCache;
        if (transitionScale) el.style.transformOrigin = transformOriginCache;
        el.style.transitionProperty = null;
        el.style.transitionDuration = null;
        el.style.transitionTimingFunction = null;
      }

    };
    transition(el, stages, type, reject);
  }

  const ensureStringExpression = (expression, el, component) => {
    return typeof expression === 'function' ? component.evaluateReturnExpression(el, expression) : expression;
  };

  function transitionClassesIn(el, component, directives, showCallback, reject) {
    const enter = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter') || {
      expression: ''
    }).expression, el, component));
    const enterStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-start') || {
      expression: ''
    }).expression, el, component));
    const enterEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-end') || {
      expression: ''
    }).expression, el, component));
    transitionClasses(el, enter, enterStart, enterEnd, showCallback, () => {}, TRANSITION_TYPE_IN, reject);
  }
  function transitionClassesOut(el, component, directives, hideCallback, reject) {
    const leave = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave') || {
      expression: ''
    }).expression, el, component));
    const leaveStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-start') || {
      expression: ''
    }).expression, el, component));
    const leaveEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-end') || {
      expression: ''
    }).expression, el, component));
    transitionClasses(el, leave, leaveStart, leaveEnd, () => {}, hideCallback, TRANSITION_TYPE_OUT, reject);
  }
  function transitionClasses(el, classesDuring, classesStart, classesEnd, hook1, hook2, type, reject) {
    // clear the previous transition if exists to avoid caching the wrong classes
    if (el.__x_transition) {
      el.__x_transition.cancel && el.__x_transition.cancel();
    }

    const originalClasses = el.__x_original_classes || [];
    const stages = {
      start() {
        el.classList.add(...classesStart);
      },

      during() {
        el.classList.add(...classesDuring);
      },

      show() {
        hook1();
      },

      end() {
        // Don't remove classes that were in the original class attribute.
        el.classList.remove(...classesStart.filter(i => !originalClasses.includes(i)));
        el.classList.add(...classesEnd);
      },

      hide() {
        hook2();
      },

      cleanup() {
        el.classList.remove(...classesDuring.filter(i => !originalClasses.includes(i)));
        el.classList.remove(...classesEnd.filter(i => !originalClasses.includes(i)));
      }

    };
    transition(el, stages, type, reject);
  }
  function transition(el, stages, type, reject) {
    const finish = once(() => {
      stages.hide(); // Adding an "isConnected" check, in case the callback
      // removed the element from the DOM.

      if (el.isConnected) {
        stages.cleanup();
      }

      delete el.__x_transition;
    });
    el.__x_transition = {
      // Set transition type so we can avoid clearing transition if the direction is the same
      type: type,
      // create a callback for the last stages of the transition so we can call it
      // from different point and early terminate it. Once will ensure that function
      // is only called one time.
      cancel: once(() => {
        reject(TRANSITION_CANCELLED);
        finish();
      }),
      finish,
      // This store the next animation frame so we can cancel it
      nextFrame: null
    };
    stages.start();
    stages.during();
    el.__x_transition.nextFrame = requestAnimationFrame(() => {
      // Note: Safari's transitionDuration property will list out comma separated transition durations
      // for every single transition property. Let's grab the first one and call it a day.
      let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, '').replace('s', '')) * 1000;

      if (duration === 0) {
        duration = Number(getComputedStyle(el).animationDuration.replace('s', '')) * 1000;
      }

      stages.show();
      el.__x_transition.nextFrame = requestAnimationFrame(() => {
        stages.end();
        setTimeout(el.__x_transition.finish, duration);
      });
    });
  }
  function isNumeric(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  } // Thanks @vuejs
  // https://github.com/vuejs/vue/blob/4de4649d9637262a9b007720b59f80ac72a5620c/src/shared/util.js

  function once(callback) {
    let called = false;
    return function () {
      if (!called) {
        called = true;
        callback.apply(this, arguments);
      }
    };
  }

  function handleForDirective(component, templateEl, expression, initialUpdate, extraVars) {
    warnIfMalformedTemplate(templateEl, 'x-for');
    let iteratorNames = typeof expression === 'function' ? parseForExpression(component.evaluateReturnExpression(templateEl, expression)) : parseForExpression(expression);
    let items = evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, templateEl, iteratorNames, extraVars); // As we walk the array, we'll also walk the DOM (updating/creating as we go).

    let currentEl = templateEl;
    items.forEach((item, index) => {
      let iterationScopeVariables = getIterationScopeVariables(iteratorNames, item, index, items, extraVars());
      let currentKey = generateKeyForIteration(component, templateEl, index, iterationScopeVariables);
      let nextEl = lookAheadForMatchingKeyedElementAndMoveItIfFound(currentEl.nextElementSibling, currentKey); // If we haven't found a matching key, insert the element at the current position.

      if (!nextEl) {
        nextEl = addElementInLoopAfterCurrentEl(templateEl, currentEl); // And transition it in if it's not the first page load.

        transitionIn(nextEl, () => {}, () => {}, component, initialUpdate);
        nextEl.__x_for = iterationScopeVariables;
        component.initializeElements(nextEl, () => nextEl.__x_for); // Otherwise update the element we found.
      } else {
        // Temporarily remove the key indicator to allow the normal "updateElements" to work.
        delete nextEl.__x_for_key;
        nextEl.__x_for = iterationScopeVariables;
        component.updateElements(nextEl, () => nextEl.__x_for);
      }

      currentEl = nextEl;
      currentEl.__x_for_key = currentKey;
    });
    removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component);
  } // This was taken from VueJS 2.* core. Thanks Vue!

  function parseForExpression(expression) {
    let forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    let stripParensRE = /^\(|\)$/g;
    let forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    let inMatch = expression.match(forAliasRE);
    if (!inMatch) return;
    let res = {};
    res.items = inMatch[2].trim();
    let item = inMatch[1].trim().replace(stripParensRE, '');
    let iteratorMatch = item.match(forIteratorRE);

    if (iteratorMatch) {
      res.item = item.replace(forIteratorRE, '').trim();
      res.index = iteratorMatch[1].trim();

      if (iteratorMatch[2]) {
        res.collection = iteratorMatch[2].trim();
      }
    } else {
      res.item = item;
    }

    return res;
  }

  function getIterationScopeVariables(iteratorNames, item, index, items, extraVars) {
    // We must create a new object, so each iteration has a new scope
    let scopeVariables = extraVars ? _objectSpread2({}, extraVars) : {};
    scopeVariables[iteratorNames.item] = item;
    if (iteratorNames.index) scopeVariables[iteratorNames.index] = index;
    if (iteratorNames.collection) scopeVariables[iteratorNames.collection] = items;
    return scopeVariables;
  }

  function generateKeyForIteration(component, el, index, iterationScopeVariables) {
    let bindKeyAttribute = getXAttrs(el, component, 'bind').filter(attr => attr.value === 'key')[0]; // If the dev hasn't specified a key, just return the index of the iteration.

    if (!bindKeyAttribute) return index;
    return component.evaluateReturnExpression(el, bindKeyAttribute.expression, () => iterationScopeVariables);
  }

  function evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, el, iteratorNames, extraVars) {
    let ifAttribute = getXAttrs(el, component, 'if')[0];

    if (ifAttribute && !component.evaluateReturnExpression(el, ifAttribute.expression)) {
      return [];
    }

    let items = component.evaluateReturnExpression(el, iteratorNames.items, extraVars); // This adds support for the `i in n` syntax.

    if (isNumeric(items) && items > 0) {
      items = Array.from(Array(items).keys(), i => i + 1);
    }

    return items;
  }

  function addElementInLoopAfterCurrentEl(templateEl, currentEl) {
    let clone = document.importNode(templateEl.content, true);
    currentEl.parentElement.insertBefore(clone, currentEl.nextElementSibling);
    return currentEl.nextElementSibling;
  }

  function lookAheadForMatchingKeyedElementAndMoveItIfFound(nextEl, currentKey) {
    if (!nextEl) return; // If we are already past the x-for generated elements, we don't need to look ahead.

    if (nextEl.__x_for_key === undefined) return; // If the the key's DO match, no need to look ahead.

    if (nextEl.__x_for_key === currentKey) return nextEl; // If they don't, we'll look ahead for a match.
    // If we find it, we'll move it to the current position in the loop.

    let tmpNextEl = nextEl;

    while (tmpNextEl) {
      if (tmpNextEl.__x_for_key === currentKey) {
        return tmpNextEl.parentElement.insertBefore(tmpNextEl, nextEl);
      }

      tmpNextEl = tmpNextEl.nextElementSibling && tmpNextEl.nextElementSibling.__x_for_key !== undefined ? tmpNextEl.nextElementSibling : false;
    }
  }

  function removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component) {
    var nextElementFromOldLoop = currentEl.nextElementSibling && currentEl.nextElementSibling.__x_for_key !== undefined ? currentEl.nextElementSibling : false;

    while (nextElementFromOldLoop) {
      let nextElementFromOldLoopImmutable = nextElementFromOldLoop;
      let nextSibling = nextElementFromOldLoop.nextElementSibling;
      transitionOut(nextElementFromOldLoop, () => {
        nextElementFromOldLoopImmutable.remove();
      }, () => {}, component);
      nextElementFromOldLoop = nextSibling && nextSibling.__x_for_key !== undefined ? nextSibling : false;
    }
  }

  function handleAttributeBindingDirective(component, el, attrName, expression, extraVars, attrType, modifiers) {
    var value = component.evaluateReturnExpression(el, expression, extraVars);

    if (attrName === 'value') {
      if (Alpine.ignoreFocusedForValueBinding && document.activeElement.isSameNode(el)) return; // If nested model key is undefined, set the default value to empty string.

      if (value === undefined && expression.match(/\./)) {
        value = '';
      }

      if (el.type === 'radio') {
        // Set radio value from x-bind:value, if no "value" attribute exists.
        // If there are any initial state values, radio will have a correct
        // "checked" value since x-bind:value is processed before x-model.
        if (el.attributes.value === undefined && attrType === 'bind') {
          el.value = value;
        } else if (attrType !== 'bind') {
          el.checked = checkedAttrLooseCompare(el.value, value);
        }
      } else if (el.type === 'checkbox') {
        // If we are explicitly binding a string to the :value, set the string,
        // If the value is a boolean, leave it alone, it will be set to "on"
        // automatically.
        if (typeof value !== 'boolean' && ![null, undefined].includes(value) && attrType === 'bind') {
          el.value = String(value);
        } else if (attrType !== 'bind') {
          if (Array.isArray(value)) {
            // I'm purposely not using Array.includes here because it's
            // strict, and because of Numeric/String mis-casting, I
            // want the "includes" to be "fuzzy".
            el.checked = value.some(val => checkedAttrLooseCompare(val, el.value));
          } else {
            el.checked = !!value;
          }
        }
      } else if (el.tagName === 'SELECT') {
        updateSelect(el, value);
      } else {
        if (el.value === value) return;
        el.value = value;
      }
    } else if (attrName === 'class') {
      if (Array.isArray(value)) {
        const originalClasses = el.__x_original_classes || [];
        el.setAttribute('class', arrayUnique(originalClasses.concat(value)).join(' '));
      } else if (typeof value === 'object') {
        // Sorting the keys / class names by their boolean value will ensure that
        // anything that evaluates to `false` and needs to remove classes is run first.
        const keysSortedByBooleanValue = Object.keys(value).sort((a, b) => value[a] - value[b]);
        keysSortedByBooleanValue.forEach(classNames => {
          if (value[classNames]) {
            convertClassStringToArray(classNames).forEach(className => el.classList.add(className));
          } else {
            convertClassStringToArray(classNames).forEach(className => el.classList.remove(className));
          }
        });
      } else {
        const originalClasses = el.__x_original_classes || [];
        const newClasses = value ? convertClassStringToArray(value) : [];
        el.setAttribute('class', arrayUnique(originalClasses.concat(newClasses)).join(' '));
      }
    } else {
      attrName = modifiers.includes('camel') ? camelCase(attrName) : attrName; // If an attribute's bound value is null, undefined or false, remove the attribute

      if ([null, undefined, false].includes(value)) {
        el.removeAttribute(attrName);
      } else {
        isBooleanAttr(attrName) ? setIfChanged(el, attrName, attrName) : setIfChanged(el, attrName, value);
      }
    }
  }

  function setIfChanged(el, attrName, value) {
    if (el.getAttribute(attrName) != value) {
      el.setAttribute(attrName, value);
    }
  }

  function updateSelect(el, value) {
    const arrayWrappedValue = [].concat(value).map(value => {
      return value + '';
    });
    Array.from(el.options).forEach(option => {
      option.selected = arrayWrappedValue.includes(option.value || option.text);
    });
  }

  function handleTextDirective(el, output, expression) {
    // If nested model key is undefined, set the default value to empty string.
    if (output === undefined && expression.match(/\./)) {
      output = '';
    }

    el.textContent = output;
  }

  function handleHtmlDirective(component, el, expression, extraVars) {
    el.innerHTML = component.evaluateReturnExpression(el, expression, extraVars);
  }

  function handleShowDirective(component, el, value, modifiers, initialUpdate = false) {
    const hide = () => {
      el.style.display = 'none';
      el.__x_is_shown = false;
    };

    const show = () => {
      if (el.style.length === 1 && el.style.display === 'none') {
        el.removeAttribute('style');
      } else {
        el.style.removeProperty('display');
      }

      el.__x_is_shown = true;
    };

    if (initialUpdate === true) {
      if (value) {
        show();
      } else {
        hide();
      }

      return;
    }

    const handle = (resolve, reject) => {
      if (value) {
        if (el.style.display === 'none' || el.__x_transition) {
          transitionIn(el, () => {
            show();
          }, reject, component);
        }

        resolve(() => {});
      } else {
        if (el.style.display !== 'none') {
          transitionOut(el, () => {
            resolve(() => {
              hide();
            });
          }, reject, component);
        } else {
          resolve(() => {});
        }
      }
    }; // The working of x-show is a bit complex because we need to
    // wait for any child transitions to finish before hiding
    // some element. Also, this has to be done recursively.
    // If x-show.immediate, foregoe the waiting.


    if (modifiers.includes('immediate')) {
      handle(finish => finish(), () => {});
      return;
    } // x-show is encountered during a DOM tree walk. If an element
    // we encounter is NOT a child of another x-show element we
    // can execute the previous x-show stack (if one exists).


    if (component.showDirectiveLastElement && !component.showDirectiveLastElement.contains(el)) {
      component.executeAndClearRemainingShowDirectiveStack();
    }

    component.showDirectiveStack.push(handle);
    component.showDirectiveLastElement = el;
  }

  function handleIfDirective(component, el, expressionResult, initialUpdate, extraVars) {
    warnIfMalformedTemplate(el, 'x-if');
    const elementHasAlreadyBeenAdded = el.nextElementSibling && el.nextElementSibling.__x_inserted_me === true;

    if (expressionResult && (!elementHasAlreadyBeenAdded || el.__x_transition)) {
      const clone = document.importNode(el.content, true);
      el.parentElement.insertBefore(clone, el.nextElementSibling);
      transitionIn(el.nextElementSibling, () => {}, () => {}, component, initialUpdate);
      component.initializeElements(el.nextElementSibling, extraVars);
      el.nextElementSibling.__x_inserted_me = true;
    } else if (!expressionResult && elementHasAlreadyBeenAdded) {
      transitionOut(el.nextElementSibling, () => {
        el.nextElementSibling.remove();
      }, () => {}, component, initialUpdate);
    }
  }

  function registerListener(component, el, event, modifiers, expression, extraVars = {}) {
    const options = {
      passive: modifiers.includes('passive')
    };

    if (modifiers.includes('camel')) {
      event = camelCase(event);
    }

    if (modifiers.includes('away')) {
      let handler = e => {
        // Don't do anything if the click came from the element or within it.
        if (el.contains(e.target)) return; // Don't do anything if this element isn't currently visible.

        if (el.offsetWidth < 1 && el.offsetHeight < 1) return; // Now that we are sure the element is visible, AND the click
        // is from outside it, let's run the expression.

        runListenerHandler(component, expression, e, extraVars);

        if (modifiers.includes('once')) {
          document.removeEventListener(event, handler, options);
        }
      }; // Listen for this event at the root level.


      document.addEventListener(event, handler, options);
    } else {
      let listenerTarget = modifiers.includes('window') ? window : modifiers.includes('document') ? document : el;

      let handler = e => {
        // Remove this global event handler if the element that declared it
        // has been removed. It's now stale.
        if (listenerTarget === window || listenerTarget === document) {
          if (!document.body.contains(el)) {
            listenerTarget.removeEventListener(event, handler, options);
            return;
          }
        }

        if (isKeyEvent(event)) {
          if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {
            return;
          }
        }

        if (modifiers.includes('prevent')) e.preventDefault();
        if (modifiers.includes('stop')) e.stopPropagation(); // If the .self modifier isn't present, or if it is present and
        // the target element matches the element we are registering the
        // event on, run the handler

        if (!modifiers.includes('self') || e.target === el) {
          const returnValue = runListenerHandler(component, expression, e, extraVars);
          returnValue.then(value => {
            if (value === false) {
              e.preventDefault();
            } else {
              if (modifiers.includes('once')) {
                listenerTarget.removeEventListener(event, handler, options);
              }
            }
          });
        }
      };

      if (modifiers.includes('debounce')) {
        let nextModifier = modifiers[modifiers.indexOf('debounce') + 1] || 'invalid-wait';
        let wait = isNumeric(nextModifier.split('ms')[0]) ? Number(nextModifier.split('ms')[0]) : 250;
        handler = debounce(handler, wait);
      }

      listenerTarget.addEventListener(event, handler, options);
    }
  }

  function runListenerHandler(component, expression, e, extraVars) {
    return component.evaluateCommandExpression(e.target, expression, () => {
      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {
        '$event': e
      });
    });
  }

  function isKeyEvent(event) {
    return ['keydown', 'keyup'].includes(event);
  }

  function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {
    let keyModifiers = modifiers.filter(i => {
      return !['window', 'document', 'prevent', 'stop'].includes(i);
    });

    if (keyModifiers.includes('debounce')) {
      let debounceIndex = keyModifiers.indexOf('debounce');
      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || 'invalid-wait').split('ms')[0]) ? 2 : 1);
    } // If no modifier is specified, we'll call it a press.


    if (keyModifiers.length === 0) return false; // If one is passed, AND it matches the key pressed, we'll call it a press.

    if (keyModifiers.length === 1 && keyModifiers[0] === keyToModifier(e.key)) return false; // The user is listening for key combinations.

    const systemKeyModifiers = ['ctrl', 'shift', 'alt', 'meta', 'cmd', 'super'];
    const selectedSystemKeyModifiers = systemKeyModifiers.filter(modifier => keyModifiers.includes(modifier));
    keyModifiers = keyModifiers.filter(i => !selectedSystemKeyModifiers.includes(i));

    if (selectedSystemKeyModifiers.length > 0) {
      const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter(modifier => {
        // Alias "cmd" and "super" to "meta"
        if (modifier === 'cmd' || modifier === 'super') modifier = 'meta';
        return e[`${modifier}Key`];
      }); // If all the modifiers selected are pressed, ...

      if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {
        // AND the remaining key is pressed as well. It's a press.
        if (keyModifiers[0] === keyToModifier(e.key)) return false;
      }
    } // We'll call it NOT a valid keypress.


    return true;
  }

  function keyToModifier(key) {
    switch (key) {
      case '/':
        return 'slash';

      case ' ':
      case 'Spacebar':
        return 'space';

      default:
        return key && kebabCase(key);
    }
  }

  function registerModelListener(component, el, modifiers, expression, extraVars) {
    // If the element we are binding to is a select, a radio, or checkbox
    // we'll listen for the change event instead of the "input" event.
    var event = el.tagName.toLowerCase() === 'select' || ['checkbox', 'radio'].includes(el.type) || modifiers.includes('lazy') ? 'change' : 'input';
    const listenerExpression = `${expression} = rightSideOfExpression($event, ${expression})`;
    registerListener(component, el, event, modifiers, listenerExpression, () => {
      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {
        rightSideOfExpression: generateModelAssignmentFunction(el, modifiers, expression)
      });
    });
  }

  function generateModelAssignmentFunction(el, modifiers, expression) {
    if (el.type === 'radio') {
      // Radio buttons only work properly when they share a name attribute.
      // People might assume we take care of that for them, because
      // they already set a shared "x-model" attribute.
      if (!el.hasAttribute('name')) el.setAttribute('name', expression);
    }

    return (event, currentValue) => {
      // Check for event.detail due to an issue where IE11 handles other events as a CustomEvent.
      if (event instanceof CustomEvent && event.detail) {
        return event.detail;
      } else if (el.type === 'checkbox') {
        // If the data we are binding to is an array, toggle its value inside the array.
        if (Array.isArray(currentValue)) {
          const newValue = modifiers.includes('number') ? safeParseNumber(event.target.value) : event.target.value;
          return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter(el => !checkedAttrLooseCompare(el, newValue));
        } else {
          return event.target.checked;
        }
      } else if (el.tagName.toLowerCase() === 'select' && el.multiple) {
        return modifiers.includes('number') ? Array.from(event.target.selectedOptions).map(option => {
          const rawValue = option.value || option.text;
          return safeParseNumber(rawValue);
        }) : Array.from(event.target.selectedOptions).map(option => {
          return option.value || option.text;
        });
      } else {
        const rawValue = event.target.value;
        return modifiers.includes('number') ? safeParseNumber(rawValue) : modifiers.includes('trim') ? rawValue.trim() : rawValue;
      }
    };
  }

  function safeParseNumber(rawValue) {
    const number = rawValue ? parseFloat(rawValue) : null;
    return isNumeric(number) ? number : rawValue;
  }

  /**
   * Copyright (C) 2017 salesforce.com, inc.
   */
  const { isArray } = Array;
  const { getPrototypeOf, create: ObjectCreate, defineProperty: ObjectDefineProperty, defineProperties: ObjectDefineProperties, isExtensible, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, preventExtensions, hasOwnProperty, } = Object;
  const { push: ArrayPush, concat: ArrayConcat, map: ArrayMap, } = Array.prototype;
  function isUndefined(obj) {
      return obj === undefined;
  }
  function isFunction(obj) {
      return typeof obj === 'function';
  }
  function isObject(obj) {
      return typeof obj === 'object';
  }
  const proxyToValueMap = new WeakMap();
  function registerProxy(proxy, value) {
      proxyToValueMap.set(proxy, value);
  }
  const unwrap = (replicaOrAny) => proxyToValueMap.get(replicaOrAny) || replicaOrAny;

  function wrapValue(membrane, value) {
      return membrane.valueIsObservable(value) ? membrane.getProxy(value) : value;
  }
  /**
   * Unwrap property descriptors will set value on original descriptor
   * We only need to unwrap if value is specified
   * @param descriptor external descrpitor provided to define new property on original value
   */
  function unwrapDescriptor(descriptor) {
      if (hasOwnProperty.call(descriptor, 'value')) {
          descriptor.value = unwrap(descriptor.value);
      }
      return descriptor;
  }
  function lockShadowTarget(membrane, shadowTarget, originalTarget) {
      const targetKeys = ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));
      targetKeys.forEach((key) => {
          let descriptor = getOwnPropertyDescriptor(originalTarget, key);
          // We do not need to wrap the descriptor if configurable
          // Because we can deal with wrapping it when user goes through
          // Get own property descriptor. There is also a chance that this descriptor
          // could change sometime in the future, so we can defer wrapping
          // until we need to
          if (!descriptor.configurable) {
              descriptor = wrapDescriptor(membrane, descriptor, wrapValue);
          }
          ObjectDefineProperty(shadowTarget, key, descriptor);
      });
      preventExtensions(shadowTarget);
  }
  class ReactiveProxyHandler {
      constructor(membrane, value) {
          this.originalTarget = value;
          this.membrane = membrane;
      }
      get(shadowTarget, key) {
          const { originalTarget, membrane } = this;
          const value = originalTarget[key];
          const { valueObserved } = membrane;
          valueObserved(originalTarget, key);
          return membrane.getProxy(value);
      }
      set(shadowTarget, key, value) {
          const { originalTarget, membrane: { valueMutated } } = this;
          const oldValue = originalTarget[key];
          if (oldValue !== value) {
              originalTarget[key] = value;
              valueMutated(originalTarget, key);
          }
          else if (key === 'length' && isArray(originalTarget)) {
              // fix for issue #236: push will add the new index, and by the time length
              // is updated, the internal length is already equal to the new length value
              // therefore, the oldValue is equal to the value. This is the forking logic
              // to support this use case.
              valueMutated(originalTarget, key);
          }
          return true;
      }
      deleteProperty(shadowTarget, key) {
          const { originalTarget, membrane: { valueMutated } } = this;
          delete originalTarget[key];
          valueMutated(originalTarget, key);
          return true;
      }
      apply(shadowTarget, thisArg, argArray) {
          /* No op */
      }
      construct(target, argArray, newTarget) {
          /* No op */
      }
      has(shadowTarget, key) {
          const { originalTarget, membrane: { valueObserved } } = this;
          valueObserved(originalTarget, key);
          return key in originalTarget;
      }
      ownKeys(shadowTarget) {
          const { originalTarget } = this;
          return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));
      }
      isExtensible(shadowTarget) {
          const shadowIsExtensible = isExtensible(shadowTarget);
          if (!shadowIsExtensible) {
              return shadowIsExtensible;
          }
          const { originalTarget, membrane } = this;
          const targetIsExtensible = isExtensible(originalTarget);
          if (!targetIsExtensible) {
              lockShadowTarget(membrane, shadowTarget, originalTarget);
          }
          return targetIsExtensible;
      }
      setPrototypeOf(shadowTarget, prototype) {
      }
      getPrototypeOf(shadowTarget) {
          const { originalTarget } = this;
          return getPrototypeOf(originalTarget);
      }
      getOwnPropertyDescriptor(shadowTarget, key) {
          const { originalTarget, membrane } = this;
          const { valueObserved } = this.membrane;
          // keys looked up via hasOwnProperty need to be reactive
          valueObserved(originalTarget, key);
          let desc = getOwnPropertyDescriptor(originalTarget, key);
          if (isUndefined(desc)) {
              return desc;
          }
          const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);
          if (!isUndefined(shadowDescriptor)) {
              return shadowDescriptor;
          }
          // Note: by accessing the descriptor, the key is marked as observed
          // but access to the value, setter or getter (if available) cannot observe
          // mutations, just like regular methods, in which case we just do nothing.
          desc = wrapDescriptor(membrane, desc, wrapValue);
          if (!desc.configurable) {
              // If descriptor from original target is not configurable,
              // We must copy the wrapped descriptor over to the shadow target.
              // Otherwise, proxy will throw an invariant error.
              // This is our last chance to lock the value.
              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants
              ObjectDefineProperty(shadowTarget, key, desc);
          }
          return desc;
      }
      preventExtensions(shadowTarget) {
          const { originalTarget, membrane } = this;
          lockShadowTarget(membrane, shadowTarget, originalTarget);
          preventExtensions(originalTarget);
          return true;
      }
      defineProperty(shadowTarget, key, descriptor) {
          const { originalTarget, membrane } = this;
          const { valueMutated } = membrane;
          const { configurable } = descriptor;
          // We have to check for value in descriptor
          // because Object.freeze(proxy) calls this method
          // with only { configurable: false, writeable: false }
          // Additionally, method will only be called with writeable:false
          // if the descriptor has a value, as opposed to getter/setter
          // So we can just check if writable is present and then see if
          // value is present. This eliminates getter and setter descriptors
          if (hasOwnProperty.call(descriptor, 'writable') && !hasOwnProperty.call(descriptor, 'value')) {
              const originalDescriptor = getOwnPropertyDescriptor(originalTarget, key);
              descriptor.value = originalDescriptor.value;
          }
          ObjectDefineProperty(originalTarget, key, unwrapDescriptor(descriptor));
          if (configurable === false) {
              ObjectDefineProperty(shadowTarget, key, wrapDescriptor(membrane, descriptor, wrapValue));
          }
          valueMutated(originalTarget, key);
          return true;
      }
  }

  function wrapReadOnlyValue(membrane, value) {
      return membrane.valueIsObservable(value) ? membrane.getReadOnlyProxy(value) : value;
  }
  class ReadOnlyHandler {
      constructor(membrane, value) {
          this.originalTarget = value;
          this.membrane = membrane;
      }
      get(shadowTarget, key) {
          const { membrane, originalTarget } = this;
          const value = originalTarget[key];
          const { valueObserved } = membrane;
          valueObserved(originalTarget, key);
          return membrane.getReadOnlyProxy(value);
      }
      set(shadowTarget, key, value) {
          return false;
      }
      deleteProperty(shadowTarget, key) {
          return false;
      }
      apply(shadowTarget, thisArg, argArray) {
          /* No op */
      }
      construct(target, argArray, newTarget) {
          /* No op */
      }
      has(shadowTarget, key) {
          const { originalTarget, membrane: { valueObserved } } = this;
          valueObserved(originalTarget, key);
          return key in originalTarget;
      }
      ownKeys(shadowTarget) {
          const { originalTarget } = this;
          return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));
      }
      setPrototypeOf(shadowTarget, prototype) {
      }
      getOwnPropertyDescriptor(shadowTarget, key) {
          const { originalTarget, membrane } = this;
          const { valueObserved } = membrane;
          // keys looked up via hasOwnProperty need to be reactive
          valueObserved(originalTarget, key);
          let desc = getOwnPropertyDescriptor(originalTarget, key);
          if (isUndefined(desc)) {
              return desc;
          }
          const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);
          if (!isUndefined(shadowDescriptor)) {
              return shadowDescriptor;
          }
          // Note: by accessing the descriptor, the key is marked as observed
          // but access to the value or getter (if available) cannot be observed,
          // just like regular methods, in which case we just do nothing.
          desc = wrapDescriptor(membrane, desc, wrapReadOnlyValue);
          if (hasOwnProperty.call(desc, 'set')) {
              desc.set = undefined; // readOnly membrane does not allow setters
          }
          if (!desc.configurable) {
              // If descriptor from original target is not configurable,
              // We must copy the wrapped descriptor over to the shadow target.
              // Otherwise, proxy will throw an invariant error.
              // This is our last chance to lock the value.
              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants
              ObjectDefineProperty(shadowTarget, key, desc);
          }
          return desc;
      }
      preventExtensions(shadowTarget) {
          return false;
      }
      defineProperty(shadowTarget, key, descriptor) {
          return false;
      }
  }
  function createShadowTarget(value) {
      let shadowTarget = undefined;
      if (isArray(value)) {
          shadowTarget = [];
      }
      else if (isObject(value)) {
          shadowTarget = {};
      }
      return shadowTarget;
  }
  const ObjectDotPrototype = Object.prototype;
  function defaultValueIsObservable(value) {
      // intentionally checking for null
      if (value === null) {
          return false;
      }
      // treat all non-object types, including undefined, as non-observable values
      if (typeof value !== 'object') {
          return false;
      }
      if (isArray(value)) {
          return true;
      }
      const proto = getPrototypeOf(value);
      return (proto === ObjectDotPrototype || proto === null || getPrototypeOf(proto) === null);
  }
  const defaultValueObserved = (obj, key) => {
      /* do nothing */
  };
  const defaultValueMutated = (obj, key) => {
      /* do nothing */
  };
  const defaultValueDistortion = (value) => value;
  function wrapDescriptor(membrane, descriptor, getValue) {
      const { set, get } = descriptor;
      if (hasOwnProperty.call(descriptor, 'value')) {
          descriptor.value = getValue(membrane, descriptor.value);
      }
      else {
          if (!isUndefined(get)) {
              descriptor.get = function () {
                  // invoking the original getter with the original target
                  return getValue(membrane, get.call(unwrap(this)));
              };
          }
          if (!isUndefined(set)) {
              descriptor.set = function (value) {
                  // At this point we don't have a clear indication of whether
                  // or not a valid mutation will occur, we don't have the key,
                  // and we are not sure why and how they are invoking this setter.
                  // Nevertheless we preserve the original semantics by invoking the
                  // original setter with the original target and the unwrapped value
                  set.call(unwrap(this), membrane.unwrapProxy(value));
              };
          }
      }
      return descriptor;
  }
  class ReactiveMembrane {
      constructor(options) {
          this.valueDistortion = defaultValueDistortion;
          this.valueMutated = defaultValueMutated;
          this.valueObserved = defaultValueObserved;
          this.valueIsObservable = defaultValueIsObservable;
          this.objectGraph = new WeakMap();
          if (!isUndefined(options)) {
              const { valueDistortion, valueMutated, valueObserved, valueIsObservable } = options;
              this.valueDistortion = isFunction(valueDistortion) ? valueDistortion : defaultValueDistortion;
              this.valueMutated = isFunction(valueMutated) ? valueMutated : defaultValueMutated;
              this.valueObserved = isFunction(valueObserved) ? valueObserved : defaultValueObserved;
              this.valueIsObservable = isFunction(valueIsObservable) ? valueIsObservable : defaultValueIsObservable;
          }
      }
      getProxy(value) {
          const unwrappedValue = unwrap(value);
          const distorted = this.valueDistortion(unwrappedValue);
          if (this.valueIsObservable(distorted)) {
              const o = this.getReactiveState(unwrappedValue, distorted);
              // when trying to extract the writable version of a readonly
              // we return the readonly.
              return o.readOnly === value ? value : o.reactive;
          }
          return distorted;
      }
      getReadOnlyProxy(value) {
          value = unwrap(value);
          const distorted = this.valueDistortion(value);
          if (this.valueIsObservable(distorted)) {
              return this.getReactiveState(value, distorted).readOnly;
          }
          return distorted;
      }
      unwrapProxy(p) {
          return unwrap(p);
      }
      getReactiveState(value, distortedValue) {
          const { objectGraph, } = this;
          let reactiveState = objectGraph.get(distortedValue);
          if (reactiveState) {
              return reactiveState;
          }
          const membrane = this;
          reactiveState = {
              get reactive() {
                  const reactiveHandler = new ReactiveProxyHandler(membrane, distortedValue);
                  // caching the reactive proxy after the first time it is accessed
                  const proxy = new Proxy(createShadowTarget(distortedValue), reactiveHandler);
                  registerProxy(proxy, value);
                  ObjectDefineProperty(this, 'reactive', { value: proxy });
                  return proxy;
              },
              get readOnly() {
                  const readOnlyHandler = new ReadOnlyHandler(membrane, distortedValue);
                  // caching the readOnly proxy after the first time it is accessed
                  const proxy = new Proxy(createShadowTarget(distortedValue), readOnlyHandler);
                  registerProxy(proxy, value);
                  ObjectDefineProperty(this, 'readOnly', { value: proxy });
                  return proxy;
              }
          };
          objectGraph.set(distortedValue, reactiveState);
          return reactiveState;
      }
  }
  /** version: 0.26.0 */

  function wrap(data, mutationCallback) {

    let membrane = new ReactiveMembrane({
      valueMutated(target, key) {
        mutationCallback(target, key);
      }

    });
    return {
      data: membrane.getProxy(data),
      membrane: membrane
    };
  }
  function unwrap$1(membrane, observable) {
    let unwrappedData = membrane.unwrapProxy(observable);
    let copy = {};
    Object.keys(unwrappedData).forEach(key => {
      if (['$el', '$refs', '$nextTick', '$watch'].includes(key)) return;
      copy[key] = unwrappedData[key];
    });
    return copy;
  }

  class Component {
    constructor(el, componentForClone = null) {
      this.$el = el;
      const dataAttr = this.$el.getAttribute('x-data');
      const dataExpression = dataAttr === '' ? '{}' : dataAttr;
      const initExpression = this.$el.getAttribute('x-init');
      let dataExtras = {
        $el: this.$el
      };
      let canonicalComponentElementReference = componentForClone ? componentForClone.$el : this.$el;
      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {
        Object.defineProperty(dataExtras, `$${name}`, {
          get: function get() {
            return callback(canonicalComponentElementReference);
          }
        });
      });
      this.unobservedData = componentForClone ? componentForClone.getUnobservedData() : saferEval(el, dataExpression, dataExtras);
      // Construct a Proxy-based observable. This will be used to handle reactivity.

      let {
        membrane,
        data
      } = this.wrapDataInObservable(this.unobservedData);
      this.$data = data;
      this.membrane = membrane; // After making user-supplied data methods reactive, we can now add
      // our magic properties to the original data for access.

      this.unobservedData.$el = this.$el;
      this.unobservedData.$refs = this.getRefsProxy();
      this.nextTickStack = [];

      this.unobservedData.$nextTick = callback => {
        this.nextTickStack.push(callback);
      };

      this.watchers = {};

      this.unobservedData.$watch = (property, callback) => {
        if (!this.watchers[property]) this.watchers[property] = [];
        this.watchers[property].push(callback);
      };
      /* MODERN-ONLY:START */
      // We remove this piece of code from the legacy build.
      // In IE11, we have already defined our helpers at this point.
      // Register custom magic properties.


      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {
        Object.defineProperty(this.unobservedData, `$${name}`, {
          get: function get() {
            return callback(canonicalComponentElementReference, this.$el);
          }
        });
      });
      /* MODERN-ONLY:END */

      this.showDirectiveStack = [];
      this.showDirectiveLastElement;
      componentForClone || Alpine.onBeforeComponentInitializeds.forEach(callback => callback(this));
      var initReturnedCallback; // If x-init is present AND we aren't cloning (skip x-init on clone)

      if (initExpression && !componentForClone) {
        // We want to allow data manipulation, but not trigger DOM updates just yet.
        // We haven't even initialized the elements with their Alpine bindings. I mean c'mon.
        this.pauseReactivity = true;
        initReturnedCallback = this.evaluateReturnExpression(this.$el, initExpression);
        this.pauseReactivity = false;
      } // Register all our listeners and set all our attribute bindings.


      this.initializeElements(this.$el); // Use mutation observer to detect new elements being added within this component at run-time.
      // Alpine's just so darn flexible amirite?

      this.listenForNewElementsToInitialize();

      if (typeof initReturnedCallback === 'function') {
        // Run the callback returned from the "x-init" hook to allow the user to do stuff after
        // Alpine's got it's grubby little paws all over everything.
        initReturnedCallback.call(this.$data);
      }

      componentForClone || setTimeout(() => {
        Alpine.onComponentInitializeds.forEach(callback => callback(this));
      }, 0);
    }

    getUnobservedData() {
      return unwrap$1(this.membrane, this.$data);
    }

    wrapDataInObservable(data) {
      var self = this;
      let updateDom = debounce(function () {
        self.updateElements(self.$el);
      }, 0);
      return wrap(data, (target, key) => {
        if (self.watchers[key]) {
          // If there's a watcher for this specific key, run it.
          self.watchers[key].forEach(callback => callback(target[key]));
        } else if (Array.isArray(target)) {
          // Arrays are special cases, if any of the items change, we consider the array as mutated.
          Object.keys(self.watchers).forEach(fullDotNotationKey => {
            let dotNotationParts = fullDotNotationKey.split('.'); // Ignore length mutations since they would result in duplicate calls.
            // For example, when calling push, we would get a mutation for the item's key
            // and a second mutation for the length property.

            if (key === 'length') return;
            dotNotationParts.reduce((comparisonData, part) => {
              if (Object.is(target, comparisonData[part])) {
                self.watchers[fullDotNotationKey].forEach(callback => callback(target));
              }

              return comparisonData[part];
            }, self.unobservedData);
          });
        } else {
          // Let's walk through the watchers with "dot-notation" (foo.bar) and see
          // if this mutation fits any of them.
          Object.keys(self.watchers).filter(i => i.includes('.')).forEach(fullDotNotationKey => {
            let dotNotationParts = fullDotNotationKey.split('.'); // If this dot-notation watcher's last "part" doesn't match the current
            // key, then skip it early for performance reasons.

            if (key !== dotNotationParts[dotNotationParts.length - 1]) return; // Now, walk through the dot-notation "parts" recursively to find
            // a match, and call the watcher if one's found.

            dotNotationParts.reduce((comparisonData, part) => {
              if (Object.is(target, comparisonData)) {
                // Run the watchers.
                self.watchers[fullDotNotationKey].forEach(callback => callback(target[key]));
              }

              return comparisonData[part];
            }, self.unobservedData);
          });
        } // Don't react to data changes for cases like the `x-created` hook.


        if (self.pauseReactivity) return;
        updateDom();
      });
    }

    walkAndSkipNestedComponents(el, callback, initializeComponentCallback = () => {}) {
      walk(el, el => {
        // We've hit a component.
        if (el.hasAttribute('x-data')) {
          // If it's not the current one.
          if (!el.isSameNode(this.$el)) {
            // Initialize it if it's not.
            if (!el.__x) initializeComponentCallback(el); // Now we'll let that sub-component deal with itself.

            return false;
          }
        }

        return callback(el);
      });
    }

    initializeElements(rootEl, extraVars = () => {}) {
      this.walkAndSkipNestedComponents(rootEl, el => {
        // Don't touch spawns from for loop
        if (el.__x_for_key !== undefined) return false; // Don't touch spawns from if directives

        if (el.__x_inserted_me !== undefined) return false;
        this.initializeElement(el, extraVars);
      }, el => {
        el.__x = new Component(el);
      });
      this.executeAndClearRemainingShowDirectiveStack();
      this.executeAndClearNextTickStack(rootEl);
    }

    initializeElement(el, extraVars) {
      // To support class attribute merging, we have to know what the element's
      // original class attribute looked like for reference.
      if (el.hasAttribute('class') && getXAttrs(el, this).length > 0) {
        el.__x_original_classes = convertClassStringToArray(el.getAttribute('class'));
      }

      this.registerListeners(el, extraVars);
      this.resolveBoundAttributes(el, true, extraVars);
    }

    updateElements(rootEl, extraVars = () => {}) {
      this.walkAndSkipNestedComponents(rootEl, el => {
        // Don't touch spawns from for loop (and check if the root is actually a for loop in a parent, don't skip it.)
        if (el.__x_for_key !== undefined && !el.isSameNode(this.$el)) return false;
        this.updateElement(el, extraVars);
      }, el => {
        el.__x = new Component(el);
      });
      this.executeAndClearRemainingShowDirectiveStack();
      this.executeAndClearNextTickStack(rootEl);
    }

    executeAndClearNextTickStack(el) {
      // Skip spawns from alpine directives
      if (el === this.$el && this.nextTickStack.length > 0) {
        // We run the tick stack after the next frame to allow any
        // running transitions to pass the initial show stage.
        requestAnimationFrame(() => {
          while (this.nextTickStack.length > 0) {
            this.nextTickStack.shift()();
          }
        });
      }
    }

    executeAndClearRemainingShowDirectiveStack() {
      // The goal here is to start all the x-show transitions
      // and build a nested promise chain so that elements
      // only hide when the children are finished hiding.
      this.showDirectiveStack.reverse().map(handler => {
        return new Promise((resolve, reject) => {
          handler(resolve, reject);
        });
      }).reduce((promiseChain, promise) => {
        return promiseChain.then(() => {
          return promise.then(finishElement => {
            finishElement();
          });
        });
      }, Promise.resolve(() => {})).catch(e => {
        if (e !== TRANSITION_CANCELLED) throw e;
      }); // We've processed the handler stack. let's clear it.

      this.showDirectiveStack = [];
      this.showDirectiveLastElement = undefined;
    }

    updateElement(el, extraVars) {
      this.resolveBoundAttributes(el, false, extraVars);
    }

    registerListeners(el, extraVars) {
      getXAttrs(el, this).forEach(({
        type,
        value,
        modifiers,
        expression
      }) => {
        switch (type) {
          case 'on':
            registerListener(this, el, value, modifiers, expression, extraVars);
            break;

          case 'model':
            registerModelListener(this, el, modifiers, expression, extraVars);
            break;
        }
      });
    }

    resolveBoundAttributes(el, initialUpdate = false, extraVars) {
      let attrs = getXAttrs(el, this);
      attrs.forEach(({
        type,
        value,
        modifiers,
        expression
      }) => {
        switch (type) {
          case 'model':
            handleAttributeBindingDirective(this, el, 'value', expression, extraVars, type, modifiers);
            break;

          case 'bind':
            // The :key binding on an x-for is special, ignore it.
            if (el.tagName.toLowerCase() === 'template' && value === 'key') return;
            handleAttributeBindingDirective(this, el, value, expression, extraVars, type, modifiers);
            break;

          case 'text':
            var output = this.evaluateReturnExpression(el, expression, extraVars);
            handleTextDirective(el, output, expression);
            break;

          case 'html':
            handleHtmlDirective(this, el, expression, extraVars);
            break;

          case 'show':
            var output = this.evaluateReturnExpression(el, expression, extraVars);
            handleShowDirective(this, el, output, modifiers, initialUpdate);
            break;

          case 'if':
            // If this element also has x-for on it, don't process x-if.
            // We will let the "x-for" directive handle the "if"ing.
            if (attrs.some(i => i.type === 'for')) return;
            var output = this.evaluateReturnExpression(el, expression, extraVars);
            handleIfDirective(this, el, output, initialUpdate, extraVars);
            break;

          case 'for':
            handleForDirective(this, el, expression, initialUpdate, extraVars);
            break;

          case 'cloak':
            el.removeAttribute('x-cloak');
            break;
        }
      });
    }

    evaluateReturnExpression(el, expression, extraVars = () => {}) {
      return saferEval(el, expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {
        $dispatch: this.getDispatchFunction(el)
      }));
    }

    evaluateCommandExpression(el, expression, extraVars = () => {}) {
      return saferEvalNoReturn(el, expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {
        $dispatch: this.getDispatchFunction(el)
      }));
    }

    getDispatchFunction(el) {
      return (event, detail = {}) => {
        el.dispatchEvent(new CustomEvent(event, {
          detail,
          bubbles: true
        }));
      };
    }

    listenForNewElementsToInitialize() {
      const targetNode = this.$el;
      const observerOptions = {
        childList: true,
        attributes: true,
        subtree: true
      };
      const observer = new MutationObserver(mutations => {
        for (let i = 0; i < mutations.length; i++) {
          // Filter out mutations triggered from child components.
          const closestParentComponent = mutations[i].target.closest('[x-data]');
          if (!(closestParentComponent && closestParentComponent.isSameNode(this.$el))) continue;

          if (mutations[i].type === 'attributes' && mutations[i].attributeName === 'x-data') {
            const xAttr = mutations[i].target.getAttribute('x-data') || '{}';
            const rawData = saferEval(this.$el, xAttr, {
              $el: this.$el
            });
            Object.keys(rawData).forEach(key => {
              if (this.$data[key] !== rawData[key]) {
                this.$data[key] = rawData[key];
              }
            });
          }

          if (mutations[i].addedNodes.length > 0) {
            mutations[i].addedNodes.forEach(node => {
              if (node.nodeType !== 1 || node.__x_inserted_me) return;

              if (node.matches('[x-data]') && !node.__x) {
                node.__x = new Component(node);
                return;
              }

              this.initializeElements(node);
            });
          }
        }
      });
      observer.observe(targetNode, observerOptions);
    }

    getRefsProxy() {
      var self = this;
      var refObj = {};
      // One of the goals of this is to not hold elements in memory, but rather re-evaluate
      // the DOM when the system needs something from it. This way, the framework is flexible and
      // friendly to outside DOM changes from libraries like Vue/Livewire.
      // For this reason, I'm using an "on-demand" proxy to fake a "$refs" object.

      return new Proxy(refObj, {
        get(object, property) {
          if (property === '$isAlpineProxy') return true;
          var ref; // We can't just query the DOM because it's hard to filter out refs in
          // nested components.

          self.walkAndSkipNestedComponents(self.$el, el => {
            if (el.hasAttribute('x-ref') && el.getAttribute('x-ref') === property) {
              ref = el;
            }
          });
          return ref;
        }

      });
    }

  }

  const Alpine = {
    version: "2.8.0",
    pauseMutationObserver: false,
    magicProperties: {},
    onComponentInitializeds: [],
    onBeforeComponentInitializeds: [],
    ignoreFocusedForValueBinding: false,
    start: async function start() {
      if (!isTesting()) {
        await domReady();
      }

      this.discoverComponents(el => {
        this.initializeComponent(el);
      }); // It's easier and more performant to just support Turbolinks than listen
      // to MutationObserver mutations at the document level.

      document.addEventListener("turbolinks:load", () => {
        this.discoverUninitializedComponents(el => {
          this.initializeComponent(el);
        });
      });
      this.listenForNewUninitializedComponentsAtRunTime();
    },
    discoverComponents: function discoverComponents(callback) {
      const rootEls = document.querySelectorAll('[x-data]');
      rootEls.forEach(rootEl => {
        callback(rootEl);
      });
    },
    discoverUninitializedComponents: function discoverUninitializedComponents(callback, el = null) {
      const rootEls = (el || document).querySelectorAll('[x-data]');
      Array.from(rootEls).filter(el => el.__x === undefined).forEach(rootEl => {
        callback(rootEl);
      });
    },
    listenForNewUninitializedComponentsAtRunTime: function listenForNewUninitializedComponentsAtRunTime() {
      const targetNode = document.querySelector('body');
      const observerOptions = {
        childList: true,
        attributes: true,
        subtree: true
      };
      const observer = new MutationObserver(mutations => {
        if (this.pauseMutationObserver) return;

        for (let i = 0; i < mutations.length; i++) {
          if (mutations[i].addedNodes.length > 0) {
            mutations[i].addedNodes.forEach(node => {
              // Discard non-element nodes (like line-breaks)
              if (node.nodeType !== 1) return; // Discard any changes happening within an existing component.
              // They will take care of themselves.

              if (node.parentElement && node.parentElement.closest('[x-data]')) return;
              this.discoverUninitializedComponents(el => {
                this.initializeComponent(el);
              }, node.parentElement);
            });
          }
        }
      });
      observer.observe(targetNode, observerOptions);
    },
    initializeComponent: function initializeComponent(el) {
      if (!el.__x) {
        // Wrap in a try/catch so that we don't prevent other components
        // from initializing when one component contains an error.
        try {
          el.__x = new Component(el);
        } catch (error) {
          setTimeout(() => {
            throw error;
          }, 0);
        }
      }
    },
    clone: function clone(component, newEl) {
      if (!newEl.__x) {
        newEl.__x = new Component(newEl, component);
      }
    },
    addMagicProperty: function addMagicProperty(name, callback) {
      this.magicProperties[name] = callback;
    },
    onComponentInitialized: function onComponentInitialized(callback) {
      this.onComponentInitializeds.push(callback);
    },
    onBeforeComponentInitialized: function onBeforeComponentInitialized(callback) {
      this.onBeforeComponentInitializeds.push(callback);
    }
  };

  if (!isTesting()) {
    window.Alpine = Alpine;

    if (window.deferLoadingAlpine) {
      window.deferLoadingAlpine(function () {
        window.Alpine.start();
      });
    } else {
      window.Alpine.start();
    }
  }

  return Alpine;

})));


/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/activespeakerdetector/DefaultActiveSpeakerDetector.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/activespeakerdetector/DefaultActiveSpeakerDetector.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const IntervalScheduler_1 = __webpack_require__(/*! ../scheduler/IntervalScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/IntervalScheduler.js");
class DefaultActiveSpeakerDetector {
    constructor(realtimeController, selfAttendeeId, hasBandwidthPriorityCallback, waitIntervalMs = 1000, updateIntervalMs = 200) {
        this.realtimeController = realtimeController;
        this.selfAttendeeId = selfAttendeeId;
        this.hasBandwidthPriorityCallback = hasBandwidthPriorityCallback;
        this.waitIntervalMs = waitIntervalMs;
        this.updateIntervalMs = updateIntervalMs;
        this.speakerScores = {};
        this.speakerMuteState = {};
        this.detectorCallbackToHandler = new Map();
        this.detectorCallbackToScoresTimer = new Map();
        this.detectorCallbackToActivityTimer = new Map();
        this.hasBandwidthPriority = false;
        this.mostRecentUpdateTimestamp = {};
    }
    needUpdate(attendeeId) {
        if (!this.activeSpeakers) {
            return true;
        }
        return ((this.speakerScores[attendeeId] === 0 && this.activeSpeakers.includes(attendeeId)) ||
            (this.speakerScores[attendeeId] > 0 && !this.activeSpeakers.includes(attendeeId)));
    }
    updateActiveSpeakers(policy, callback, attendeeId) {
        if (!this.needUpdate(attendeeId)) {
            return;
        }
        const sortedSpeakers = [];
        const attendeeIds = Object.keys(this.speakerScores);
        for (let i = 0; i < attendeeIds.length; i++) {
            const attendeeId = attendeeIds[i];
            sortedSpeakers.push({ attendeeId: attendeeId, activeScore: this.speakerScores[attendeeId] });
        }
        const sortedAttendeeIds = sortedSpeakers
            .sort((s1, s2) => s2.activeScore - s1.activeScore)
            .filter(function (s) {
            return s.activeScore > 0;
        })
            .map(function (s) {
            return s.attendeeId;
        });
        this.activeSpeakers = sortedAttendeeIds;
        callback(sortedAttendeeIds);
        const selfIsActive = sortedAttendeeIds.length > 0 && sortedAttendeeIds[0] === this.selfAttendeeId;
        const hasBandwidthPriority = selfIsActive && policy.prioritizeVideoSendBandwidthForActiveSpeaker();
        const hasBandwidthPriorityDidChange = this.hasBandwidthPriority !== hasBandwidthPriority;
        if (hasBandwidthPriorityDidChange) {
            this.hasBandwidthPriority = hasBandwidthPriority;
            this.hasBandwidthPriorityCallback(hasBandwidthPriority);
        }
    }
    updateScore(policy, callback, attendeeId, volume, muted) {
        const activeScore = policy.calculateScore(attendeeId, volume, muted);
        if (this.speakerScores[attendeeId] !== activeScore) {
            this.speakerScores[attendeeId] = activeScore;
            this.mostRecentUpdateTimestamp[attendeeId] = Date.now();
            this.updateActiveSpeakers(policy, callback, attendeeId);
        }
    }
    subscribe(policy, callback, scoresCallback, scoresCallbackIntervalMs) {
        const handler = (attendeeId, present) => {
            if (!present) {
                this.speakerScores[attendeeId] = 0;
                this.mostRecentUpdateTimestamp[attendeeId] = Date.now();
                this.updateActiveSpeakers(policy, callback, attendeeId);
                return;
            }
            this.realtimeController.realtimeSubscribeToVolumeIndicator(attendeeId, (attendeeId, volume, muted, _signalStrength) => {
                this.mostRecentUpdateTimestamp[attendeeId] = Date.now();
                if (muted !== null) {
                    this.speakerMuteState[attendeeId] = muted;
                }
                this.updateScore(policy, callback, attendeeId, volume, muted);
            });
        };
        this.detectorCallbackToHandler.set(callback, handler);
        const activityTimer = new IntervalScheduler_1.default(this.updateIntervalMs);
        activityTimer.start(() => {
            for (const attendeeId in this.speakerScores) {
                if (Date.now() - this.mostRecentUpdateTimestamp[attendeeId] > this.waitIntervalMs) {
                    this.updateScore(policy, callback, attendeeId, 0, this.speakerMuteState[attendeeId]);
                }
            }
        });
        this.detectorCallbackToActivityTimer.set(callback, activityTimer);
        if (scoresCallback && scoresCallbackIntervalMs) {
            const scoresTimer = new IntervalScheduler_1.default(scoresCallbackIntervalMs);
            scoresTimer.start(() => {
                scoresCallback(this.speakerScores);
            });
            this.detectorCallbackToScoresTimer.set(callback, scoresTimer);
        }
        this.realtimeController.realtimeSubscribeToAttendeeIdPresence(handler);
    }
    unsubscribe(callback) {
        const handler = this.detectorCallbackToHandler.get(callback);
        this.detectorCallbackToHandler.delete(callback);
        if (handler) {
            this.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);
        }
        const activityTimer = this.detectorCallbackToActivityTimer.get(callback);
        if (activityTimer) {
            activityTimer.stop();
            this.detectorCallbackToActivityTimer.delete(callback);
        }
        const scoresTimer = this.detectorCallbackToScoresTimer.get(callback);
        if (scoresTimer) {
            scoresTimer.stop();
            this.detectorCallbackToHandler.delete(callback);
        }
    }
}
exports.default = DefaultActiveSpeakerDetector;
//# sourceMappingURL=DefaultActiveSpeakerDetector.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/activespeakerpolicy/DefaultActiveSpeakerPolicy.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/activespeakerpolicy/DefaultActiveSpeakerPolicy.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class DefaultActiveSpeakerPolicy {
    /** Creates active speaker policy with speakerWeight, cutoffThreshold, silenceThreshold, and takeoverRate.
     *
     * @param speakerWeight
     * The number used to calculate new active speaker score for current attendee
     * ```js
     * Formula:
     * updatedCurrentAttendeeScore = currentAttendeeExistingScore * speakerWeight + currentReceivedVolume * (1 - speakerWeight)
     * ```
     *
     * @param cutoffThreshold
     * The threshold number compared with updated active speaker score.
     * If the updated active speaker score is less than this threshold value,
     * the updated score is returned as 0, else the updated score is returned.
     *
     * @param silenceThreshold
     * The threshold number compared with current received volume.
     * While calculating the new active speaker score, if the current received
     * volume is less than this threshold value, the current received volume is considered as 0,
     * else 1.
     *
     * @param takeoverRate
     * The number used to calculate other attendee's active speaker score, other than the current attendee.
     * ```js
     * Formula:
     *  updatedOtherAttendeeActiveSpeakerScore = Math.max(
     *    existingOtherAttendeeActiveSpeakerScore - takeoverRate * currentReceivedVolume,
     *    0
     *  );
     * ```
     */
    constructor(speakerWeight = 0.9, cutoffThreshold = 0.01, silenceThreshold = 0.2, takeoverRate = 0.2) {
        this.speakerWeight = speakerWeight;
        this.cutoffThreshold = cutoffThreshold;
        this.silenceThreshold = silenceThreshold;
        this.takeoverRate = takeoverRate;
        /**
         * The map of attendeeIds to their active speaker score values
         */
        this.volumes = {};
    }
    calculateScore(attendeeId, volume, muted) {
        if (muted || volume === null) {
            volume = 0;
        }
        if (!this.volumes.hasOwnProperty(attendeeId)) {
            this.volumes[attendeeId] = 0;
        }
        if (volume > this.silenceThreshold) {
            volume = 1.0;
        }
        else {
            volume = 0.0;
        }
        const score = this.volumes[attendeeId] * this.speakerWeight + volume * (1 - this.speakerWeight);
        this.volumes[attendeeId] = score;
        for (const otherAttendeeId in this.volumes) {
            if (otherAttendeeId !== attendeeId) {
                this.volumes[otherAttendeeId] = Math.max(this.volumes[otherAttendeeId] - this.takeoverRate * volume, 0);
            }
        }
        if (score < this.cutoffThreshold) {
            return 0;
        }
        return score;
    }
    prioritizeVideoSendBandwidthForActiveSpeaker() {
        return true;
    }
}
exports.default = DefaultActiveSpeakerPolicy;
//# sourceMappingURL=DefaultActiveSpeakerPolicy.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/attendee/Attendee.js":
/*!*********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/attendee/Attendee.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[Attendee]] contains the information of an attendee.
 */
class Attendee {
}
exports.default = Attendee;
//# sourceMappingURL=Attendee.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/audiomixcontroller/DefaultAudioMixController.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/audiomixcontroller/DefaultAudioMixController.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
class DefaultAudioMixController {
    constructor(logger) {
        this.logger = logger;
        this.audioDevice = null;
        this.audioElement = null;
        this.audioStream = null;
        this.browserBehavior = new DefaultBrowserBehavior_1.default();
    }
    bindAudioElement(element) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!element) {
                throw new Error(`Cannot bind audio element: ${element}`);
            }
            this.audioElement = element;
            this.audioElement.autoplay = true;
            return this.bindAudioMix();
        });
    }
    unbindAudioElement() {
        if (!this.audioElement) {
            return;
        }
        this.audioElement.srcObject = null;
        this.audioElement = null;
    }
    bindAudioStream(stream) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!stream) {
                return;
            }
            this.audioStream = stream;
            try {
                yield this.bindAudioMix();
            }
            catch (error) {
                /* istanbul ignore else */
                if (this.logger) {
                    this.logger.warn(`Failed to bind audio stream: ${error}`);
                }
            }
        });
    }
    bindAudioDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
            /**
             * Throw error if browser doesn't even support setSinkId
             * Read more: https://caniuse.com/?search=setSinkId
             */
            if (device && !this.browserBehavior.supportsSetSinkId()) {
                throw new Error('Cannot select audio output device. This browser does not support setSinkId.');
            }
            // Always set device -- we might be setting it back to `null` to reselect
            // the default, and even in that case we need to call `bindAudioMix` in
            // order to update the sink ID to the empty string.
            this.audioDevice = device;
            return this.bindAudioMix();
        });
    }
    bindAudioMix() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.audioElement) {
                return;
            }
            if (this.audioStream) {
                this.audioElement.srcObject = this.audioStream;
            }
            // In usual operation, the output device is undefined, and so is the element
            // sink ID. In this case, don't throw an error -- we're being called as a side
            // effect of just binding the audio element, not choosing an output device.
            const shouldSetSinkId = ((_a = this.audioDevice) === null || _a === void 0 ? void 0 : _a.deviceId) !== this.audioElement.sinkId;
            if (shouldSetSinkId &&
                typeof this.audioElement.sinkId === 'undefined') {
                throw new Error('Cannot select audio output device. This browser does not support setSinkId.');
            }
            const newSinkId = this.audioDevice ? this.audioDevice.deviceId : '';
            const oldSinkId = this.audioElement.sinkId;
            if (newSinkId === oldSinkId) {
                return;
            }
            // Take the existing stream and temporarily unbind it while we change
            // the sink ID.
            const existingAudioElement = this
                .audioElement;
            const existingStream = this.audioStream;
            if (this.browserBehavior.hasChromiumWebRTC()) {
                existingAudioElement.srcObject = null;
            }
            if (shouldSetSinkId) {
                try {
                    yield existingAudioElement.setSinkId(newSinkId);
                }
                catch (error) {
                    (_b = this.logger) === null || _b === void 0 ? void 0 : _b.error(`Failed to set sinkId for audio element: ${error}`);
                    throw error;
                }
            }
            if (this.browserBehavior.hasChromiumWebRTC()) {
                existingAudioElement.srcObject = existingStream;
            }
        });
    }
}
exports.default = DefaultAudioMixController;
//# sourceMappingURL=DefaultAudioMixController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/audioprofile/AudioProfile.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/audioprofile/AudioProfile.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * AudioProfile defines quality settings of the audio input
 * device. Use the static methods to create presets optimized
 * for fullband speech and fullband music with a mono channel.
 */
class AudioProfile {
    /**
     * Constructs an AudioProfile given an audio bitrate. If no
     * audio bitrate is supplied, then the default AudioProfile
     * is constructed. The default AudioProfile does not adjust
     * the browser's internal bitrate setting.
     */
    constructor(audioBitrateBps = null) {
        this.audioBitrateBps = audioBitrateBps;
    }
    /**
     * Creates an AudioProfile optimized for fullband speech (40 kbit/s mono).
     */
    static fullbandSpeechMono() {
        return new AudioProfile(40000);
    }
    /**
     * Creates an AudioProfile optimized for fullband music (64 kbit/s mono).
     */
    static fullbandMusicMono() {
        return new AudioProfile(64000);
    }
}
exports.default = AudioProfile;
//# sourceMappingURL=AudioProfile.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/AudioVideoControllerState.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/AudioVideoControllerState.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[AudioVideoControllerState]] includes the compute resources shared by [[Task]].
 */
class AudioVideoControllerState {
    constructor() {
        this.logger = null;
        this.browserBehavior = null;
        this.signalingClient = null;
        this.meetingSessionConfiguration = null;
        this.peer = null;
        this.previousSdpOffer = null;
        this.sdpOfferInit = null;
        this.audioVideoController = null;
        this.realtimeController = null;
        this.videoTileController = null;
        this.mediaStreamBroker = null;
        this.audioMixController = null;
        this.activeAudioInput = null;
        this.activeVideoInput = null;
        this.transceiverController = null;
        this.indexFrame = null;
        this.iceCandidates = [];
        this.iceCandidateHandler = null;
        this.iceGatheringStateEventHandler = null;
        this.sdpAnswer = null;
        this.turnCredentials = null;
        this.reconnectController = null;
        this.removableObservers = [];
        this.audioProfile = null;
        this.videoStreamIndex = null;
        this.videoDownlinkBandwidthPolicy = null;
        this.videoUplinkBandwidthPolicy = null;
        this.lastKnownVideoAvailability = null;
        this.localVideoSender = null;
        this.localAudioSender = null;
        this.videoCaptureAndEncodeParameter = null;
        this.videosToReceive = null;
        this.videoSubscriptions = null;
        this.videosPaused = null;
        this.videoDuplexMode = null;
        this.volumeIndicatorAdapter = null;
        this.statsCollector = null;
        this.connectionMonitor = null;
        this.videoInputAttachedTimestampMs = 0;
        this.audioDeviceInformation = {};
        this.videoDeviceInformation = {};
        this.enableSimulcast = false;
        this.eventController = null;
        this.signalingOpenDurationMs = null;
        this.iceGatheringDurationMs = null;
        this.startAudioVideoTimestamp = null;
        this.attendeePresenceDurationMs = null;
        this.meetingStartDurationMs = null;
        this.poorConnectionCount = 0;
        this.maxVideoTileCount = 0;
        this.startTimeMs = null;
    }
}
exports.default = AudioVideoControllerState;
//# sourceMappingURL=AudioVideoControllerState.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/DefaultAudioVideoController.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/DefaultAudioVideoController.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultActiveSpeakerDetector_1 = __webpack_require__(/*! ../activespeakerdetector/DefaultActiveSpeakerDetector */ "./node_modules/amazon-chime-sdk-js/build/activespeakerdetector/DefaultActiveSpeakerDetector.js");
const DefaultAudioMixController_1 = __webpack_require__(/*! ../audiomixcontroller/DefaultAudioMixController */ "./node_modules/amazon-chime-sdk-js/build/audiomixcontroller/DefaultAudioMixController.js");
const AudioProfile_1 = __webpack_require__(/*! ../audioprofile/AudioProfile */ "./node_modules/amazon-chime-sdk-js/build/audioprofile/AudioProfile.js");
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
const ConnectionHealthData_1 = __webpack_require__(/*! ../connectionhealthpolicy/ConnectionHealthData */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ConnectionHealthData.js");
const SignalingAndMetricsConnectionMonitor_1 = __webpack_require__(/*! ../connectionmonitor/SignalingAndMetricsConnectionMonitor */ "./node_modules/amazon-chime-sdk-js/build/connectionmonitor/SignalingAndMetricsConnectionMonitor.js");
const DefaultEventController_1 = __webpack_require__(/*! ../eventcontroller/DefaultEventController */ "./node_modules/amazon-chime-sdk-js/build/eventcontroller/DefaultEventController.js");
const Maybe_1 = __webpack_require__(/*! ../maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
const MeetingSessionStatus_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionStatus */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatus.js");
const MeetingSessionStatusCode_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionStatusCode */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js");
const MeetingSessionVideoAvailability_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionVideoAvailability */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionVideoAvailability.js");
const DefaultPingPong_1 = __webpack_require__(/*! ../pingpong/DefaultPingPong */ "./node_modules/amazon-chime-sdk-js/build/pingpong/DefaultPingPong.js");
const DefaultRealtimeController_1 = __webpack_require__(/*! ../realtimecontroller/DefaultRealtimeController */ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/DefaultRealtimeController.js");
const AsyncScheduler_1 = __webpack_require__(/*! ../scheduler/AsyncScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js");
const DefaultSessionStateController_1 = __webpack_require__(/*! ../sessionstatecontroller/DefaultSessionStateController */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/DefaultSessionStateController.js");
const SessionStateControllerAction_1 = __webpack_require__(/*! ../sessionstatecontroller/SessionStateControllerAction */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerAction.js");
const SessionStateControllerState_1 = __webpack_require__(/*! ../sessionstatecontroller/SessionStateControllerState */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerState.js");
const SessionStateControllerTransitionResult_1 = __webpack_require__(/*! ../sessionstatecontroller/SessionStateControllerTransitionResult */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerTransitionResult.js");
const DefaultSignalingClient_1 = __webpack_require__(/*! ../signalingclient/DefaultSignalingClient */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/DefaultSignalingClient.js");
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const DefaultStatsCollector_1 = __webpack_require__(/*! ../statscollector/DefaultStatsCollector */ "./node_modules/amazon-chime-sdk-js/build/statscollector/DefaultStatsCollector.js");
const AttachMediaInputTask_1 = __webpack_require__(/*! ../task/AttachMediaInputTask */ "./node_modules/amazon-chime-sdk-js/build/task/AttachMediaInputTask.js");
const CleanRestartedSessionTask_1 = __webpack_require__(/*! ../task/CleanRestartedSessionTask */ "./node_modules/amazon-chime-sdk-js/build/task/CleanRestartedSessionTask.js");
const CleanStoppedSessionTask_1 = __webpack_require__(/*! ../task/CleanStoppedSessionTask */ "./node_modules/amazon-chime-sdk-js/build/task/CleanStoppedSessionTask.js");
const CreatePeerConnectionTask_1 = __webpack_require__(/*! ../task/CreatePeerConnectionTask */ "./node_modules/amazon-chime-sdk-js/build/task/CreatePeerConnectionTask.js");
const CreateSDPTask_1 = __webpack_require__(/*! ../task/CreateSDPTask */ "./node_modules/amazon-chime-sdk-js/build/task/CreateSDPTask.js");
const FinishGatheringICECandidatesTask_1 = __webpack_require__(/*! ../task/FinishGatheringICECandidatesTask */ "./node_modules/amazon-chime-sdk-js/build/task/FinishGatheringICECandidatesTask.js");
const JoinAndReceiveIndexTask_1 = __webpack_require__(/*! ../task/JoinAndReceiveIndexTask */ "./node_modules/amazon-chime-sdk-js/build/task/JoinAndReceiveIndexTask.js");
const LeaveAndReceiveLeaveAckTask_1 = __webpack_require__(/*! ../task/LeaveAndReceiveLeaveAckTask */ "./node_modules/amazon-chime-sdk-js/build/task/LeaveAndReceiveLeaveAckTask.js");
const ListenForVolumeIndicatorsTask_1 = __webpack_require__(/*! ../task/ListenForVolumeIndicatorsTask */ "./node_modules/amazon-chime-sdk-js/build/task/ListenForVolumeIndicatorsTask.js");
const MonitorTask_1 = __webpack_require__(/*! ../task/MonitorTask */ "./node_modules/amazon-chime-sdk-js/build/task/MonitorTask.js");
const OpenSignalingConnectionTask_1 = __webpack_require__(/*! ../task/OpenSignalingConnectionTask */ "./node_modules/amazon-chime-sdk-js/build/task/OpenSignalingConnectionTask.js");
const ParallelGroupTask_1 = __webpack_require__(/*! ../task/ParallelGroupTask */ "./node_modules/amazon-chime-sdk-js/build/task/ParallelGroupTask.js");
const ReceiveAudioInputTask_1 = __webpack_require__(/*! ../task/ReceiveAudioInputTask */ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveAudioInputTask.js");
const ReceiveTURNCredentialsTask_1 = __webpack_require__(/*! ../task/ReceiveTURNCredentialsTask */ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveTURNCredentialsTask.js");
const ReceiveVideoInputTask_1 = __webpack_require__(/*! ../task/ReceiveVideoInputTask */ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveVideoInputTask.js");
const ReceiveVideoStreamIndexTask_1 = __webpack_require__(/*! ../task/ReceiveVideoStreamIndexTask */ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveVideoStreamIndexTask.js");
const SendAndReceiveDataMessagesTask_1 = __webpack_require__(/*! ../task/SendAndReceiveDataMessagesTask */ "./node_modules/amazon-chime-sdk-js/build/task/SendAndReceiveDataMessagesTask.js");
const SerialGroupTask_1 = __webpack_require__(/*! ../task/SerialGroupTask */ "./node_modules/amazon-chime-sdk-js/build/task/SerialGroupTask.js");
const SetLocalDescriptionTask_1 = __webpack_require__(/*! ../task/SetLocalDescriptionTask */ "./node_modules/amazon-chime-sdk-js/build/task/SetLocalDescriptionTask.js");
const SetRemoteDescriptionTask_1 = __webpack_require__(/*! ../task/SetRemoteDescriptionTask */ "./node_modules/amazon-chime-sdk-js/build/task/SetRemoteDescriptionTask.js");
const SubscribeAndReceiveSubscribeAckTask_1 = __webpack_require__(/*! ../task/SubscribeAndReceiveSubscribeAckTask */ "./node_modules/amazon-chime-sdk-js/build/task/SubscribeAndReceiveSubscribeAckTask.js");
const TimeoutTask_1 = __webpack_require__(/*! ../task/TimeoutTask */ "./node_modules/amazon-chime-sdk-js/build/task/TimeoutTask.js");
const WaitForAttendeePresenceTask_1 = __webpack_require__(/*! ../task/WaitForAttendeePresenceTask */ "./node_modules/amazon-chime-sdk-js/build/task/WaitForAttendeePresenceTask.js");
const DefaultTransceiverController_1 = __webpack_require__(/*! ../transceivercontroller/DefaultTransceiverController */ "./node_modules/amazon-chime-sdk-js/build/transceivercontroller/DefaultTransceiverController.js");
const SimulcastTransceiverController_1 = __webpack_require__(/*! ../transceivercontroller/SimulcastTransceiverController */ "./node_modules/amazon-chime-sdk-js/build/transceivercontroller/SimulcastTransceiverController.js");
const DefaultVideoCaptureAndEncodeParameter_1 = __webpack_require__(/*! ../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter */ "./node_modules/amazon-chime-sdk-js/build/videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter.js");
const AllHighestVideoBandwidthPolicy_1 = __webpack_require__(/*! ../videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy */ "./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy.js");
const VideoAdaptiveProbePolicy_1 = __webpack_require__(/*! ../videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy */ "./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy.js");
const DefaultVideoStreamIdSet_1 = __webpack_require__(/*! ../videostreamidset/DefaultVideoStreamIdSet */ "./node_modules/amazon-chime-sdk-js/build/videostreamidset/DefaultVideoStreamIdSet.js");
const DefaultVideoStreamIndex_1 = __webpack_require__(/*! ../videostreamindex/DefaultVideoStreamIndex */ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/DefaultVideoStreamIndex.js");
const SimulcastVideoStreamIndex_1 = __webpack_require__(/*! ../videostreamindex/SimulcastVideoStreamIndex */ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/SimulcastVideoStreamIndex.js");
const DefaultVideoTileController_1 = __webpack_require__(/*! ../videotilecontroller/DefaultVideoTileController */ "./node_modules/amazon-chime-sdk-js/build/videotilecontroller/DefaultVideoTileController.js");
const DefaultVideoTileFactory_1 = __webpack_require__(/*! ../videotilefactory/DefaultVideoTileFactory */ "./node_modules/amazon-chime-sdk-js/build/videotilefactory/DefaultVideoTileFactory.js");
const DefaultSimulcastUplinkPolicy_1 = __webpack_require__(/*! ../videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy */ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy.js");
const NScaleVideoUplinkBandwidthPolicy_1 = __webpack_require__(/*! ../videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy */ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy.js");
const DefaultVolumeIndicatorAdapter_1 = __webpack_require__(/*! ../volumeindicatoradapter/DefaultVolumeIndicatorAdapter */ "./node_modules/amazon-chime-sdk-js/build/volumeindicatoradapter/DefaultVolumeIndicatorAdapter.js");
const AudioVideoControllerState_1 = __webpack_require__(/*! ./AudioVideoControllerState */ "./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/AudioVideoControllerState.js");
class DefaultAudioVideoController {
    constructor(configuration, logger, webSocketAdapter, mediaStreamBroker, reconnectController) {
        this._audioProfile = new AudioProfile_1.default();
        this.connectionHealthData = new ConnectionHealthData_1.default();
        this.observerQueue = new Set();
        this.meetingSessionContext = new AudioVideoControllerState_1.default();
        this.enableSimulcast = false;
        this.totalRetryCount = 0;
        this.startAudioVideoTimestamp = 0;
        this._logger = logger;
        this.sessionStateController = new DefaultSessionStateController_1.default(this._logger);
        this._configuration = configuration;
        this.enableSimulcast =
            configuration.enableUnifiedPlanForChromiumBasedBrowsers &&
                configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers &&
                new DefaultBrowserBehavior_1.default().hasChromiumWebRTC();
        this._webSocketAdapter = webSocketAdapter;
        this._realtimeController = new DefaultRealtimeController_1.default();
        this._realtimeController.realtimeSetLocalAttendeeId(configuration.credentials.attendeeId, configuration.credentials.externalUserId);
        this._activeSpeakerDetector = new DefaultActiveSpeakerDetector_1.default(this._realtimeController, configuration.credentials.attendeeId, this.handleHasBandwidthPriority.bind(this));
        this._mediaStreamBroker = mediaStreamBroker;
        this._reconnectController = reconnectController;
        this._videoTileController = new DefaultVideoTileController_1.default(new DefaultVideoTileFactory_1.default(), this, this._logger);
        this._audioMixController = new DefaultAudioMixController_1.default(this._logger);
        this.meetingSessionContext.logger = this._logger;
        this._eventController = new DefaultEventController_1.default(this);
    }
    get configuration() {
        return this._configuration;
    }
    get realtimeController() {
        return this._realtimeController;
    }
    get activeSpeakerDetector() {
        return this._activeSpeakerDetector;
    }
    get videoTileController() {
        return this._videoTileController;
    }
    get audioMixController() {
        return this._audioMixController;
    }
    get eventController() {
        return this._eventController;
    }
    get logger() {
        return this._logger;
    }
    get rtcPeerConnection() {
        return (this.meetingSessionContext && this.meetingSessionContext.peer) || null;
    }
    get mediaStreamBroker() {
        return this._mediaStreamBroker;
    }
    getRTCPeerConnectionStats(selector) {
        if (!this.rtcPeerConnection) {
            return null;
        }
        return this.rtcPeerConnection.getStats(selector);
    }
    setAudioProfile(audioProfile) {
        this._audioProfile = audioProfile;
    }
    addObserver(observer) {
        this.logger.info('adding meeting observer');
        this.observerQueue.add(observer);
    }
    removeObserver(observer) {
        this.logger.info('removing meeting observer');
        this.observerQueue.delete(observer);
    }
    forEachObserver(observerFunc) {
        for (const observer of this.observerQueue) {
            new AsyncScheduler_1.default().start(() => {
                if (this.observerQueue.has(observer)) {
                    observerFunc(observer);
                }
            });
        }
    }
    start() {
        this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, () => {
            this.actionConnect(false);
        });
    }
    actionConnect(reconnecting) {
        return __awaiter(this, void 0, void 0, function* () {
            this.connectionHealthData.reset();
            this.meetingSessionContext = new AudioVideoControllerState_1.default();
            this.meetingSessionContext.logger = this.logger;
            this.meetingSessionContext.eventController = this.eventController;
            this.meetingSessionContext.browserBehavior = new DefaultBrowserBehavior_1.default({
                enableUnifiedPlanForChromiumBasedBrowsers: this.configuration
                    .enableUnifiedPlanForChromiumBasedBrowsers,
            });
            this.meetingSessionContext.meetingSessionConfiguration = this.configuration;
            this.meetingSessionContext.signalingClient = new DefaultSignalingClient_1.default(this._webSocketAdapter, this.logger);
            this.meetingSessionContext.mediaStreamBroker = this._mediaStreamBroker;
            this.meetingSessionContext.realtimeController = this._realtimeController;
            this.meetingSessionContext.audioMixController = this._audioMixController;
            this.meetingSessionContext.audioVideoController = this;
            if (this.enableSimulcast) {
                this.meetingSessionContext.transceiverController = new SimulcastTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);
            }
            else {
                this.meetingSessionContext.transceiverController = new DefaultTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);
            }
            this.meetingSessionContext.volumeIndicatorAdapter = new DefaultVolumeIndicatorAdapter_1.default(this.logger, this._realtimeController, DefaultAudioVideoController.MIN_VOLUME_DECIBELS, DefaultAudioVideoController.MAX_VOLUME_DECIBELS);
            this.meetingSessionContext.videoTileController = this._videoTileController;
            this.meetingSessionContext.videoDownlinkBandwidthPolicy = this.configuration.videoDownlinkBandwidthPolicy;
            this.meetingSessionContext.videoUplinkBandwidthPolicy = this.configuration.videoUplinkBandwidthPolicy;
            this.meetingSessionContext.enableSimulcast = this.enableSimulcast;
            if (this.enableSimulcast) {
                const simulcastPolicy = new DefaultSimulcastUplinkPolicy_1.default(this.configuration.credentials.attendeeId, this.meetingSessionContext.logger);
                simulcastPolicy.addObserver(this);
                this.meetingSessionContext.videoUplinkBandwidthPolicy = simulcastPolicy;
                this.meetingSessionContext.videoDownlinkBandwidthPolicy = new VideoAdaptiveProbePolicy_1.default(this.logger, this.meetingSessionContext.videoTileController);
                this.meetingSessionContext.videoStreamIndex = new SimulcastVideoStreamIndex_1.default(this.logger);
            }
            else {
                this.meetingSessionContext.enableSimulcast = false;
                this.meetingSessionContext.videoStreamIndex = new DefaultVideoStreamIndex_1.default(this.logger);
                if (!this.meetingSessionContext.videoDownlinkBandwidthPolicy) {
                    this.meetingSessionContext.videoDownlinkBandwidthPolicy = new AllHighestVideoBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);
                }
                if (!this.meetingSessionContext.videoUplinkBandwidthPolicy) {
                    this.meetingSessionContext.videoUplinkBandwidthPolicy = new NScaleVideoUplinkBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);
                }
                this.meetingSessionContext.audioProfile = this._audioProfile;
            }
            this.meetingSessionContext.lastKnownVideoAvailability = new MeetingSessionVideoAvailability_1.default();
            this.meetingSessionContext.videoCaptureAndEncodeParameter = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);
            this.meetingSessionContext.videosToReceive = new DefaultVideoStreamIdSet_1.default();
            this.meetingSessionContext.videosPaused = new DefaultVideoStreamIdSet_1.default();
            this.meetingSessionContext.statsCollector = new DefaultStatsCollector_1.default(this, this.logger, this.meetingSessionContext.browserBehavior);
            this.meetingSessionContext.connectionMonitor = new SignalingAndMetricsConnectionMonitor_1.default(this, this._realtimeController, this._videoTileController, this.connectionHealthData, new DefaultPingPong_1.default(this.meetingSessionContext.signalingClient, DefaultAudioVideoController.PING_PONG_INTERVAL_MS, this.logger), this.meetingSessionContext.statsCollector);
            this.meetingSessionContext.reconnectController = this._reconnectController;
            this.meetingSessionContext.audioDeviceInformation = {};
            this.meetingSessionContext.videoDeviceInformation = {};
            if (!reconnecting) {
                this.totalRetryCount = 0;
                this._reconnectController.reset();
                this.startAudioVideoTimestamp = Date.now();
                this.forEachObserver(observer => {
                    Maybe_1.default.of(observer.audioVideoDidStartConnecting).map(f => f.bind(observer)(false));
                });
                /* istanbul ignore else */
                if (this.eventController) {
                    this.eventController.publishEvent('meetingStartRequested');
                }
            }
            this.meetingSessionContext.startAudioVideoTimestamp = this.startAudioVideoTimestamp;
            if (this._reconnectController.hasStartedConnectionAttempt()) {
                // This does not reset the reconnect deadline, but declare it's not the first connection.
                this._reconnectController.startedConnectionAttempt(false);
            }
            else {
                this._reconnectController.startedConnectionAttempt(true);
            }
            try {
                yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStart'), [
                    new MonitorTask_1.default(this.meetingSessionContext, this.configuration.connectionHealthPolicyConfiguration, this.connectionHealthData),
                    new ReceiveAudioInputTask_1.default(this.meetingSessionContext),
                    new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [
                        new SerialGroupTask_1.default(this.logger, 'Signaling', [
                            new OpenSignalingConnectionTask_1.default(this.meetingSessionContext),
                            new ListenForVolumeIndicatorsTask_1.default(this.meetingSessionContext),
                            new SendAndReceiveDataMessagesTask_1.default(this.meetingSessionContext),
                            new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext),
                            new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext),
                            // TODO: ensure index handler does not race with incoming index update
                            new ReceiveVideoStreamIndexTask_1.default(this.meetingSessionContext),
                        ]),
                        new SerialGroupTask_1.default(this.logger, 'Peer', [
                            new CreatePeerConnectionTask_1.default(this.meetingSessionContext),
                            new AttachMediaInputTask_1.default(this.meetingSessionContext),
                            new CreateSDPTask_1.default(this.meetingSessionContext),
                            new SetLocalDescriptionTask_1.default(this.meetingSessionContext),
                            new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext),
                            new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext),
                            this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs > 0
                                ? new TimeoutTask_1.default(this.logger, new ParallelGroupTask_1.default(this.logger, 'FinalizeConnection', [
                                    new WaitForAttendeePresenceTask_1.default(this.meetingSessionContext),
                                    new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),
                                ]), this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs)
                                : new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),
                        ]),
                    ]), this.configuration.connectionTimeoutMs),
                ]).run();
                this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {
                    /* istanbul ignore else */
                    if (this.eventController) {
                        this.meetingSessionContext.meetingStartDurationMs =
                            Date.now() - this.startAudioVideoTimestamp;
                        this.eventController.publishEvent('meetingStartSucceeded', {
                            maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,
                            poorConnectionCount: this.meetingSessionContext.poorConnectionCount,
                            retryCount: this.totalRetryCount,
                            signalingOpenDurationMs: this.meetingSessionContext.signalingOpenDurationMs,
                            iceGatheringDurationMs: this.meetingSessionContext.iceGatheringDurationMs,
                            meetingStartDurationMs: this.meetingSessionContext.meetingStartDurationMs,
                        });
                    }
                    this.meetingSessionContext.startTimeMs = Date.now();
                    this.actionFinishConnecting();
                });
            }
            catch (error) {
                this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, () => __awaiter(this, void 0, void 0, function* () {
                    const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);
                    yield this.actionDisconnect(status, true, error);
                    if (!this.handleMeetingSessionStatus(status, error)) {
                        this.notifyStop(status, error);
                    }
                }));
            }
            this.connectionHealthData.setConnectionStartTime();
        });
    }
    actionFinishConnecting() {
        this.meetingSessionContext.videoDuplexMode = SignalingProtocol_js_1.SdkStreamServiceType.RX;
        if (!this.meetingSessionContext.enableSimulcast) {
            this.enforceBandwidthLimitationForSender(this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0]);
        }
        this.forEachObserver(observer => {
            Maybe_1.default.of(observer.audioVideoDidStart).map(f => f.bind(observer)());
        });
        this._reconnectController.reset();
    }
    stop() {
        /*
        Stops the current audio video meeting session.
        The stop method execution is deferred and executed after
        the current reconnection attempt completes.
        It disables any further reconnection attempts.
        Upon completion, AudioVideoObserver's `audioVideoDidStop`
        callback function is called with `MeetingSessionStatusCode.Left`.
        */
        this.sessionStateController.perform(SessionStateControllerAction_1.default.Disconnect, () => {
            this._reconnectController.disableReconnect();
            this.logger.info('attendee left meeting, session will not be reconnected');
            this.actionDisconnect(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.Left), false, null);
        });
    }
    actionDisconnect(status, reconnecting, error) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStop'), [
                    new TimeoutTask_1.default(this.logger, new LeaveAndReceiveLeaveAckTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs),
                ]).run();
            }
            catch (stopError) {
                this.logger.info('fail to stop');
            }
            try {
                yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoClean'), [
                    new TimeoutTask_1.default(this.logger, new CleanStoppedSessionTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs),
                ]).run();
            }
            catch (cleanError) {
                this.logger.info('fail to clean');
            }
            this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishDisconnecting, () => {
                if (!reconnecting) {
                    this.notifyStop(status, error);
                }
            });
        });
    }
    update() {
        const result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, () => {
            this.actionUpdate(true);
        });
        return (result === SessionStateControllerTransitionResult_1.default.Transitioned ||
            result === SessionStateControllerTransitionResult_1.default.DeferredTransition);
    }
    restartLocalVideo(callback) {
        const restartVideo = () => __awaiter(this, void 0, void 0, function* () {
            if (this._videoTileController.hasStartedLocalVideoTile()) {
                this.logger.info('stopping local video tile prior to local video restart');
                this._videoTileController.stopLocalVideoTile();
                this.logger.info('preparing local video restart update');
                yield this.actionUpdate(false);
                this.logger.info('starting local video tile for local video restart');
                this._videoTileController.startLocalVideoTile();
            }
            this.logger.info('finalizing local video restart update');
            yield this.actionUpdate(true);
            callback();
        });
        const result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, () => {
            restartVideo();
        });
        return (result === SessionStateControllerTransitionResult_1.default.Transitioned ||
            result === SessionStateControllerTransitionResult_1.default.DeferredTransition);
    }
    replaceLocalVideo() {
        return __awaiter(this, void 0, void 0, function* () {
            let videoStream = null;
            try {
                videoStream = yield this.mediaStreamBroker.acquireVideoInputStream();
            }
            catch (error) {
                throw new Error(`could not acquire video stream from mediaStreamBroker due to ${error.message}`);
            }
            if (!videoStream || videoStream.getVideoTracks().length < 1) {
                throw new Error('could not acquire video track');
            }
            const videoTrack = videoStream.getVideoTracks()[0];
            if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {
                throw new Error('no active meeting and peer connection');
            }
            if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {
                yield this.meetingSessionContext.transceiverController.setVideoInput(videoTrack);
            }
            else {
                throw new Error('cannot replace track on Plan B');
            }
            // if there is a local tile, a video tile update event should be fired.
            const localTile = this.meetingSessionContext.videoTileController.getLocalVideoTile();
            if (localTile) {
                const state = localTile.state();
                const settings = videoStream.getVideoTracks()[0].getSettings();
                // so tile update wil be fired.
                localTile.bindVideoStream(state.boundAttendeeId, true, videoStream, settings.width, settings.height, state.streamId, state.boundExternalUserId);
            }
            // Update  the active video input on subscription context to match what we just changed
            // so that subsequent meeting actions can reuse and destroy it.
            this.meetingSessionContext.activeVideoInput = videoStream;
        });
    }
    restartLocalAudio(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            let audioStream = null;
            try {
                audioStream = yield this.mediaStreamBroker.acquireAudioInputStream();
            }
            catch (error) {
                this.logger.info('could not acquire audio stream from mediaStreamBroker');
            }
            if (!audioStream || audioStream.getAudioTracks().length < 1) {
                throw new Error('could not acquire audio track');
            }
            this.connectionHealthData.reset();
            this.connectionHealthData.setConnectionStartTime();
            const audioTrack = audioStream.getAudioTracks()[0];
            if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {
                throw new Error('no active meeting and peer connection');
            }
            let replaceTrackSuccess = false;
            if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {
                replaceTrackSuccess = yield this.meetingSessionContext.transceiverController.replaceAudioTrack(audioTrack);
            }
            else {
                replaceTrackSuccess = yield DefaultTransceiverController_1.default.replaceAudioTrackForSender(this.meetingSessionContext.localAudioSender, audioTrack);
            }
            this.meetingSessionContext.activeAudioInput = audioStream;
            callback();
            if (replaceTrackSuccess) {
                return Promise.resolve();
            }
            else {
                return Promise.reject();
            }
        });
    }
    actionUpdate(notify) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: do not block other updates while waiting for video input
            try {
                yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoUpdate'), [
                    new ReceiveVideoInputTask_1.default(this.meetingSessionContext),
                    new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [
                        new AttachMediaInputTask_1.default(this.meetingSessionContext),
                        new CreateSDPTask_1.default(this.meetingSessionContext),
                        new SetLocalDescriptionTask_1.default(this.meetingSessionContext),
                        new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext),
                        new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext),
                        new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),
                    ]), this.configuration.connectionTimeoutMs),
                ]).run();
                if (notify) {
                    this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, () => {
                        this.actionFinishUpdating();
                    });
                }
            }
            catch (error) {
                this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, () => {
                    const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);
                    if (status.statusCode() !== MeetingSessionStatusCode_1.default.IncompatibleSDP) {
                        this.logger.info('failed to update audio-video session');
                    }
                    this.handleMeetingSessionStatus(status, error);
                });
            }
        });
    }
    notifyStop(status, error) {
        this.forEachObserver(observer => {
            Maybe_1.default.of(observer.audioVideoDidStop).map(f => f.bind(observer)(status));
        });
        /* istanbul ignore else */
        if (this.eventController) {
            const { signalingOpenDurationMs, poorConnectionCount, startTimeMs, iceGatheringDurationMs, attendeePresenceDurationMs, meetingStartDurationMs, } = this.meetingSessionContext;
            const attributes = {
                maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,
                meetingDurationMs: startTimeMs === null ? 0 : Math.round(Date.now() - startTimeMs),
                meetingStatus: MeetingSessionStatusCode_1.default[status.statusCode()],
                signalingOpenDurationMs,
                iceGatheringDurationMs,
                attendeePresenceDurationMs,
                poorConnectionCount,
                meetingStartDurationMs,
                retryCount: this.totalRetryCount,
            };
            if (attributes.meetingDurationMs === 0) {
                attributes.meetingErrorMessage = (error && error.message) || '';
                delete attributes.meetingDurationMs;
                delete attributes.attendeePresenceDurationMs;
                delete attributes.meetingStartDurationMs;
                this.eventController.publishEvent('meetingStartFailed', attributes);
            }
            else if (status.isFailure() || status.isAudioConnectionFailure()) {
                attributes.meetingErrorMessage = (error && error.message) || '';
                this.eventController.publishEvent('meetingFailed', attributes);
            }
            else {
                this.eventController.publishEvent('meetingEnded', attributes);
            }
        }
    }
    actionFinishUpdating() {
        // we do not update parameter for simulcast since they are updated in AttachMediaInputTask
        if (!this.meetingSessionContext.enableSimulcast) {
            const maxBitrateKbps = this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0];
            this.enforceBandwidthLimitationForSender(maxBitrateKbps);
        }
        this.logger.info('updated audio-video session');
    }
    reconnect(status, error) {
        const willRetry = this._reconnectController.retryWithBackoff(() => __awaiter(this, void 0, void 0, function* () {
            if (this.sessionStateController.state() === SessionStateControllerState_1.default.NotConnected) {
                this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, () => {
                    this.actionConnect(true);
                });
            }
            else {
                this.sessionStateController.perform(SessionStateControllerAction_1.default.Reconnect, () => {
                    this.actionReconnect();
                });
            }
            this.totalRetryCount += 1;
        }), () => {
            this.logger.info('canceled retry');
        });
        if (!willRetry) {
            this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, () => {
                this.actionDisconnect(status, false, error);
            });
        }
        return willRetry;
    }
    actionReconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._reconnectController.hasStartedConnectionAttempt()) {
                this._reconnectController.startedConnectionAttempt(false);
                this.forEachObserver(observer => {
                    Maybe_1.default.of(observer.audioVideoDidStartConnecting).map(f => f.bind(observer)(true));
                });
            }
            this.meetingSessionContext.volumeIndicatorAdapter.onReconnect();
            this.connectionHealthData.reset();
            try {
                yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoReconnect'), [
                    new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [
                        new CleanRestartedSessionTask_1.default(this.meetingSessionContext),
                        new SerialGroupTask_1.default(this.logger, 'Signaling', [
                            new OpenSignalingConnectionTask_1.default(this.meetingSessionContext),
                            new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext),
                            new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext),
                        ]),
                        new CreatePeerConnectionTask_1.default(this.meetingSessionContext),
                    ]), this.configuration.connectionTimeoutMs),
                    // TODO: Do we need ReceiveVideoInputTask in the reconnect operation?
                    new ReceiveVideoInputTask_1.default(this.meetingSessionContext),
                    new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [
                        new AttachMediaInputTask_1.default(this.meetingSessionContext),
                        new CreateSDPTask_1.default(this.meetingSessionContext),
                        new SetLocalDescriptionTask_1.default(this.meetingSessionContext),
                        new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext),
                        new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext),
                        new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),
                    ]), this.configuration.connectionTimeoutMs),
                ]).run();
                this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {
                    /* istanbul ignore else */
                    if (this.eventController) {
                        this.eventController.pushMeetingState('meetingReconnected');
                    }
                    this.actionFinishConnecting();
                });
            }
            catch (error) {
                // To perform the "Reconnect" action again, the session should be in the "Connected" state.
                this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {
                    this.logger.info('failed to reconnect audio-video session');
                    const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);
                    this.handleMeetingSessionStatus(status, error);
                });
            }
            this.connectionHealthData.setConnectionStartTime();
        });
    }
    wrapTaskName(taskName) {
        return `${taskName}/${this.configuration.meetingId}/${this.configuration.credentials.attendeeId}`;
    }
    getMeetingStatusCode(error) {
        const matched = /the meeting status code: (\d+)/.exec(error && error.message);
        if (matched && matched.length > 1) {
            return Number(matched[1]);
        }
        else {
            return null;
        }
    }
    enforceBandwidthLimitationForSender(maxBitrateKbps) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {
                yield this.meetingSessionContext.transceiverController.setVideoSendingBitrateKbps(maxBitrateKbps);
            }
            else {
                yield DefaultTransceiverController_1.default.setVideoSendingBitrateKbpsForSender(this.meetingSessionContext.localVideoSender, maxBitrateKbps, this.meetingSessionContext.logger);
            }
        });
    }
    handleMeetingSessionStatus(status, error) {
        this.logger.info(`handling status: ${MeetingSessionStatusCode_1.default[status.statusCode()]}`);
        if (!status.isTerminal()) {
            if (this.meetingSessionContext.statsCollector) {
                this.meetingSessionContext.statsCollector.logMeetingSessionStatus(status);
            }
        }
        if (status.statusCode() === MeetingSessionStatusCode_1.default.IncompatibleSDP) {
            this.restartLocalVideo(() => {
                this.logger.info('handled incompatible SDP by attempting to restart video');
            });
            return true;
        }
        if (status.statusCode() === MeetingSessionStatusCode_1.default.VideoCallSwitchToViewOnly) {
            this._videoTileController.removeLocalVideoTile();
            this.forEachObserver((observer) => {
                Maybe_1.default.of(observer.videoSendDidBecomeUnavailable).map(f => f.bind(observer)());
            });
            return false;
        }
        if (status.isTerminal()) {
            this.logger.error('session will not be reconnected');
            if (this.meetingSessionContext.reconnectController) {
                this.meetingSessionContext.reconnectController.disableReconnect();
            }
        }
        if (status.isFailure() || status.isTerminal()) {
            if (this.meetingSessionContext.reconnectController) {
                const willRetry = this.reconnect(status, error);
                if (willRetry) {
                    this.logger.warn(`will retry due to status code ${MeetingSessionStatusCode_1.default[status.statusCode()]}${error ? ` and error: ${error.message}` : ``}`);
                }
                else {
                    this.logger.error(`failed with status code ${MeetingSessionStatusCode_1.default[status.statusCode()]}${error ? ` and error: ${error.message}` : ``}`);
                }
                return willRetry;
            }
        }
        return false;
    }
    setVideoMaxBandwidthKbps(maxBandwidthKbps) {
        if (this.meetingSessionContext && this.meetingSessionContext.videoUplinkBandwidthPolicy) {
            this.logger.info(`video send has ideal max bandwidth ${maxBandwidthKbps} kbps`);
            this.meetingSessionContext.videoUplinkBandwidthPolicy.setIdealMaxBandwidthKbps(maxBandwidthKbps);
        }
    }
    handleHasBandwidthPriority(hasBandwidthPriority) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.meetingSessionContext &&
                this.meetingSessionContext.videoUplinkBandwidthPolicy &&
                !this.meetingSessionContext.enableSimulcast) {
                const oldMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();
                this.meetingSessionContext.videoUplinkBandwidthPolicy.setHasBandwidthPriority(hasBandwidthPriority);
                const newMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();
                if (oldMaxBandwidth !== newMaxBandwidth) {
                    this.logger.info(`video send bandwidth priority ${hasBandwidthPriority} max has changed from ${oldMaxBandwidth} kbps to ${newMaxBandwidth} kbps`);
                    yield this.enforceBandwidthLimitationForSender(newMaxBandwidth);
                }
            }
        });
    }
    pauseReceivingStream(streamId) {
        if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {
            this.meetingSessionContext.signalingClient.pause([streamId]);
        }
    }
    resumeReceivingStream(streamId) {
        if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {
            this.meetingSessionContext.signalingClient.resume([streamId]);
        }
    }
    getRemoteVideoSources() {
        const { videoStreamIndex } = this.meetingSessionContext;
        if (!videoStreamIndex) {
            this.logger.info('meeting has not started');
            return [];
        }
        const selfAttendeeId = this.configuration.credentials.attendeeId;
        return videoStreamIndex.allVideoSendingSourcesExcludingSelf(selfAttendeeId);
    }
    encodingSimulcastLayersDidChange(simulcastLayers) {
        this.forEachObserver(observer => {
            Maybe_1.default.of(observer.encodingSimulcastLayersDidChange).map(f => f.bind(observer)(simulcastLayers));
        });
    }
}
exports.default = DefaultAudioVideoController;
DefaultAudioVideoController.MIN_VOLUME_DECIBELS = -42;
DefaultAudioVideoController.MAX_VOLUME_DECIBELS = -14;
DefaultAudioVideoController.PING_PONG_INTERVAL_MS = 10000;
//# sourceMappingURL=DefaultAudioVideoController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/NoOpAudioVideoController.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/NoOpAudioVideoController.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const FullJitterBackoff_1 = __webpack_require__(/*! ../backoff/FullJitterBackoff */ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoff.js");
const NoOpDebugLogger_1 = __webpack_require__(/*! ../logger/NoOpDebugLogger */ "./node_modules/amazon-chime-sdk-js/build/logger/NoOpDebugLogger.js");
const NoOpMediaStreamBroker_1 = __webpack_require__(/*! ../mediastreambroker/NoOpMediaStreamBroker */ "./node_modules/amazon-chime-sdk-js/build/mediastreambroker/NoOpMediaStreamBroker.js");
const MeetingSessionConfiguration_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionConfiguration */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionConfiguration.js");
const MeetingSessionCredentials_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionCredentials */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionCredentials.js");
const MeetingSessionURLs_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionURLs */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionURLs.js");
const DefaultReconnectController_1 = __webpack_require__(/*! ../reconnectcontroller/DefaultReconnectController */ "./node_modules/amazon-chime-sdk-js/build/reconnectcontroller/DefaultReconnectController.js");
const DefaultWebSocketAdapter_1 = __webpack_require__(/*! ../websocketadapter/DefaultWebSocketAdapter */ "./node_modules/amazon-chime-sdk-js/build/websocketadapter/DefaultWebSocketAdapter.js");
const DefaultAudioVideoController_1 = __webpack_require__(/*! ./DefaultAudioVideoController */ "./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/DefaultAudioVideoController.js");
class NoOpAudioVideoController extends DefaultAudioVideoController_1.default {
    constructor(configuration) {
        const emptyConfiguration = new MeetingSessionConfiguration_1.default();
        emptyConfiguration.meetingId = '';
        emptyConfiguration.externalMeetingId = '';
        emptyConfiguration.credentials = new MeetingSessionCredentials_1.default();
        emptyConfiguration.credentials.attendeeId = '';
        emptyConfiguration.credentials.joinToken = '';
        emptyConfiguration.urls = new MeetingSessionURLs_1.default();
        emptyConfiguration.urls.turnControlURL = '';
        emptyConfiguration.urls.audioHostURL = '';
        emptyConfiguration.urls.screenViewingURL = '';
        emptyConfiguration.urls.screenDataURL = '';
        emptyConfiguration.urls.screenSharingURL = 'wss://localhost/';
        emptyConfiguration.urls.signalingURL = 'wss://localhost/';
        super(configuration ? configuration : emptyConfiguration, new NoOpDebugLogger_1.default(), new DefaultWebSocketAdapter_1.default(new NoOpDebugLogger_1.default()), new NoOpMediaStreamBroker_1.default(), new DefaultReconnectController_1.default(0, new FullJitterBackoff_1.default(0, 0, 0)));
    }
    setAudioProfile(_audioProfile) { }
    start() { }
    stop() { }
}
exports.default = NoOpAudioVideoController;
//# sourceMappingURL=NoOpAudioVideoController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/audiovideofacade/DefaultAudioVideoFacade.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/audiovideofacade/DefaultAudioVideoFacade.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const VideoTransformDevice_1 = __webpack_require__(/*! ../devicecontroller/VideoTransformDevice */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/VideoTransformDevice.js");
class DefaultAudioVideoFacade {
    constructor(audioVideoController, videoTileController, realtimeController, audioMixController, deviceController, contentShareController) {
        this.audioVideoController = audioVideoController;
        this.videoTileController = videoTileController;
        this.realtimeController = realtimeController;
        this.audioMixController = audioMixController;
        this.deviceController = deviceController;
        this.contentShareController = contentShareController;
    }
    addObserver(observer) {
        this.audioVideoController.addObserver(observer);
        this.trace('addObserver');
    }
    removeObserver(observer) {
        this.audioVideoController.removeObserver(observer);
        this.trace('removeObserver');
    }
    setAudioProfile(audioProfile) {
        this.trace('setAudioProfile', audioProfile);
        this.audioVideoController.setAudioProfile(audioProfile);
    }
    start() {
        this.audioVideoController.start();
        this.trace('start');
    }
    stop() {
        this.audioVideoController.stop();
        this.trace('stop');
    }
    getRTCPeerConnectionStats(selector) {
        this.trace('getRTCPeerConnectionStats', selector ? selector.id : null);
        return this.audioVideoController.getRTCPeerConnectionStats(selector);
    }
    bindAudioElement(element) {
        const result = this.audioMixController.bindAudioElement(element);
        this.trace('bindAudioElement', element.id, result);
        return result;
    }
    unbindAudioElement() {
        this.audioMixController.unbindAudioElement();
        this.trace('unbindAudioElement');
    }
    bindVideoElement(tileId, videoElement) {
        this.videoTileController.bindVideoElement(tileId, videoElement);
        this.trace('bindVideoElement', { tileId: tileId, videoElementId: videoElement.id });
    }
    unbindVideoElement(tileId) {
        this.videoTileController.unbindVideoElement(tileId);
        this.trace('unbindVideoElement', tileId);
    }
    startLocalVideoTile() {
        const result = this.videoTileController.startLocalVideoTile();
        this.trace('startLocalVideoTile', null, result);
        return result;
    }
    stopLocalVideoTile() {
        this.videoTileController.stopLocalVideoTile();
        this.trace('stopLocalVideoTile');
    }
    hasStartedLocalVideoTile() {
        const result = this.videoTileController.hasStartedLocalVideoTile();
        this.trace('hasStartedLocalVideoTile', null, result);
        return result;
    }
    removeLocalVideoTile() {
        this.videoTileController.removeLocalVideoTile();
        this.trace('removeLocalVideoTile');
    }
    getLocalVideoTile() {
        const result = this.videoTileController.getLocalVideoTile();
        this.trace('getLocalVideoTile');
        return result;
    }
    pauseVideoTile(tileId) {
        this.videoTileController.pauseVideoTile(tileId);
        this.trace('pauseVideoTile', tileId);
    }
    unpauseVideoTile(tileId) {
        this.videoTileController.unpauseVideoTile(tileId);
        this.trace('unpauseVideoTile', tileId);
    }
    getVideoTile(tileId) {
        const result = this.videoTileController.getVideoTile(tileId);
        this.trace('getVideoTile', tileId);
        return result;
    }
    getAllRemoteVideoTiles() {
        const result = this.videoTileController.getAllRemoteVideoTiles();
        this.trace('getAllRemoteVideoTiles');
        return result;
    }
    getAllVideoTiles() {
        const result = this.videoTileController.getAllVideoTiles();
        this.trace('getAllVideoTiles');
        return result;
    }
    addVideoTile() {
        const result = this.videoTileController.addVideoTile();
        this.trace('addVideoTile', null, result.state());
        return result;
    }
    removeVideoTile(tileId) {
        this.videoTileController.removeVideoTile(tileId);
        this.trace('removeVideoTile', tileId);
    }
    removeVideoTilesByAttendeeId(attendeeId) {
        const result = this.videoTileController.removeVideoTilesByAttendeeId(attendeeId);
        this.trace('removeVideoTilesByAttendeeId', attendeeId, result);
        return result;
    }
    removeAllVideoTiles() {
        this.videoTileController.removeAllVideoTiles();
        this.trace('removeAllVideoTiles');
    }
    captureVideoTile(tileId) {
        const result = this.videoTileController.captureVideoTile(tileId);
        this.trace('captureVideoTile', tileId);
        return result;
    }
    realtimeSubscribeToAttendeeIdPresence(callback) {
        this.realtimeController.realtimeSubscribeToAttendeeIdPresence(callback);
        this.trace('realtimeSubscribeToAttendeeIdPresence');
    }
    realtimeUnsubscribeToAttendeeIdPresence(callback) {
        this.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(callback);
        this.trace('realtimeUnsubscribeToAttendeeIdPresence');
    }
    realtimeSetCanUnmuteLocalAudio(canUnmute) {
        this.realtimeController.realtimeSetCanUnmuteLocalAudio(canUnmute);
        this.trace('realtimeSetCanUnmuteLocalAudio', canUnmute);
    }
    realtimeSubscribeToSetCanUnmuteLocalAudio(callback) {
        this.realtimeController.realtimeSubscribeToSetCanUnmuteLocalAudio(callback);
        this.trace('realtimeSubscribeToSetCanUnmuteLocalAudio');
    }
    realtimeUnsubscribeToSetCanUnmuteLocalAudio(callback) {
        this.realtimeController.realtimeUnsubscribeToSetCanUnmuteLocalAudio(callback);
    }
    realtimeCanUnmuteLocalAudio() {
        const result = this.realtimeController.realtimeCanUnmuteLocalAudio();
        this.trace('realtimeCanUnmuteLocalAudio', null, result);
        return result;
    }
    realtimeMuteLocalAudio() {
        this.realtimeController.realtimeMuteLocalAudio();
        this.trace('realtimeMuteLocalAudio');
    }
    realtimeUnmuteLocalAudio() {
        const result = this.realtimeController.realtimeUnmuteLocalAudio();
        this.trace('realtimeUnmuteLocalAudio');
        return result;
    }
    realtimeSubscribeToMuteAndUnmuteLocalAudio(callback) {
        this.realtimeController.realtimeSubscribeToMuteAndUnmuteLocalAudio(callback);
        this.trace('realtimeSubscribeToMuteAndUnmuteLocalAudio');
    }
    realtimeUnsubscribeToMuteAndUnmuteLocalAudio(callback) {
        this.realtimeController.realtimeUnsubscribeToMuteAndUnmuteLocalAudio(callback);
    }
    realtimeIsLocalAudioMuted() {
        const result = this.realtimeController.realtimeIsLocalAudioMuted();
        this.trace('realtimeIsLocalAudioMuted');
        return result;
    }
    realtimeSubscribeToVolumeIndicator(attendeeId, callback) {
        this.realtimeController.realtimeSubscribeToVolumeIndicator(attendeeId, callback);
        this.trace('realtimeSubscribeToVolumeIndicator', attendeeId);
    }
    realtimeUnsubscribeFromVolumeIndicator(attendeeId, callback) {
        this.realtimeController.realtimeUnsubscribeFromVolumeIndicator(attendeeId, callback);
        this.trace('realtimeUnsubscribeFromVolumeIndicator', attendeeId, callback);
    }
    realtimeSubscribeToLocalSignalStrengthChange(callback) {
        this.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(callback);
        this.trace('realtimeSubscribeToLocalSignalStrengthChange');
    }
    realtimeUnsubscribeToLocalSignalStrengthChange(callback) {
        this.realtimeController.realtimeUnsubscribeToLocalSignalStrengthChange(callback);
        this.trace('realtimeUnsubscribeToLocalSignalStrengthChange');
    }
    realtimeSendDataMessage(topic, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    data, lifetimeMs) {
        this.realtimeController.realtimeSendDataMessage(topic, data, lifetimeMs);
        this.trace('realtimeSendDataMessage');
    }
    realtimeSubscribeToReceiveDataMessage(topic, callback) {
        this.realtimeController.realtimeSubscribeToReceiveDataMessage(topic, callback);
        this.trace('realtimeSubscribeToReceiveDataMessage');
    }
    realtimeUnsubscribeFromReceiveDataMessage(topic) {
        this.realtimeController.realtimeUnsubscribeFromReceiveDataMessage(topic);
        this.trace('realtimeUnsubscribeFromReceiveDataMessage');
    }
    realtimeSubscribeToFatalError(callback) {
        this.realtimeController.realtimeSubscribeToFatalError(callback);
    }
    realtimeUnsubscribeToFatalError(callback) {
        this.realtimeController.realtimeUnsubscribeToFatalError(callback);
    }
    subscribeToActiveSpeakerDetector(policy, callback, scoresCallback, scoresCallbackIntervalMs) {
        this.audioVideoController.activeSpeakerDetector.subscribe(policy, callback, scoresCallback, scoresCallbackIntervalMs);
        this.trace('subscribeToActiveSpeakerDetector');
    }
    unsubscribeFromActiveSpeakerDetector(callback) {
        this.audioVideoController.activeSpeakerDetector.unsubscribe(callback);
        this.trace('unsubscribeFromActiveSpeakerDetector');
    }
    listAudioInputDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.deviceController.listAudioInputDevices();
            this.trace('listAudioInputDevices', null, result);
            return result;
        });
    }
    listVideoInputDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.deviceController.listVideoInputDevices();
            this.trace('listVideoInputDevices', null, result);
            return result;
        });
    }
    listAudioOutputDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.deviceController.listAudioOutputDevices();
            this.trace('listAudioOutputDevices', null, result);
            return result;
        });
    }
    chooseAudioInputDevice(device) {
        this.trace('chooseAudioInputDevice', device);
        return this.deviceController.chooseAudioInputDevice(device);
    }
    chooseVideoInputDevice(device) {
        if (VideoTransformDevice_1.isVideoTransformDevice(device)) {
            // Don't stringify the device to avoid failures when cyclic object references are present.
            this.trace('chooseVideoInputDevice with transform device');
        }
        else {
            this.trace('chooseVideoInputDevice', device);
        }
        return this.deviceController.chooseVideoInputDevice(device);
    }
    chooseAudioOutputDevice(deviceId) {
        const result = this.deviceController.chooseAudioOutputDevice(deviceId);
        this.trace('chooseAudioOutputDevice', deviceId);
        return result;
    }
    addDeviceChangeObserver(observer) {
        this.deviceController.addDeviceChangeObserver(observer);
        this.trace('addDeviceChangeObserver');
    }
    removeDeviceChangeObserver(observer) {
        this.deviceController.removeDeviceChangeObserver(observer);
        this.trace('removeDeviceChangeObserver');
    }
    createAnalyserNodeForAudioInput() {
        const result = this.deviceController.createAnalyserNodeForAudioInput();
        this.trace('createAnalyserNodeForAudioInput');
        return result;
    }
    startVideoPreviewForVideoInput(element) {
        this.deviceController.startVideoPreviewForVideoInput(element);
        this.trace('startVideoPreviewForVideoInput', element.id);
    }
    stopVideoPreviewForVideoInput(element) {
        this.deviceController.stopVideoPreviewForVideoInput(element);
        this.trace('stopVideoPreviewForVideoInput', element.id);
    }
    setDeviceLabelTrigger(trigger) {
        this.deviceController.setDeviceLabelTrigger(trigger);
        this.trace('setDeviceLabelTrigger');
    }
    mixIntoAudioInput(stream) {
        const result = this.deviceController.mixIntoAudioInput(stream);
        this.trace('mixIntoAudioInput', stream.id);
        return result;
    }
    chooseVideoInputQuality(width, height, frameRate, maxBandwidthKbps) {
        this.deviceController.chooseVideoInputQuality(width, height, frameRate, maxBandwidthKbps);
        this.trace('chooseVideoInputQuality', {
            width: width,
            height: height,
            frameRate: frameRate,
            maxBandwidthKbps: maxBandwidthKbps,
        });
    }
    getVideoInputQualitySettings() {
        const result = this.deviceController.getVideoInputQualitySettings();
        this.trace('getVideoInputQualitySettings');
        return result;
    }
    setContentAudioProfile(audioProfile) {
        this.trace('setContentAudioProfile', audioProfile);
        this.contentShareController.setContentAudioProfile(audioProfile);
    }
    startContentShare(stream) {
        const result = this.contentShareController.startContentShare(stream);
        this.trace('startContentShare');
        return result;
    }
    startContentShareFromScreenCapture(sourceId, frameRate) {
        const result = this.contentShareController.startContentShareFromScreenCapture(sourceId, frameRate);
        this.trace('startContentShareFromScreenCapture');
        return result;
    }
    pauseContentShare() {
        this.contentShareController.pauseContentShare();
        this.trace('pauseContentShare');
    }
    unpauseContentShare() {
        this.contentShareController.unpauseContentShare();
        this.trace('unpauseContentShare');
    }
    stopContentShare() {
        this.contentShareController.stopContentShare();
        this.trace('stopContentShare');
    }
    addContentShareObserver(observer) {
        this.contentShareController.addContentShareObserver(observer);
        this.trace('addContentShareObserver');
    }
    removeContentShareObserver(observer) {
        this.contentShareController.removeContentShareObserver(observer);
        this.trace('removeContentShareObserver');
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    trace(name, input, output) {
        const meetingId = this.audioVideoController.configuration.meetingId;
        const attendeeId = this.audioVideoController.configuration.credentials.attendeeId;
        let s = `API/DefaultAudioVideoFacade/${meetingId}/${attendeeId}/${name}`;
        if (typeof input !== 'undefined') {
            s += ` ${JSON.stringify(input)}`;
        }
        if (typeof output !== 'undefined') {
            s += ` -> ${JSON.stringify(output)}`;
        }
        this.audioVideoController.logger.info(s);
    }
    getRemoteVideoSources() {
        const result = this.audioVideoController.getRemoteVideoSources();
        this.trace('getRemoteVideoSources', null, result);
        return result;
    }
}
exports.default = DefaultAudioVideoFacade;
//# sourceMappingURL=DefaultAudioVideoFacade.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoff.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoff.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implements the [Full Jitter algorithm](
 * https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/)
 * and also allows for specifying a fixed wait added to the full jitter backoff
 * (which can be zero).
 */
class FullJitterBackoff {
    constructor(fixedWaitMs, shortBackoffMs, longBackoffMs) {
        this.fixedWaitMs = fixedWaitMs;
        this.shortBackoffMs = shortBackoffMs;
        this.longBackoffMs = longBackoffMs;
        this.currentRetry = 0;
        if (this.fixedWaitMs < 0) {
            this.fixedWaitMs = 0;
        }
        if (this.shortBackoffMs < 0) {
            this.shortBackoffMs = 0;
        }
        if (this.longBackoffMs < 0) {
            this.longBackoffMs = 0;
        }
        this.reset();
    }
    reset() {
        this.currentRetry = 0;
    }
    nextBackoffAmountMs() {
        const fullJitterMs = Math.random() *
            Math.min(this.longBackoffMs, this.shortBackoffMs * Math.pow(2.0, this.currentRetry)) +
            this.fixedWaitMs;
        this.currentRetry += 1;
        return fullJitterMs;
    }
}
exports.default = FullJitterBackoff;
//# sourceMappingURL=FullJitterBackoff.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoffFactory.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoffFactory.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const FullJitterBackoff_1 = __webpack_require__(/*! ./FullJitterBackoff */ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoff.js");
const FullJitterLimitedBackoff_1 = __webpack_require__(/*! ./FullJitterLimitedBackoff */ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterLimitedBackoff.js");
class FullJitterBackoffFactory {
    constructor(fixedWaitMs, shortBackoffMs, longBackoffMs) {
        this.fixedWaitMs = fixedWaitMs;
        this.shortBackoffMs = shortBackoffMs;
        this.longBackoffMs = longBackoffMs;
    }
    create() {
        return new FullJitterBackoff_1.default(this.fixedWaitMs, this.shortBackoffMs, this.longBackoffMs);
    }
    createWithLimit(limit) {
        return new FullJitterLimitedBackoff_1.default(this.fixedWaitMs, this.shortBackoffMs, this.longBackoffMs, limit);
    }
}
exports.default = FullJitterBackoffFactory;
//# sourceMappingURL=FullJitterBackoffFactory.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterLimitedBackoff.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterLimitedBackoff.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const FullJitterBackoff_1 = __webpack_require__(/*! ./FullJitterBackoff */ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoff.js");
class FullJitterLimitedBackoff extends FullJitterBackoff_1.default {
    constructor(fixedWaitMs, shortBackoffMs, longBackoffMs, limit) {
        super(fixedWaitMs, shortBackoffMs, longBackoffMs);
        this.limit = limit;
        this.attempts = 0;
    }
    nextBackoffAmountMs() {
        this.attempts++;
        if (this.attempts > this.limit) {
            throw new Error('retry limit exceeded');
        }
        return super.nextBackoffAmountMs();
    }
}
exports.default = FullJitterLimitedBackoff;
//# sourceMappingURL=FullJitterLimitedBackoff.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const detect_browser_1 = __webpack_require__(/*! detect-browser */ "./node_modules/detect-browser/es/index.js");
class DefaultBrowserBehavior {
    constructor({ enableUnifiedPlanForChromiumBasedBrowsers = false, } = {}) {
        this.browser = detect_browser_1.detect();
        this.browserSupport = {
            chrome: 78,
            'edge-chromium': 79,
            electron: 7,
            firefox: 60,
            ios: 12,
            safari: 12,
            opera: 66,
            samsung: 12,
            crios: 86,
            fxios: 23,
        };
        this.browserName = {
            chrome: 'Google Chrome',
            'edge-chromium': 'Microsoft Edge',
            electron: 'Electron',
            firefox: 'Mozilla Firefox',
            ios: 'Safari iOS',
            safari: 'Safari',
            opera: 'Opera',
            samsung: 'Samsung Internet',
            crios: 'Chrome iOS',
            fxios: 'Firefox iOS',
        };
        this.chromeLike = [
            'chrome',
            'edge-chromium',
            'chromium-webview',
            'opera',
            'samsung',
        ];
        this.webkitBrowsers = ['crios', 'fxios', 'safari', 'ios'];
        this.enableUnifiedPlanForChromiumBasedBrowsers = enableUnifiedPlanForChromiumBasedBrowsers;
    }
    version() {
        return this.browser.version;
    }
    majorVersion() {
        return parseInt(this.version().split('.')[0]);
    }
    name() {
        return this.browser.name;
    }
    hasChromiumWebRTC() {
        for (const browser of this.chromeLike) {
            if (browser === this.browser.name) {
                return true;
            }
        }
        return false;
    }
    hasWebKitWebRTC() {
        for (const browser of this.webkitBrowsers) {
            if (browser === this.browser.name) {
                return true;
            }
        }
        return false;
    }
    hasFirefoxWebRTC() {
        return this.isFirefox();
    }
    supportsCanvasCapturedStreamPlayback() {
        return !this.isIOSSafari() && !this.isIOSChrome() && !this.isIOSFirefox();
    }
    requiresUnifiedPlan() {
        let shouldEnable = this.isFirefox() || (this.hasWebKitWebRTC() && this.isUnifiedPlanSupported());
        if (this.enableUnifiedPlanForChromiumBasedBrowsers) {
            shouldEnable = shouldEnable || this.hasChromiumWebRTC();
        }
        return shouldEnable;
    }
    requiresResolutionAlignment(width, height) {
        if (this.isAndroid() && this.isPixel3()) {
            return [Math.ceil(width / 64) * 64, Math.ceil(height / 64) * 64];
        }
        return [width, height];
    }
    requiresCheckForSdpConnectionAttributes() {
        return !this.isIOSSafari() && !this.isIOSChrome() && !this.isIOSFirefox();
    }
    requiresIceCandidateGatheringTimeoutWorkaround() {
        return this.hasChromiumWebRTC();
    }
    requiresUnifiedPlanMunging() {
        let shouldRequire = this.hasWebKitWebRTC() && this.isUnifiedPlanSupported();
        if (this.enableUnifiedPlanForChromiumBasedBrowsers) {
            shouldRequire = shouldRequire || this.hasChromiumWebRTC();
        }
        return shouldRequire;
    }
    requiresSortCodecPreferencesForSdpAnswer() {
        return this.isFirefox() && this.majorVersion() <= 68;
    }
    requiresSimulcastMunging() {
        return this.isSafari();
    }
    requiresBundlePolicy() {
        return 'max-bundle';
    }
    requiresPromiseBasedWebRTCGetStats() {
        return !this.hasChromiumWebRTC();
    }
    requiresVideoElementWorkaround() {
        return this.isSafari();
    }
    requiresNoExactMediaStreamConstraints() {
        return (this.isSamsungInternet() ||
            (this.isIOSSafari() && (this.version() === '12.0.0' || this.version() === '12.1.0')));
    }
    requiresGroupIdMediaStreamConstraints() {
        return this.isSamsungInternet();
    }
    getDisplayMediaAudioCaptureSupport() {
        return this.isChrome() || this.isEdge();
    }
    // TODO: Deprecated, needs to be removed
    screenShareUnsupported() {
        console.warn('This function is no longer supported.');
        if (this.isSafari()) {
            return true;
        }
        return false;
    }
    isSupported() {
        if (!this.browserSupport[this.browser.name] ||
            this.majorVersion() < this.browserSupport[this.browser.name]) {
            return false;
        }
        if (this.browser.name === 'firefox' && this.isAndroid()) {
            return false;
        }
        return true;
    }
    supportString() {
        if (this.isAndroid()) {
            return `${this.browserName['chrome']} ${this.browserSupport['chrome']}+, ${this.browserName['samsung']} ${this.browserSupport['samsung']}+`;
        }
        const s = [];
        for (const k in this.browserSupport) {
            s.push(`${this.browserName[k]} ${this.browserSupport[k]}+`);
        }
        return s.join(', ');
    }
    supportedVideoCodecs() {
        return __awaiter(this, void 0, void 0, function* () {
            const pc = new RTCPeerConnection();
            pc.addTransceiver('video', { direction: 'inactive', streams: [] });
            return (yield pc.createOffer({ offerToReceiveVideo: true })).sdp
                .split('\r\n')
                .filter(x => {
                return x.includes('a=rtpmap:');
            })
                .map(x => {
                return x.replace(/.* /, '').replace(/\/.*/, '');
            })
                .filter((v, i, a) => {
                return a.indexOf(v) === i;
            })
                .filter(x => {
                return x !== 'rtx' && x !== 'red' && x !== 'ulpfec';
            });
        });
    }
    supportsSetSinkId() {
        return 'setSinkId' in HTMLAudioElement.prototype;
    }
    // These helpers should be kept private to encourage
    // feature detection instead of browser detection.
    isIOSSafari() {
        return this.browser.name === 'ios';
    }
    isSafari() {
        return this.browser.name === 'safari' || this.browser.name === 'ios';
    }
    isFirefox() {
        return this.browser.name === 'firefox';
    }
    isIOSFirefox() {
        return this.browser.name === 'fxios';
    }
    isIOSChrome() {
        return this.browser.name === 'crios';
    }
    isChrome() {
        return this.browser.name === 'chrome';
    }
    isEdge() {
        return this.browser.name === 'edge-chromium';
    }
    isSamsungInternet() {
        return this.browser.name === 'samsung';
    }
    isAndroid() {
        return /(android)/i.test(navigator.userAgent);
    }
    isPixel3() {
        return /( pixel 3)/i.test(navigator.userAgent);
    }
    isUnifiedPlanSupported() {
        return RTCRtpTransceiver.prototype.hasOwnProperty('currentDirection');
    }
}
exports.default = DefaultBrowserBehavior;
//# sourceMappingURL=DefaultBrowserBehavior.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportDirection.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportDirection.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClientMetricReportDirection = void 0;
var ClientMetricReportDirection;
(function (ClientMetricReportDirection) {
    ClientMetricReportDirection[ClientMetricReportDirection["UPSTREAM"] = 0] = "UPSTREAM";
    ClientMetricReportDirection[ClientMetricReportDirection["DOWNSTREAM"] = 1] = "DOWNSTREAM";
})(ClientMetricReportDirection = exports.ClientMetricReportDirection || (exports.ClientMetricReportDirection = {}));
exports.default = ClientMetricReportDirection;
//# sourceMappingURL=ClientMetricReportDirection.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportMediaType.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportMediaType.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClientMetricReportMediaType = void 0;
var ClientMetricReportMediaType;
(function (ClientMetricReportMediaType) {
    ClientMetricReportMediaType[ClientMetricReportMediaType["AUDIO"] = 0] = "AUDIO";
    ClientMetricReportMediaType[ClientMetricReportMediaType["VIDEO"] = 1] = "VIDEO";
})(ClientMetricReportMediaType = exports.ClientMetricReportMediaType || (exports.ClientMetricReportMediaType = {}));
exports.default = ClientMetricReportMediaType;
//# sourceMappingURL=ClientMetricReportMediaType.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientVideoStreamReceivingReport.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientVideoStreamReceivingReport.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class ClientVideoStreamReceivingReport {
}
exports.default = ClientVideoStreamReceivingReport;
//# sourceMappingURL=ClientVideoStreamReceivingReport.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/DefaultClientMetricReport.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/clientmetricreport/DefaultClientMetricReport.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const ClientMetricReportDirection_1 = __webpack_require__(/*! ./ClientMetricReportDirection */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportDirection.js");
const ClientMetricReportMediaType_1 = __webpack_require__(/*! ./ClientMetricReportMediaType */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportMediaType.js");
const GlobalMetricReport_1 = __webpack_require__(/*! ./GlobalMetricReport */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/GlobalMetricReport.js");
class DefaultClientMetricReport {
    constructor(logger) {
        this.logger = logger;
        this.globalMetricReport = new GlobalMetricReport_1.default();
        this.streamMetricReports = {};
        this.currentTimestampMs = 0;
        this.previousTimestampMs = 0;
        this.currentSsrcs = {};
        /**
         *  Metric transform functions
         */
        this.identityValue = (metricName, ssrc) => {
            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;
            return Number(metricReport.currentMetrics[metricName]);
        };
        this.decoderLossPercent = (metricName, ssrc) => {
            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;
            const decoderNormal = metricReport.currentMetrics['googDecodingNormal'] -
                (metricReport.previousMetrics['googDecodingNormal'] || 0);
            const decoderCalls = metricReport.currentMetrics['googDecodingCTN'] -
                (metricReport.previousMetrics['googDecodingCTN'] || 0);
            if (decoderCalls <= 0) {
                return 0;
            }
            const decoderAbnormal = decoderCalls - decoderNormal;
            if (decoderAbnormal <= 0) {
                return 0;
            }
            return (decoderAbnormal * 100) / decoderCalls;
        };
        this.packetLossPercent = (sourceMetricName, ssrc) => {
            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;
            const sentOrReceived = metricReport.currentMetrics[sourceMetricName] -
                (metricReport.previousMetrics[sourceMetricName] || 0);
            const lost = metricReport.currentMetrics['packetsLost'] -
                (metricReport.previousMetrics['packetsLost'] || 0);
            const total = sentOrReceived + lost;
            if (total <= 0 || lost <= 0) {
                return 0;
            }
            return (lost * 100) / total;
        };
        this.countPerSecond = (metricName, ssrc) => {
            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;
            let intervalSeconds = (this.currentTimestampMs - this.previousTimestampMs) / 1000;
            if (intervalSeconds <= 0) {
                return 0;
            }
            if (this.previousTimestampMs <= 0) {
                intervalSeconds = 1;
            }
            const diff = metricReport.currentMetrics[metricName] - (metricReport.previousMetrics[metricName] || 0);
            if (diff <= 0) {
                return 0;
            }
            return Math.trunc(diff / intervalSeconds);
        };
        this.bitsPerSecond = (metricName, ssrc) => {
            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;
            let intervalSeconds = (this.currentTimestampMs - this.previousTimestampMs) / 1000;
            if (intervalSeconds <= 0) {
                return 0;
            }
            if (this.previousTimestampMs <= 0) {
                intervalSeconds = 1;
            }
            const diff = (metricReport.currentMetrics[metricName] - (metricReport.previousMetrics[metricName] || 0)) *
                8;
            if (diff <= 0) {
                return 0;
            }
            return Math.trunc(diff / intervalSeconds);
        };
        this.secondsToMilliseconds = (metricName, ssrc) => {
            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;
            return Number(metricReport.currentMetrics[metricName] * 1000);
        };
        /**
         *  Canonical and derived metric maps
         */
        this.globalMetricMap = {
            googActualEncBitrate: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_ACTUAL_ENCODER_BITRATE,
            },
            googAvailableSendBandwidth: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_SEND_BANDWIDTH,
            },
            googRetransmitBitrate: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RETRANSMIT_BITRATE,
            },
            googAvailableReceiveBandwidth: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_RECEIVE_BANDWIDTH,
            },
            googTargetEncBitrate: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_TARGET_ENCODER_BITRATE,
            },
            googBucketDelay: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_BUCKET_DELAY_MS },
            googRtt: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.STUN_RTT_MS },
            packetsDiscardedOnSend: {
                transform: this.countPerSecond,
                type: SignalingProtocol_js_1.SdkMetric.Type.SOCKET_DISCARDED_PPS,
            },
            availableIncomingBitrate: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_RECEIVE_BANDWIDTH,
            },
            availableOutgoingBitrate: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_SEND_BANDWIDTH,
            },
            currentRoundTripTime: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.STUN_RTT_MS },
        };
        this.audioUpstreamMetricMap = {
            googJitterReceived: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_JITTER_MS },
            jitter: { transform: this.secondsToMilliseconds, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_JITTER_MS },
            packetsSent: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_PPS },
            bytesSent: { transform: this.bitsPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_BITRATE },
            googRtt: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_RTT_MS },
            packetsLost: {
                transform: this.packetLossPercent,
                type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_FRACTION_PACKET_LOST_PERCENT,
                source: 'packetsSent',
            },
        };
        this.audioDownstreamMetricMap = {
            packetsReceived: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_PPS },
            packetsLost: {
                transform: this.packetLossPercent,
                type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_FRACTION_PACKET_LOST_PERCENT,
                source: 'packetsReceived',
            },
            googJitterReceived: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_JITTER_MS },
            jitter: { transform: this.secondsToMilliseconds, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_JITTER_MS },
            googDecodingCTN: { transform: this.countPerSecond },
            googDecodingNormal: {
                transform: this.decoderLossPercent,
                type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_FRACTION_DECODER_LOSS_PERCENT,
                source: 'googDecodingCTN',
            },
            bytesReceived: { transform: this.bitsPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_BITRATE },
            googCurrentDelayMs: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_CURRENT_DELAY_MS,
            },
            googJitterBufferMs: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_JITTER_BUFFER_MS,
            },
        };
        this.videoUpstreamMetricMap = {
            googRtt: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_RTT_MS },
            googEncodeUsagePercent: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_ENCODE_USAGE_PERCENT,
            },
            googNacksReceived: {
                transform: this.countPerSecond,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_RECEIVED,
            },
            nackCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_RECEIVED },
            googPlisReceived: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_RECEIVED },
            pliCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_RECEIVED },
            googFirsReceived: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_RECEIVED },
            firCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_RECEIVED },
            googAvgEncodeMs: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVERAGE_ENCODE_MS,
            },
            googFrameRateInput: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_INPUT_FPS },
            framesEncoded: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_ENCODE_FPS },
            googFrameRateSent: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_FPS },
            framerateMean: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_FPS },
            packetsSent: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_PPS },
            packetsLost: {
                transform: this.packetLossPercent,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_FRACTION_PACKET_LOST_PERCENT,
                source: 'packetsSent',
            },
            bytesSent: { transform: this.bitsPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_BITRATE },
            droppedFrames: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DROPPED_FPS },
        };
        this.videoDownstreamMetricMap = {
            googTargetDelayMs: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_TARGET_DELAY_MS,
            },
            googDecodeMs: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DECODE_MS },
            googFrameRateOutput: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_OUTPUT_FPS },
            packetsReceived: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_PPS },
            packetsLost: {
                transform: this.packetLossPercent,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_FRACTION_PACKET_LOST_PERCENT,
                source: 'packetsReceived',
            },
            googRenderDelayMs: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RENDER_DELAY_MS,
            },
            googFrameRateReceived: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_FPS,
            },
            framerateMean: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_FPS },
            framesDecoded: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DECODE_FPS },
            googNacksSent: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_SENT },
            nackCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_SENT },
            googFirsSent: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_SENT },
            firCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_SENT },
            googPlisSent: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_SENT },
            pliCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_SENT },
            bytesReceived: { transform: this.bitsPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_BITRATE },
            googCurrentDelayMs: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_CURRENT_DELAY_MS,
            },
            googJitterBufferMs: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_JITTER_BUFFER_MS,
            },
            discardedPackets: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DISCARDED_PPS },
            googJitterReceived: {
                transform: this.identityValue,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_JITTER_MS,
            },
            jitter: {
                transform: this.secondsToMilliseconds,
                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_JITTER_MS,
            },
        };
        /**
         * Observable metrics and related APIs
         */
        this.observableMetricSpec = {
            audioPacketsReceived: {
                source: 'packetsReceived',
                media: ClientMetricReportMediaType_1.default.AUDIO,
                dir: ClientMetricReportDirection_1.default.DOWNSTREAM,
            },
            audioPacketsReceivedFractionLoss: {
                source: 'packetsLost',
                media: ClientMetricReportMediaType_1.default.AUDIO,
                dir: ClientMetricReportDirection_1.default.DOWNSTREAM,
            },
            audioDecoderLoss: {
                source: 'googDecodingNormal',
                media: ClientMetricReportMediaType_1.default.AUDIO,
                dir: ClientMetricReportDirection_1.default.DOWNSTREAM,
            },
            videoUpstreamBitrate: { source: 'bytesSent', media: ClientMetricReportMediaType_1.default.VIDEO, dir: ClientMetricReportDirection_1.default.UPSTREAM },
            videoPacketSentPerSecond: {
                source: 'packetsSent',
                media: ClientMetricReportMediaType_1.default.VIDEO,
                dir: ClientMetricReportDirection_1.default.UPSTREAM,
            },
            availableSendBandwidth: { source: 'googAvailableSendBandwidth' },
            availableReceiveBandwidth: { source: 'googAvailableReceiveBandwidth' },
            audioSpeakerDelayMs: {
                source: 'googCurrentDelayMs',
                media: ClientMetricReportMediaType_1.default.AUDIO,
                dir: ClientMetricReportDirection_1.default.DOWNSTREAM,
            },
            // new getStats() API
            availableIncomingBitrate: { source: 'availableIncomingBitrate' },
            availableOutgoingBitrate: { source: 'availableOutgoingBitrate' },
            nackCountReceivedPerSecond: {
                source: 'nackCount',
                media: ClientMetricReportMediaType_1.default.VIDEO,
                dir: ClientMetricReportDirection_1.default.UPSTREAM,
            },
            googNackCountReceivedPerSecond: {
                source: 'googNacksReceived',
                media: ClientMetricReportMediaType_1.default.VIDEO,
                dir: ClientMetricReportDirection_1.default.UPSTREAM,
            },
        };
    }
    getMetricMap(mediaType, direction) {
        switch (mediaType) {
            case ClientMetricReportMediaType_1.default.AUDIO:
                switch (direction) {
                    case ClientMetricReportDirection_1.default.UPSTREAM:
                        return this.audioUpstreamMetricMap;
                    case ClientMetricReportDirection_1.default.DOWNSTREAM:
                        return this.audioDownstreamMetricMap;
                }
            case ClientMetricReportMediaType_1.default.VIDEO:
                switch (direction) {
                    case ClientMetricReportDirection_1.default.UPSTREAM:
                        return this.videoUpstreamMetricMap;
                    case ClientMetricReportDirection_1.default.DOWNSTREAM:
                        return this.videoDownstreamMetricMap;
                }
            default:
                return this.globalMetricMap;
        }
    }
    getObservableMetricValue(metricName) {
        const observableMetricSpec = this.observableMetricSpec[metricName];
        const metricMap = this.getMetricMap(observableMetricSpec.media, observableMetricSpec.dir);
        const metricSpec = metricMap[observableMetricSpec.source];
        const transform = metricSpec.transform;
        const source = metricSpec.source;
        if (observableMetricSpec.hasOwnProperty('media')) {
            for (const ssrc in this.streamMetricReports) {
                const streamMetricReport = this.streamMetricReports[ssrc];
                if (observableMetricSpec.source in streamMetricReport.currentMetrics &&
                    streamMetricReport.direction === observableMetricSpec.dir &&
                    streamMetricReport.mediaType === observableMetricSpec.media) {
                    return source
                        ? transform(source, Number(ssrc))
                        : transform(observableMetricSpec.source, Number(ssrc));
                }
            }
        }
        else {
            return source ? transform(source) : transform(observableMetricSpec.source);
        }
        return 0;
    }
    getObservableMetrics() {
        const metric = {};
        for (const metricName in this.observableMetricSpec) {
            metric[metricName] = this.getObservableMetricValue(metricName);
        }
        return metric;
    }
    /**
     * Utilities
     */
    clone() {
        const cloned = new DefaultClientMetricReport(this.logger);
        cloned.globalMetricReport = this.globalMetricReport;
        cloned.streamMetricReports = this.streamMetricReports;
        cloned.currentTimestampMs = this.currentTimestampMs;
        cloned.previousTimestampMs = this.previousTimestampMs;
        return cloned;
    }
    print() {
        const clientMetricReport = {
            globalMetricReport: this.globalMetricReport,
            streamMetricReports: this.streamMetricReports,
            currentTimestampMs: this.currentTimestampMs,
            previousTimestampMs: this.previousTimestampMs,
        };
        this.logger.debug(() => {
            return `Client Metric Report: ${JSON.stringify(clientMetricReport)}`;
        });
    }
    removeDestroyedSsrcs() {
        for (const ssrc in this.streamMetricReports) {
            if (!this.currentSsrcs[ssrc]) {
                delete this.streamMetricReports[ssrc];
            }
        }
    }
}
exports.default = DefaultClientMetricReport;
//# sourceMappingURL=DefaultClientMetricReport.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/GlobalMetricReport.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/clientmetricreport/GlobalMetricReport.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class GlobalMetricReport {
    constructor() {
        this.previousMetrics = {};
        this.currentMetrics = {};
    }
}
exports.default = GlobalMetricReport;
//# sourceMappingURL=GlobalMetricReport.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/StreamMetricReport.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/clientmetricreport/StreamMetricReport.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class StreamMetricReport {
    constructor() {
        this.previousMetrics = {};
        this.currentMetrics = {};
    }
}
exports.default = StreamMetricReport;
//# sourceMappingURL=StreamMetricReport.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/BaseConnectionHealthPolicy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/BaseConnectionHealthPolicy.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class BaseConnectionHealthPolicy {
    constructor(configuration, data) {
        this.minHealth = configuration.minHealth;
        this.maxHealth = configuration.maxHealth;
        this.currentHealth = configuration.initialHealth;
        this.currentData = data.clone();
    }
    minimumHealth() {
        return this.minHealth;
    }
    maximumHealth() {
        return this.maxHealth;
    }
    health() {
        return this.maximumHealth();
    }
    update(connectionHealthData) {
        this.currentData = connectionHealthData;
    }
    getConnectionHealthData() {
        return this.currentData.clone();
    }
    healthy() {
        return this.health() > this.minimumHealth();
    }
    healthIfChanged() {
        const newHealth = this.health();
        if (newHealth !== this.currentHealth) {
            this.currentHealth = newHealth;
            return newHealth;
        }
        return null;
    }
}
exports.default = BaseConnectionHealthPolicy;
//# sourceMappingURL=BaseConnectionHealthPolicy.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ConnectionHealthData.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ConnectionHealthData.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class ConnectionHealthData {
    constructor() {
        this.connectionStartTimestampMs = 0;
        this.consecutiveStatsWithNoPackets = 0;
        this.lastPacketLossInboundTimestampMs = 0;
        this.lastGoodSignalTimestampMs = 0;
        this.lastWeakSignalTimestampMs = 0;
        this.lastNoSignalTimestampMs = 0;
        this.consecutiveMissedPongs = 0;
        this.packetsReceivedInLastMinute = [];
        this.fractionPacketsLostInboundInLastMinute = [];
        this.audioSpeakerDelayMs = 0;
        this.connectionStartTimestampMs = Date.now();
        this.lastGoodSignalTimestampMs = Date.now();
    }
    static isTimestampRecent(timestampMs, recentDurationMs) {
        return Date.now() < timestampMs + recentDurationMs;
    }
    setConnectionStartTime() {
        this.connectionStartTimestampMs = Date.now();
        this.lastGoodSignalTimestampMs = Date.now();
    }
    reset() {
        this.connectionStartTimestampMs = 0;
        this.consecutiveStatsWithNoPackets = 0;
        this.lastPacketLossInboundTimestampMs = 0;
        this.lastGoodSignalTimestampMs = 0;
        this.lastWeakSignalTimestampMs = 0;
        this.lastNoSignalTimestampMs = 0;
        this.consecutiveMissedPongs = 0;
        this.packetsReceivedInLastMinute = [];
        this.fractionPacketsLostInboundInLastMinute = [];
        this.audioSpeakerDelayMs = 0;
        this.connectionStartTimestampMs = Date.now();
        this.lastGoodSignalTimestampMs = Date.now();
    }
    isConnectionStartRecent(recentDurationMs) {
        return ConnectionHealthData.isTimestampRecent(this.connectionStartTimestampMs, recentDurationMs);
    }
    isLastPacketLossRecent(recentDurationMs) {
        return ConnectionHealthData.isTimestampRecent(this.lastPacketLossInboundTimestampMs, recentDurationMs);
    }
    isGoodSignalRecent(recentDurationMs) {
        return ConnectionHealthData.isTimestampRecent(this.lastGoodSignalTimestampMs, recentDurationMs);
    }
    isWeakSignalRecent(recentDurationMs) {
        return ConnectionHealthData.isTimestampRecent(this.lastWeakSignalTimestampMs, recentDurationMs);
    }
    isNoSignalRecent(recentDurationMs) {
        return ConnectionHealthData.isTimestampRecent(this.lastNoSignalTimestampMs, recentDurationMs);
    }
    clone() {
        const cloned = new ConnectionHealthData();
        cloned.connectionStartTimestampMs = this.connectionStartTimestampMs;
        cloned.consecutiveStatsWithNoPackets = this.consecutiveStatsWithNoPackets;
        cloned.lastPacketLossInboundTimestampMs = this.lastPacketLossInboundTimestampMs;
        cloned.lastGoodSignalTimestampMs = this.lastGoodSignalTimestampMs;
        cloned.lastWeakSignalTimestampMs = this.lastWeakSignalTimestampMs;
        cloned.lastNoSignalTimestampMs = this.lastNoSignalTimestampMs;
        cloned.consecutiveMissedPongs = this.consecutiveMissedPongs;
        cloned.packetsReceivedInLastMinute = this.packetsReceivedInLastMinute.slice(0);
        cloned.fractionPacketsLostInboundInLastMinute = this.fractionPacketsLostInboundInLastMinute.slice(0);
        cloned.audioSpeakerDelayMs = this.audioSpeakerDelayMs;
        return cloned;
    }
    setConsecutiveMissedPongs(pongs) {
        this.consecutiveMissedPongs = pongs;
    }
    setConsecutiveStatsWithNoPackets(stats) {
        this.consecutiveStatsWithNoPackets = stats;
    }
    setLastPacketLossInboundTimestampMs(timeStamp) {
        this.lastPacketLossInboundTimestampMs = timeStamp;
    }
    setLastNoSignalTimestampMs(timeStamp) {
        this.lastNoSignalTimestampMs = timeStamp;
    }
    setLastWeakSignalTimestampMs(timeStamp) {
        this.lastWeakSignalTimestampMs = timeStamp;
    }
    setLastGoodSignalTimestampMs(timeStamp) {
        this.lastGoodSignalTimestampMs = timeStamp;
    }
    setAudioSpeakerDelayMs(delayMs) {
        this.audioSpeakerDelayMs = delayMs;
    }
}
exports.default = ConnectionHealthData;
//# sourceMappingURL=ConnectionHealthData.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ConnectionHealthPolicyConfiguration.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ConnectionHealthPolicyConfiguration.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class ConnectionHealthPolicyConfiguration {
    constructor() {
        this.minHealth = 0;
        this.maxHealth = 1;
        this.initialHealth = 1;
        this.connectionUnhealthyThreshold = 25;
        this.noSignalThresholdTimeMs = 10000;
        this.connectionWaitTimeMs = 10000;
        this.zeroBarsNoSignalTimeMs = 5000;
        this.oneBarWeakSignalTimeMs = 5000;
        this.twoBarsTimeMs = 5000;
        this.threeBarsTimeMs = 10000;
        this.fourBarsTimeMs = 20000;
        this.fiveBarsTimeMs = 60000;
        this.cooldownTimeMs = 60000;
        this.pastSamplesToConsider = 15;
        this.goodSignalTimeMs = 15000;
        this.fractionalLoss = 0.5;
        this.packetsExpected = 50;
        this.maximumTimesToWarn = 2;
        this.missedPongsLowerThreshold = 1;
        this.missedPongsUpperThreshold = 4;
        this.maximumAudioDelayMs = 60000;
        this.maximumAudioDelayDataPoints = 10;
    }
}
exports.default = ConnectionHealthPolicyConfiguration;
//# sourceMappingURL=ConnectionHealthPolicyConfiguration.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ReconnectionHealthPolicy.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ReconnectionHealthPolicy.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseConnectionHealthPolicy_1 = __webpack_require__(/*! ./BaseConnectionHealthPolicy */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/BaseConnectionHealthPolicy.js");
class ReconnectionHealthPolicy extends BaseConnectionHealthPolicy_1.default {
    constructor(logger, configuration, data) {
        super(configuration, data);
        this.logger = logger;
        this.audioDelayPointsOverMaximum = 0;
        ReconnectionHealthPolicy.CONNECTION_UNHEALTHY_THRESHOLD =
            configuration.connectionUnhealthyThreshold;
        ReconnectionHealthPolicy.CONNECTION_WAIT_TIME_MS = configuration.connectionWaitTimeMs;
        ReconnectionHealthPolicy.MISSED_PONGS_THRESHOLD = configuration.missedPongsUpperThreshold;
        ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_MS = configuration.maximumAudioDelayMs;
        ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_DATA_POINTS =
            configuration.maximumAudioDelayDataPoints;
    }
    health() {
        const connectionStartedRecently = this.currentData.isConnectionStartRecent(ReconnectionHealthPolicy.CONNECTION_WAIT_TIME_MS);
        if (connectionStartedRecently) {
            return 1;
        }
        const noPacketsReceivedRecently = this.currentData.consecutiveStatsWithNoPackets >=
            ReconnectionHealthPolicy.CONNECTION_UNHEALTHY_THRESHOLD;
        const missedPongsRecently = this.currentData.consecutiveMissedPongs >= ReconnectionHealthPolicy.MISSED_PONGS_THRESHOLD;
        if (this.currentData.audioSpeakerDelayMs > ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_MS) {
            this.audioDelayPointsOverMaximum += 1;
        }
        else {
            this.audioDelayPointsOverMaximum = 0;
        }
        const hasBadAudioDelay = this.audioDelayPointsOverMaximum > ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_DATA_POINTS;
        if (hasBadAudioDelay) {
            this.audioDelayPointsOverMaximum = 0;
        }
        const needsReconnect = noPacketsReceivedRecently || missedPongsRecently || hasBadAudioDelay;
        if (needsReconnect) {
            this.logger.warn(`reconnection recommended due to: no packets received: ${noPacketsReceivedRecently}, missed pongs: ${missedPongsRecently}, bad audio delay: ${hasBadAudioDelay}`);
            return 0;
        }
        return 1;
    }
}
exports.default = ReconnectionHealthPolicy;
//# sourceMappingURL=ReconnectionHealthPolicy.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseConnectionHealthPolicy_1 = __webpack_require__(/*! ./BaseConnectionHealthPolicy */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/BaseConnectionHealthPolicy.js");
class UnusableAudioWarningConnectionHealthPolicy extends BaseConnectionHealthPolicy_1.default {
    constructor(configuration, data) {
        super(configuration, data);
        this.coolDownTimeMs = configuration.cooldownTimeMs;
        this.pastSamplesToConsider = configuration.pastSamplesToConsider;
        this.fractionalLoss = configuration.fractionalLoss;
        this.packetsExpected = configuration.packetsExpected;
        this.maximumTimesToWarn = configuration.maximumTimesToWarn;
        this.lastWarnTimestampMs = 0;
        this.warnCount = 0;
    }
    calculateFractionalLoss() {
        if (this.currentData.packetsReceivedInLastMinute.length < this.pastSamplesToConsider) {
            return 0;
        }
        const samplesToConsider = this.pastSamplesToConsider;
        const totalPacketsExpected = samplesToConsider * this.packetsExpected;
        let totalPacketsReceived = 0;
        for (let i = 0; i < samplesToConsider; i++) {
            totalPacketsReceived += this.currentData.packetsReceivedInLastMinute[i];
        }
        return Math.min(Math.max(1 - totalPacketsReceived / totalPacketsExpected, 0), 1);
    }
    health() {
        const warnedRecently = Date.now() - this.lastWarnTimestampMs < this.coolDownTimeMs;
        if (warnedRecently) {
            return this.currentHealth;
        }
        const hasHadHighPacketLoss = this.calculateFractionalLoss() >= this.fractionalLoss;
        if (hasHadHighPacketLoss) {
            if (this.currentHealth !== 0) {
                this.lastWarnTimestampMs = Date.now();
                this.warnCount++;
                if (this.warnCount > this.maximumTimesToWarn) {
                    return 1;
                }
            }
            return 0;
        }
        return 1;
    }
}
exports.default = UnusableAudioWarningConnectionHealthPolicy;
//# sourceMappingURL=UnusableAudioWarningConnectionHealthPolicy.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/connectionmonitor/SignalingAndMetricsConnectionMonitor.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/connectionmonitor/SignalingAndMetricsConnectionMonitor.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Maybe_1 = __webpack_require__(/*! ../maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
class SignalingAndMetricsConnectionMonitor {
    constructor(audioVideoController, realtimeController, videoTileController, connectionHealthData, pingPong, statsCollector) {
        this.audioVideoController = audioVideoController;
        this.realtimeController = realtimeController;
        this.videoTileController = videoTileController;
        this.connectionHealthData = connectionHealthData;
        this.pingPong = pingPong;
        this.statsCollector = statsCollector;
        this.isActive = false;
        this.hasSeenValidPacketMetricsBefore = false;
        this.lastAvailableSendBandwidthKbps = 0;
        this.lastAvailableRecvBandwidthKbps = 0;
        this.realtimeController.realtimeSubscribeToLocalSignalStrengthChange((signalStrength) => {
            if (this.isActive) {
                this.receiveSignalStrengthChange(signalStrength);
            }
        });
    }
    start() {
        this.isActive = true;
        this.pingPong.addObserver(this);
        this.pingPong.start();
        this.audioVideoController.addObserver(this);
    }
    stop() {
        this.isActive = false;
        this.pingPong.removeObserver(this);
        this.pingPong.stop();
        this.audioVideoController.removeObserver(this);
    }
    receiveSignalStrengthChange(signalStrength) {
        if (signalStrength === 0) {
            this.connectionHealthData.setLastNoSignalTimestampMs(Date.now());
        }
        else if (signalStrength <= 0.5) {
            this.connectionHealthData.setLastWeakSignalTimestampMs(Date.now());
        }
        else {
            this.connectionHealthData.setLastGoodSignalTimestampMs(Date.now());
        }
        this.updateConnectionHealth();
    }
    didReceivePong(_id, latencyMs, clockSkewMs) {
        this.connectionHealthData.setConsecutiveMissedPongs(0);
        this.statsCollector.logLatency('ping_pong', latencyMs);
        this.statsCollector.logLatency('ping_pong_clock_skew', clockSkewMs);
        this.updateConnectionHealth();
    }
    didMissPongs() {
        this.connectionHealthData.setConsecutiveMissedPongs(this.connectionHealthData.consecutiveMissedPongs + 1);
        this.updateConnectionHealth();
    }
    metricsDidReceive(clientMetricReport) {
        let packetsReceived = 0;
        let fractionPacketsLostInbound = 0;
        const metricReport = clientMetricReport.getObservableMetrics();
        const potentialPacketsReceived = metricReport.audioPacketsReceived;
        const potentialFractionPacketsLostInbound = metricReport.audioPacketsReceivedFractionLoss;
        let videoUpstreamBitrateKbps = 0;
        const videoUpstreamPacketPerSecond = metricReport.videoPacketSentPerSecond;
        const videoUpstreamBitrate = metricReport.videoUpstreamBitrate;
        const availableSendBandwidth = metricReport.availableSendBandwidth || metricReport.availableOutgoingBitrate;
        const availableRecvBandwidth = metricReport.availableReceiveBandwidth || metricReport.availableIncomingBitrate;
        const audioSpeakerDelayMs = metricReport.audioSpeakerDelayMs;
        const nackCountPerSecond = metricReport.nackCountReceivedPerSecond || metricReport.googNackCountReceivedPerSecond;
        // Firefox does not presently have aggregated bandwidth estimation
        if (typeof availableSendBandwidth === 'number' && !isNaN(availableSendBandwidth)) {
            this.updateAvailableSendBandwidth(availableSendBandwidth / 1000, nackCountPerSecond);
        }
        if (typeof availableRecvBandwidth === 'number' && !isNaN(availableRecvBandwidth)) {
            this.updateAvailableReceiveBandwidth(availableRecvBandwidth / 1000);
        }
        if (typeof videoUpstreamBitrate === 'number' && !isNaN(videoUpstreamBitrate)) {
            videoUpstreamBitrateKbps = videoUpstreamBitrate / 1000;
        }
        if (typeof audioSpeakerDelayMs === 'number' && !isNaN(audioSpeakerDelayMs)) {
            this.connectionHealthData.setAudioSpeakerDelayMs(audioSpeakerDelayMs);
        }
        this.monitorVideoUplinkHealth(videoUpstreamBitrateKbps, videoUpstreamPacketPerSecond);
        if (typeof potentialPacketsReceived === 'number' &&
            typeof potentialFractionPacketsLostInbound === 'number') {
            packetsReceived = potentialPacketsReceived;
            fractionPacketsLostInbound = potentialFractionPacketsLostInbound;
            if (packetsReceived < 0 || fractionPacketsLostInbound < 0) {
                // TODO: getting negative numbers on this metric after reconnect sometimes
                // For now, just skip the metric if it looks weird.
                return;
            }
        }
        else {
            return;
        }
        this.addToMinuteWindow(this.connectionHealthData.packetsReceivedInLastMinute, packetsReceived);
        this.addToMinuteWindow(this.connectionHealthData.fractionPacketsLostInboundInLastMinute, fractionPacketsLostInbound);
        if (packetsReceived > 0) {
            this.hasSeenValidPacketMetricsBefore = true;
            this.connectionHealthData.setConsecutiveStatsWithNoPackets(0);
        }
        else if (this.hasSeenValidPacketMetricsBefore) {
            this.connectionHealthData.setConsecutiveStatsWithNoPackets(this.connectionHealthData.consecutiveStatsWithNoPackets + 1);
        }
        if (packetsReceived === 0 || fractionPacketsLostInbound > 0) {
            this.connectionHealthData.setLastPacketLossInboundTimestampMs(Date.now());
        }
        this.updateConnectionHealth();
    }
    addToMinuteWindow(array, value) {
        array.unshift(value);
        if (array.length > 60) {
            array.pop();
        }
    }
    updateAvailableSendBandwidth(sendBandwidthKbps, nackCountPerSecond) {
        if (sendBandwidthKbps !== this.lastAvailableSendBandwidthKbps) {
            if (this.lastAvailableSendBandwidthKbps === 0) {
                this.lastAvailableSendBandwidthKbps = sendBandwidthKbps;
                return;
            }
            const prevSendBandwidthKbps = this.lastAvailableSendBandwidthKbps;
            this.lastAvailableSendBandwidthKbps = sendBandwidthKbps;
            this.audioVideoController.forEachObserver((observer) => {
                Maybe_1.default.of(observer.videoSendBandwidthDidChange).map(f => f.bind(observer)(sendBandwidthKbps, prevSendBandwidthKbps, nackCountPerSecond));
            });
        }
    }
    updateAvailableReceiveBandwidth(recvBandwidthKbps) {
        if (recvBandwidthKbps !== this.lastAvailableRecvBandwidthKbps) {
            if (this.lastAvailableRecvBandwidthKbps === 0) {
                this.lastAvailableRecvBandwidthKbps = recvBandwidthKbps;
                return;
            }
            const prevRecvBandwidthKbps = this.lastAvailableRecvBandwidthKbps;
            this.lastAvailableRecvBandwidthKbps = recvBandwidthKbps;
            this.audioVideoController.forEachObserver((observer) => {
                Maybe_1.default.of(observer.videoReceiveBandwidthDidChange).map(f => f.bind(observer)(recvBandwidthKbps, prevRecvBandwidthKbps));
            });
        }
    }
    updateConnectionHealth() {
        this.audioVideoController.forEachObserver((observer) => {
            Maybe_1.default.of(observer.connectionHealthDidChange).map(f => f.bind(observer)(this.connectionHealthData.clone()));
        });
    }
    monitorVideoUplinkHealth(videoUpstreamBitrateKbps, videoUpstreamPacketsPerSecond) {
        if (!this.videoTileController.hasStartedLocalVideoTile()) {
            return;
        }
        this.audioVideoController.forEachObserver((observer) => {
            Maybe_1.default.of(observer.videoSendHealthDidChange).map(f => f.bind(observer)(videoUpstreamBitrateKbps, videoUpstreamPacketsPerSecond));
        });
    }
}
exports.default = SignalingAndMetricsConnectionMonitor;
//# sourceMappingURL=SignalingAndMetricsConnectionMonitor.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/ContentShareConstants.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/ContentShareConstants.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ContentShareConstants;
(function (ContentShareConstants) {
    ContentShareConstants["Modality"] = "#content";
})(ContentShareConstants || (ContentShareConstants = {}));
exports.default = ContentShareConstants;
//# sourceMappingURL=ContentShareConstants.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/ContentShareMediaStreamBroker.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/ContentShareMediaStreamBroker.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
const DefaultDeviceController_1 = __webpack_require__(/*! ../devicecontroller/DefaultDeviceController */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/DefaultDeviceController.js");
class ContentShareMediaStreamBroker {
    constructor(logger) {
        this.logger = logger;
    }
    get mediaStream() {
        return this._mediaStream;
    }
    set mediaStream(mediaStream) {
        this._mediaStream = mediaStream;
    }
    acquireAudioInputStream() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._mediaStream.getAudioTracks().length === 0) {
                return DefaultDeviceController_1.default.synthesizeAudioDevice(0);
            }
            return this._mediaStream;
        });
    }
    acquireVideoInputStream() {
        return __awaiter(this, void 0, void 0, function* () {
            return this._mediaStream;
        });
    }
    releaseMediaStream(_mediaStreamToRelease) {
        this.logger.warn('release media stream called');
        return;
    }
    acquireDisplayInputStream(streamConstraints) {
        return __awaiter(this, void 0, void 0, function* () {
            if (streamConstraints &&
                streamConstraints.video &&
                // @ts-ignore
                streamConstraints.video.mandatory &&
                // @ts-ignore
                streamConstraints.video.mandatory.chromeMediaSource &&
                // @ts-ignore
                streamConstraints.video.mandatory.chromeMediaSourceId) {
                return navigator.mediaDevices.getUserMedia(streamConstraints);
            }
            // @ts-ignore https://github.com/microsoft/TypeScript/issues/31821
            return navigator.mediaDevices.getDisplayMedia(streamConstraints);
        });
    }
    bindToAudioVideoController(_audioVideoController) {
        throw new Error('unsupported');
    }
    acquireScreenCaptureDisplayInputStream(sourceId, frameRate) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.acquireDisplayInputStream(this.screenCaptureDisplayMediaConstraints(sourceId, frameRate));
        });
    }
    screenCaptureDisplayMediaConstraints(sourceId, frameRate) {
        return {
            audio: !sourceId && new DefaultBrowserBehavior_1.default().getDisplayMediaAudioCaptureSupport()
                ? true
                : false,
            video: Object.assign(Object.assign({}, (!sourceId && {
                frameRate: {
                    max: frameRate ? frameRate : ContentShareMediaStreamBroker.defaultFrameRate,
                },
            })), (sourceId && {
                mandatory: {
                    chromeMediaSource: 'desktop',
                    chromeMediaSourceId: sourceId,
                    maxFrameRate: frameRate ? frameRate : ContentShareMediaStreamBroker.defaultFrameRate,
                },
            })),
        };
    }
    toggleMediaStream(enable) {
        let changed = false;
        if (this.mediaStream) {
            for (let i = 0; i < this.mediaStream.getTracks().length; i++) {
                if (this.mediaStream.getTracks()[i].enabled !== enable) {
                    this.mediaStream.getTracks()[i].enabled = enable;
                    changed = true;
                }
            }
        }
        return changed;
    }
    cleanup() {
        if (this.mediaStream) {
            for (let i = 0; i < this.mediaStream.getTracks().length; i++) {
                this.mediaStream.getTracks()[i].stop();
            }
        }
        this.mediaStream = null;
    }
}
exports.default = ContentShareMediaStreamBroker;
ContentShareMediaStreamBroker.defaultFrameRate = 15;
//# sourceMappingURL=ContentShareMediaStreamBroker.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/DefaultContentShareController.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/DefaultContentShareController.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Maybe_1 = __webpack_require__(/*! ../maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
const MeetingSessionConfiguration_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionConfiguration */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionConfiguration.js");
const MeetingSessionCredentials_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionCredentials */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionCredentials.js");
const DefaultModality_1 = __webpack_require__(/*! ../modality/DefaultModality */ "./node_modules/amazon-chime-sdk-js/build/modality/DefaultModality.js");
const AsyncScheduler_1 = __webpack_require__(/*! ../scheduler/AsyncScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js");
const ContentShareConstants_1 = __webpack_require__(/*! ./ContentShareConstants */ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/ContentShareConstants.js");
class DefaultContentShareController {
    constructor(mediaStreamBroker, contentAudioVideo, attendeeAudioVideo) {
        this.mediaStreamBroker = mediaStreamBroker;
        this.contentAudioVideo = contentAudioVideo;
        this.attendeeAudioVideo = attendeeAudioVideo;
        this.observerQueue = new Set();
        this.contentAudioVideo.addObserver(this);
        this.setupContentShareEvents();
    }
    static createContentShareMeetingSessionConfigure(configuration) {
        const contentShareConfiguration = new MeetingSessionConfiguration_1.default();
        contentShareConfiguration.meetingId = configuration.meetingId;
        contentShareConfiguration.externalMeetingId = configuration.externalMeetingId;
        contentShareConfiguration.urls = configuration.urls;
        contentShareConfiguration.credentials = new MeetingSessionCredentials_1.default();
        contentShareConfiguration.credentials.attendeeId =
            configuration.credentials.attendeeId + ContentShareConstants_1.default.Modality;
        contentShareConfiguration.credentials.externalUserId = configuration.credentials.externalUserId;
        contentShareConfiguration.credentials.joinToken =
            configuration.credentials.joinToken + ContentShareConstants_1.default.Modality;
        return contentShareConfiguration;
    }
    setContentAudioProfile(audioProfile) {
        this.contentAudioVideo.setAudioProfile(audioProfile);
    }
    startContentShare(stream) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!stream) {
                return;
            }
            this.mediaStreamBroker.mediaStream = stream;
            for (let i = 0; i < this.mediaStreamBroker.mediaStream.getTracks().length; i++) {
                this.mediaStreamBroker.mediaStream.getTracks()[i].addEventListener('ended', () => {
                    this.stopContentShare();
                });
            }
            this.contentAudioVideo.start();
            if (this.mediaStreamBroker.mediaStream.getVideoTracks().length > 0) {
                this.contentAudioVideo.videoTileController.startLocalVideoTile();
            }
        });
    }
    startContentShareFromScreenCapture(sourceId, frameRate) {
        return __awaiter(this, void 0, void 0, function* () {
            const mediaStream = yield this.mediaStreamBroker.acquireScreenCaptureDisplayInputStream(sourceId, frameRate);
            yield this.startContentShare(mediaStream);
            return mediaStream;
        });
    }
    pauseContentShare() {
        if (this.mediaStreamBroker.toggleMediaStream(false)) {
            this.forEachContentShareObserver(observer => {
                Maybe_1.default.of(observer.contentShareDidPause).map(f => f.bind(observer)());
            });
        }
    }
    unpauseContentShare() {
        if (this.mediaStreamBroker.toggleMediaStream(true)) {
            this.forEachContentShareObserver(observer => {
                Maybe_1.default.of(observer.contentShareDidUnpause).map(f => f.bind(observer)());
            });
        }
    }
    stopContentShare() {
        this.contentAudioVideo.stop();
        this.mediaStreamBroker.cleanup();
    }
    addContentShareObserver(observer) {
        this.observerQueue.add(observer);
    }
    removeContentShareObserver(observer) {
        this.observerQueue.delete(observer);
    }
    forEachContentShareObserver(observerFunc) {
        for (const observer of this.observerQueue) {
            new AsyncScheduler_1.default().start(() => {
                if (this.observerQueue.has(observer)) {
                    observerFunc(observer);
                }
            });
        }
    }
    audioVideoDidStop(_sessionStatus) {
        // If the content attendee got dropped or could not connect, stopContentShare will not be called
        // so make sure to clean up the media stream.
        this.mediaStreamBroker.cleanup();
        if (this.contentShareTile) {
            this.attendeeAudioVideo.videoTileController.removeVideoTile(this.contentShareTile.id());
            this.contentShareTile = null;
        }
        this.forEachContentShareObserver(observer => {
            Maybe_1.default.of(observer.contentShareDidStop).map(f => f.bind(observer)());
        });
    }
    setupContentShareEvents() {
        // We use realtimeSubscribeToAttendeeIdPresence instead of audioVideoDidStart because audioVideoDidStart fires
        // before the capacity check in Tincan while when realtimeSubscribeToAttendeeIdPresence fires, we know the
        // content attendee has been able to pass the capacity check and join the call so we can start the local
        // content share video
        this.attendeeAudioVideo.realtimeController.realtimeSubscribeToAttendeeIdPresence((attendeeId, present, _externalUserId, _dropped) => {
            const isContentAttendee = new DefaultModality_1.default(attendeeId).hasModality(DefaultModality_1.default.MODALITY_CONTENT);
            const isSelfAttendee = new DefaultModality_1.default(attendeeId).base() ===
                this.attendeeAudioVideo.configuration.credentials.attendeeId;
            if (!isContentAttendee || !isSelfAttendee || !present || this.contentShareTile) {
                return;
            }
            const stream = this.mediaStreamBroker.mediaStream;
            if (stream.getVideoTracks().length > 0) {
                this.contentShareTile = this.attendeeAudioVideo.videoTileController.addVideoTile();
                const track = stream.getVideoTracks()[0];
                let width, height;
                if (track.getSettings) {
                    const cap = track.getSettings();
                    width = cap.width;
                    height = cap.height;
                }
                else {
                    const cap = track.getCapabilities();
                    width = cap.width;
                    height = cap.height;
                }
                this.contentShareTile.bindVideoStream(this.contentAudioVideo.configuration.credentials.attendeeId, false, stream, width, height, null, this.contentAudioVideo.configuration.credentials.externalUserId);
            }
            this.forEachContentShareObserver(observer => {
                Maybe_1.default.of(observer.contentShareDidStart).map(f => f.bind(observer)());
            });
        });
    }
}
exports.default = DefaultContentShareController;
//# sourceMappingURL=DefaultContentShareController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/datamessage/DataMessage.js":
/*!***************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/datamessage/DataMessage.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/* eslint @typescript-eslint/no-explicit-any: 0 */
class DataMessage {
    constructor(timestampMs, topic, data, senderAttendeeId, senderExternalUserId, throttled) {
        this.timestampMs = timestampMs;
        this.topic = topic;
        this.data = data;
        this.senderAttendeeId = senderAttendeeId;
        this.senderExternalUserId = senderExternalUserId;
        this.throttled = !!throttled;
    }
    /**
     * Helper conversion methods to convert Uint8Array data to string
     */
    text() {
        return new TextDecoder().decode(this.data);
    }
    /**
     * Helper conversion methods to convert Uint8Array data to JSON
     */
    json() {
        return JSON.parse(new TextDecoder().decode(this.data));
    }
}
exports.default = DataMessage;
//# sourceMappingURL=DataMessage.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/AudioTransformDevice.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/AudioTransformDevice.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isAudioTransformDevice = void 0;
/**
 * `isAudioTransformDevice` is a type guard for {@link AudioTransformDevice}.
 *
 * @param device the value to check.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types
function isAudioTransformDevice(device) {
    return (!!device &&
        typeof device === 'object' &&
        'mute' in device &&
        'stop' in device &&
        'intrinsicDevice' in device);
}
exports.isAudioTransformDevice = isAudioTransformDevice;
//# sourceMappingURL=AudioTransformDevice.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/DefaultDeviceController.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/DefaultDeviceController.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
const Maybe_1 = __webpack_require__(/*! ../maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
const DefaultMediaDeviceFactory_1 = __webpack_require__(/*! ../mediadevicefactory/DefaultMediaDeviceFactory */ "./node_modules/amazon-chime-sdk-js/build/mediadevicefactory/DefaultMediaDeviceFactory.js");
const AsyncScheduler_1 = __webpack_require__(/*! ../scheduler/AsyncScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js");
const IntervalScheduler_1 = __webpack_require__(/*! ../scheduler/IntervalScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/IntervalScheduler.js");
const DefaultVideoTile_1 = __webpack_require__(/*! ../videotile/DefaultVideoTile */ "./node_modules/amazon-chime-sdk-js/build/videotile/DefaultVideoTile.js");
const AudioTransformDevice_1 = __webpack_require__(/*! ./AudioTransformDevice */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/AudioTransformDevice.js");
const DeviceSelection_1 = __webpack_require__(/*! ./DeviceSelection */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/DeviceSelection.js");
const GetUserMediaError_1 = __webpack_require__(/*! ./GetUserMediaError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/GetUserMediaError.js");
const NotFoundError_1 = __webpack_require__(/*! ./NotFoundError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/NotFoundError.js");
const NotReadableError_1 = __webpack_require__(/*! ./NotReadableError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/NotReadableError.js");
const OverconstrainedError_1 = __webpack_require__(/*! ./OverconstrainedError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/OverconstrainedError.js");
const PermissionDeniedError_1 = __webpack_require__(/*! ./PermissionDeniedError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/PermissionDeniedError.js");
const TypeError_1 = __webpack_require__(/*! ./TypeError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/TypeError.js");
const VideoQualitySettings_1 = __webpack_require__(/*! ./VideoQualitySettings */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/VideoQualitySettings.js");
const VideoTransformDevice_1 = __webpack_require__(/*! ./VideoTransformDevice */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/VideoTransformDevice.js");
class DefaultDeviceController {
    constructor(logger, options) {
        this.logger = logger;
        this.deviceInfoCache = null;
        this.activeDevices = { audio: null, video: null };
        // `chosenVideoTransformDevice` is tracked and owned by device controller.
        // It is saved when `chooseVideoInputDevice` is called with VideoTransformDevice object.
        this.chosenVideoTransformDevice = null;
        this.audioOutputDeviceId = null;
        this.deviceChangeObservers = new Set();
        this.deviceLabelTrigger = () => {
            return navigator.mediaDevices.getUserMedia({ audio: true, video: true });
        };
        this.audioInputDestinationNode = null;
        this.audioInputSourceNode = null;
        this.videoInputQualitySettings = null;
        this.useWebAudio = false;
        this.inputDeviceCount = 0;
        this.browserBehavior = new DefaultBrowserBehavior_1.default();
        this.alreadyHandlingDeviceChange = false;
        const { enableWebAudio = false } = options || {};
        this.useWebAudio = enableWebAudio;
        this.muteCallback = (muted) => {
            var _a;
            (_a = this.transform) === null || _a === void 0 ? void 0 : _a.device.mute(muted);
        };
        this.videoInputQualitySettings = new VideoQualitySettings_1.default(DefaultDeviceController.defaultVideoWidth, DefaultDeviceController.defaultVideoHeight, DefaultDeviceController.defaultVideoFrameRate, DefaultDeviceController.defaultVideoMaxBandwidthKbps);
        const dimension = this.browserBehavior.requiresResolutionAlignment(this.videoInputQualitySettings.videoWidth, this.videoInputQualitySettings.videoHeight);
        this.videoInputQualitySettings.videoWidth = dimension[0];
        this.videoInputQualitySettings.videoHeight = dimension[1];
        this.logger.info(`DefaultDeviceController video dimension ${this.videoInputQualitySettings.videoWidth} x ${this.videoInputQualitySettings.videoHeight}`);
        try {
            const mediaDeviceWrapper = new DefaultMediaDeviceFactory_1.default().create();
            mediaDeviceWrapper.addEventListener('devicechange', () => {
                this.handleDeviceChange();
            });
            const supportedConstraints = navigator.mediaDevices.getSupportedConstraints();
            this.logger.info(`Supported Constraints in this browser ${JSON.stringify(supportedConstraints)}`);
        }
        catch (error) {
            logger.error(error.message);
        }
    }
    listAudioInputDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.listDevicesOfKind('audioinput');
            this.trace('listAudioInputDevices', null, result);
            return result;
        });
    }
    listVideoInputDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.listDevicesOfKind('videoinput');
            this.trace('listVideoInputDevices', null, result);
            return result;
        });
    }
    listAudioOutputDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.listDevicesOfKind('audiooutput');
            this.trace('listAudioOutputDevices', null, result);
            return result;
        });
    }
    pushAudioMeetingStateForPermissions(device) {
        var _a, _b;
        (_b = (_a = this.boundAudioVideoController) === null || _a === void 0 ? void 0 : _a.eventController) === null || _b === void 0 ? void 0 : _b.publishEvent(device === null ? 'audioInputUnselected' : 'audioInputSelected');
    }
    pushVideoMeetingStateForPermissions(device) {
        var _a, _b;
        (_b = (_a = this.boundAudioVideoController) === null || _a === void 0 ? void 0 : _a.eventController) === null || _b === void 0 ? void 0 : _b.publishEvent(device === null ? 'videoInputUnselected' : 'videoInputSelected');
    }
    chooseAudioInputDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
            if (device === undefined) {
                this.logger.error('Audio input device cannot be undefined');
                return;
            }
            if (AudioTransformDevice_1.isAudioTransformDevice(device)) {
                // N.B., do not JSON.stringify here — for some kinds of devices this
                // will cause a cyclic object reference error.
                this.logger.info(`Choosing transform input device ${device}`);
                yield this.chooseAudioTransformInputDevice(device);
                return this.pushAudioMeetingStateForPermissions(device);
            }
            this.removeTransform();
            yield this.chooseInputIntrinsicDevice('audio', device, false);
            this.trace('chooseAudioInputDevice', device, `success`);
            this.pushAudioMeetingStateForPermissions(device);
        });
    }
    chooseAudioTransformInputDevice(device) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (((_a = this.transform) === null || _a === void 0 ? void 0 : _a.device) === device) {
                return;
            }
            if (!this.useWebAudio) {
                throw new Error('Cannot apply transform device without enabling Web Audio.');
            }
            const context = DefaultDeviceController.getAudioContext();
            if (context instanceof OfflineAudioContext) {
                // Nothing to do.
            }
            else {
                switch (context.state) {
                    case 'running':
                        // Nothing to do.
                        break;
                    case 'closed':
                        // A closed context cannot be used for creating nodes, so the correct
                        // thing to do is to raise a descriptive error sooner.
                        throw new Error('Cannot choose a transform device with a closed audio context.');
                    case 'suspended':
                        // A context might be suspended after page load. We try to resume it
                        // here, otherwise audio won't work.
                        yield context.resume();
                }
            }
            let nodes;
            try {
                nodes = yield device.createAudioNode(context);
            }
            catch (e) {
                this.logger.error(`Unable to create transform device node: ${e}.`);
                throw e;
            }
            // Pick the plain ol' inner device as the source. It will be
            // connected to the node.
            const inner = yield device.intrinsicDevice();
            yield this.chooseInputIntrinsicDevice('audio', inner, false);
            this.logger.debug(`Got inner stream: ${inner}.`);
            // Otherwise, continue: hook up the new node.
            this.setTransform(device, nodes);
        });
    }
    chooseVideoTransformInputDevice(device) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (device === this.chosenVideoTransformDevice) {
                this.logger.info('Reselecting same VideoTransformDevice');
                return;
            }
            const prevVideoTransformDevice = this.chosenVideoTransformDevice;
            if (prevVideoTransformDevice) {
                this.logger.info('Switched from previous VideoTransformDevice');
            }
            const wasUsingTransformDevice = !!prevVideoTransformDevice;
            const inner = yield device.intrinsicDevice();
            const canReuseMediaStream = this.isMediaStreamReusableByDeviceId((_a = this.activeDevices['video']) === null || _a === void 0 ? void 0 : _a.stream, inner);
            if (!canReuseMediaStream) {
                this.logger.info('video transform device needs new intrinsic device');
                if (wasUsingTransformDevice) {
                    // detach input media stream - turn off the camera or leave it be if inner is media stream
                    prevVideoTransformDevice.onOutputStreamDisconnect();
                }
                this.chosenVideoTransformDevice = device;
                // VideoTransformDevice owns input MediaStream
                this.activeDevices['video'] = null;
                yield this.chooseInputIntrinsicDevice('video', inner, false, true);
                return;
            }
            // When saved stream is reusable, only switch the saved stream to filtered stream for sending
            // but keep the saved stream intact.
            // Note: to keep the chosen media stream intact, it is important to avoid a full stop
            // because videoTileUpdate can be called when video is stopped and user might call `bindVideoElement` to disconnect the element.
            // In current implementation, disconnecting the element will `hard` stop the media stream.
            // Update device and stream
            this.chosenVideoTransformDevice = device;
            const newMediaStream = this.activeDevices['video'].stream;
            this.logger.info('video transform device uses previous stream');
            // Input is not a MediaStream. Update constraints
            if (!inner.id) {
                const constraint = inner;
                constraint.width = constraint.width || this.videoInputQualitySettings.videoWidth;
                constraint.height = constraint.height || this.videoInputQualitySettings.videoHeight;
                constraint.frameRate = constraint.frameRate || this.videoInputQualitySettings.videoFrameRate;
                yield newMediaStream.getVideoTracks()[0].applyConstraints(constraint);
            }
            // `transformStream` will start processing.
            yield device.transformStream(this.activeDevices['video'].stream);
            // Replace video to send
            if ((_b = this.boundAudioVideoController) === null || _b === void 0 ? void 0 : _b.videoTileController.hasStartedLocalVideoTile()) {
                // optimized method exists, a negotiation can be avoided
                if (this.boundAudioVideoController.replaceLocalVideo) {
                    this.restartLocalVideoAfterSelection(null, false, true);
                }
                else {
                    // non-optimized path, a negotiation is coming
                    yield this.boundAudioVideoController.update();
                }
            }
        });
    }
    chooseVideoInputDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
            if (device === undefined) {
                this.logger.error('Video input device cannot be undefined');
                return;
            }
            if (VideoTransformDevice_1.isVideoTransformDevice(device)) {
                this.logger.info(`Choosing video transform device ${device}`);
                return this.chooseVideoTransformInputDevice(device);
            }
            this.updateMaxBandwidthKbps();
            // handle direct switching from VideoTransformDevice to Device
            // From WebRTC point, it is a device switching.
            if (this.chosenVideoInputIsTransformDevice()) {
                // disconnect old stream
                this.chosenVideoTransformDevice.onOutputStreamDisconnect();
                this.chosenVideoTransformDevice = null;
            }
            yield this.chooseInputIntrinsicDevice('video', device, false);
            this.trace('chooseVideoInputDevice', device);
            this.pushVideoMeetingStateForPermissions(device);
        });
    }
    chooseAudioOutputDevice(deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.audioOutputDeviceId = deviceId;
            yield this.bindAudioOutput();
            this.trace('chooseAudioOutputDevice', deviceId, null);
            return;
        });
    }
    addDeviceChangeObserver(observer) {
        this.logger.info('adding device change observer');
        this.deviceChangeObservers.add(observer);
        this.trace('addDeviceChangeObserver');
    }
    removeDeviceChangeObserver(observer) {
        this.logger.info('removing device change observer');
        this.deviceChangeObservers.delete(observer);
        this.trace('removeDeviceChangeObserver');
    }
    createAnalyserNodeForAudioInput() {
        var _a, _b;
        if (!this.activeDevices['audio']) {
            return null;
        }
        // If there is a WebAudio node in the graph, we use that as the source instead of the stream.
        const node = (_b = (_a = this.transform) === null || _a === void 0 ? void 0 : _a.nodes) === null || _b === void 0 ? void 0 : _b.end;
        if (node) {
            const analyser = node.context.createAnalyser();
            analyser.removeOriginalInputs = () => {
                try {
                    node.disconnect(analyser);
                }
                catch (e) {
                    // This can fail in some unusual cases, but this is best-effort.
                }
            };
            node.connect(analyser);
            return analyser;
        }
        return this.createAnalyserNodeForRawAudioInput();
    }
    //
    // N.B., this bypasses any applied transform node.
    //
    createAnalyserNodeForRawAudioInput() {
        if (!this.activeDevices['audio']) {
            return null;
        }
        return this.createAnalyserNodeForStream(this.activeDevices['audio'].stream);
    }
    createAnalyserNodeForStream(stream) {
        const audioContext = DefaultDeviceController.getAudioContext();
        const analyser = audioContext.createAnalyser();
        const source = audioContext.createMediaStreamSource(stream);
        source.connect(analyser);
        this.trace('createAnalyserNodeForAudioInput');
        analyser.removeOriginalInputs = () => {
            try {
                source.disconnect(analyser);
            }
            catch (e) {
                // This can fail in some unusual cases, but this is best-effort.
            }
        };
        return analyser;
    }
    startVideoPreviewForVideoInput(element) {
        if (!this.activeDevices['video']) {
            this.logger.warn('cannot bind video preview since video input device has not been chosen');
            this.trace('startVideoPreviewForVideoInput', element.id);
            return;
        }
        // TODO: implement MediaDestroyer to provide single release MediaStream function
        this.releaseMediaStream(element.srcObject);
        DefaultVideoTile_1.default.disconnectVideoStreamFromVideoElement(element, false);
        navigator.mediaDevices
            .getUserMedia(this.activeDevices['video'].constraints)
            .then(previewStream => {
            DefaultVideoTile_1.default.connectVideoStreamToVideoElement(previewStream, element, true);
        })
            .catch(error => {
            this.logger.warn(`Unable to reacquire video stream for preview to element ${element.id}: ${error}`);
        });
        this.trace('startVideoPreviewForVideoInput', element.id);
    }
    stopVideoPreviewForVideoInput(element) {
        const stream = element.srcObject;
        if (stream) {
            this.releaseMediaStream(stream);
            DefaultVideoTile_1.default.disconnectVideoStreamFromVideoElement(element, false);
        }
        if (this.activeDevices['video']) {
            this.releaseMediaStream(this.activeDevices['video'].stream);
        }
        this.trace('stopVideoPreviewForVideoInput', element.id);
    }
    setDeviceLabelTrigger(trigger) {
        this.deviceLabelTrigger = trigger;
        this.trace('setDeviceLabelTrigger');
    }
    mixIntoAudioInput(stream) {
        let node = null;
        if (this.useWebAudio) {
            node = DefaultDeviceController.getAudioContext().createMediaStreamSource(stream);
            node.connect(this.getMediaStreamOutputNode());
        }
        else {
            this.logger.warn('WebAudio is not enabled, mixIntoAudioInput will not work');
        }
        this.trace('mixIntoAudioInput', stream.id);
        return node;
    }
    chooseVideoInputQuality(width, height, frameRate, maxBandwidthKbps) {
        const dimension = this.browserBehavior.requiresResolutionAlignment(width, height);
        this.videoInputQualitySettings = new VideoQualitySettings_1.default(dimension[0], dimension[1], frameRate, maxBandwidthKbps);
        this.updateMaxBandwidthKbps();
    }
    getVideoInputQualitySettings() {
        return this.videoInputQualitySettings;
    }
    acquireAudioInputStream() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.acquireInputStream('audio');
        });
    }
    acquireVideoInputStream() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.acquireInputStream('video');
        });
    }
    acquireDisplayInputStream(streamConstraints) {
        return __awaiter(this, void 0, void 0, function* () {
            if (streamConstraints &&
                streamConstraints.video &&
                // @ts-ignore
                streamConstraints.video.mandatory &&
                // @ts-ignore
                streamConstraints.video.mandatory.chromeMediaSource &&
                // @ts-ignore
                streamConstraints.video.mandatory.chromeMediaSourceId) {
                return navigator.mediaDevices.getUserMedia(streamConstraints);
            }
            // @ts-ignore https://github.com/microsoft/TypeScript/issues/31821
            return navigator.mediaDevices.getDisplayMedia(streamConstraints);
        });
    }
    releaseMediaStream(mediaStreamToRelease) {
        var _a;
        if (!mediaStreamToRelease) {
            return;
        }
        let tracksToStop = null;
        if (!!this.audioInputDestinationNode &&
            mediaStreamToRelease === this.audioInputDestinationNode.stream) {
            // release the true audio stream if WebAudio is used.
            this.logger.info('stopping audio track');
            tracksToStop = this.audioInputSourceNode.mediaStream.getTracks();
            this.audioInputSourceNode.disconnect();
        }
        else {
            tracksToStop = mediaStreamToRelease.getTracks();
        }
        // similar to WebAudio's stream, we need to release the actual input stream to really stop it.
        // looks like switching VideoTransformDevice, the original device is closed because oldStream is the actual stream
        if (mediaStreamToRelease === ((_a = this.chosenVideoTransformDevice) === null || _a === void 0 ? void 0 : _a.outputMediaStream)) {
            this.chosenVideoTransformDevice.onOutputStreamDisconnect();
            this.chosenVideoTransformDevice = null;
            tracksToStop = [];
        }
        for (const track of tracksToStop) {
            this.logger.info(`stopping ${track.kind} track`);
            track.stop();
        }
        for (const kind in this.activeDevices) {
            if (this.activeDevices[kind] && this.activeDevices[kind].stream === mediaStreamToRelease) {
                this.activeDevices[kind] = null;
                if (kind === 'video' &&
                    this.boundAudioVideoController &&
                    this.boundAudioVideoController.videoTileController.hasStartedLocalVideoTile()) {
                    this.boundAudioVideoController.videoTileController.stopLocalVideoTile();
                }
            }
        }
    }
    chosenVideoInputIsTransformDevice() {
        return !!this.chosenVideoTransformDevice;
    }
    bindToAudioVideoController(audioVideoController) {
        if (this.boundAudioVideoController) {
            this.unsubscribeFromMuteAndUnmuteLocalAudio();
        }
        this.boundAudioVideoController = audioVideoController;
        this.subscribeToMuteAndUnmuteLocalAudio();
        if (this.browserBehavior.supportsSetSinkId()) {
            new AsyncScheduler_1.default().start(() => {
                this.bindAudioOutput();
            });
        }
    }
    subscribeToMuteAndUnmuteLocalAudio() {
        if (!this.boundAudioVideoController) {
            return;
        }
        // Safety that's hard to test.
        /* istanbul ignore next */
        if (!this.boundAudioVideoController.realtimeController) {
            return;
        }
        this.boundAudioVideoController.realtimeController.realtimeSubscribeToMuteAndUnmuteLocalAudio(this.muteCallback);
    }
    unsubscribeFromMuteAndUnmuteLocalAudio() {
        // Safety that's hard to test.
        /* istanbul ignore next */
        if (!this.boundAudioVideoController.realtimeController) {
            return;
        }
        this.boundAudioVideoController.realtimeController.realtimeUnsubscribeToMuteAndUnmuteLocalAudio(this.muteCallback);
    }
    static createEmptyAudioDevice() {
        return DefaultDeviceController.synthesizeAudioDevice(0);
    }
    static createEmptyVideoDevice() {
        return DefaultDeviceController.synthesizeVideoDevice('black');
    }
    static synthesizeAudioDevice(toneHz) {
        const audioContext = DefaultDeviceController.getAudioContext();
        const outputNode = audioContext.createMediaStreamDestination();
        if (!toneHz) {
            const source = audioContext.createBufferSource();
            // The AudioContext object uses the sample rate of the default output device
            // if not specified. Creating an AudioBuffer object with the output device's
            // sample rate fails in some browsers, e.g. Safari with a Bluetooth headphone.
            try {
                source.buffer = audioContext.createBuffer(1, audioContext.sampleRate * 5, audioContext.sampleRate);
            }
            catch (error) {
                if (error && error.name === 'NotSupportedError') {
                    source.buffer = audioContext.createBuffer(1, DefaultDeviceController.defaultSampleRate * 5, DefaultDeviceController.defaultSampleRate);
                }
                else {
                    throw error;
                }
            }
            // Some browsers will not play audio out the MediaStreamDestination
            // unless there is actually audio to play, so we add a small amount of
            // noise here to ensure that audio is played out.
            source.buffer.getChannelData(0)[0] = 0.0003;
            source.loop = true;
            source.connect(outputNode);
            source.start();
        }
        else {
            const gainNode = audioContext.createGain();
            gainNode.gain.value = 0.1;
            gainNode.connect(outputNode);
            const oscillatorNode = audioContext.createOscillator();
            oscillatorNode.frequency.value = toneHz;
            oscillatorNode.connect(gainNode);
            oscillatorNode.start();
        }
        return outputNode.stream;
    }
    static synthesizeVideoDevice(colorOrPattern) {
        const canvas = document.createElement('canvas');
        canvas.width = 480;
        canvas.height = (canvas.width / 16) * 9;
        const scheduler = new IntervalScheduler_1.default(1000);
        const context = canvas.getContext('2d');
        // @ts-ignore
        const stream = canvas.captureStream(5) || null;
        if (stream) {
            scheduler.start(() => {
                if (colorOrPattern === 'smpte') {
                    DefaultDeviceController.fillSMPTEColorBars(canvas, 0);
                }
                else {
                    context.fillStyle = colorOrPattern;
                    context.fillRect(0, 0, canvas.width, canvas.height);
                }
            });
            stream.getVideoTracks()[0].addEventListener('ended', () => {
                scheduler.stop();
            });
        }
        return stream;
    }
    static fillSMPTEColorBars(canvas, xShift) {
        const w = canvas.width;
        const h = canvas.height;
        const h1 = (h * 2) / 3;
        const h2 = (h * 3) / 4;
        const h3 = h;
        const top = ['#c0c0c0', '#c0c000', '#00c0c0', '#00c000', '#c000c0', '#c00000', '#0000c0'];
        const middle = ['#0000c0', '#000000', '#c000c0', '#000000', '#00c0c0', '#000000', '#c0c0c0'];
        const bottom = [
            '#00214c',
            '#ffffff',
            '#32006a',
            '#131313',
            '#090909',
            '#131313',
            '#1d1d1d',
            '#131313',
        ];
        const bottomX = [
            w * 0,
            ((w * 1) / 4) * (5 / 7),
            ((w * 2) / 4) * (5 / 7),
            ((w * 3) / 4) * (5 / 7),
            w * (5 / 7),
            w * (5 / 7 + 1 / 21),
            w * (5 / 7 + 2 / 21),
            w * (6 / 7),
            w * 1,
        ];
        const segmentWidth = w / top.length;
        const ctx = canvas.getContext('2d');
        for (let i = 0; i < top.length; i++) {
            ctx.fillStyle = top[i];
            ctx.fillRect(xShift + i * segmentWidth, 0, segmentWidth, h1);
            ctx.fillStyle = middle[i];
            ctx.fillRect(xShift + i * segmentWidth, h1, segmentWidth, h2 - h1);
        }
        for (let i = 0; i < bottom.length; i++) {
            ctx.fillStyle = bottom[i];
            ctx.fillRect(xShift + bottomX[i], h2, bottomX[i + 1] - bottomX[i], h3 - h2);
        }
    }
    updateMaxBandwidthKbps() {
        if (this.boundAudioVideoController) {
            this.boundAudioVideoController.setVideoMaxBandwidthKbps(this.videoInputQualitySettings.videoMaxBandwidthKbps);
        }
    }
    listDevicesOfKind(deviceKind) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.deviceInfoCache === null) {
                yield this.updateDeviceInfoCacheFromBrowser();
            }
            return this.listCachedDevicesOfKind(deviceKind);
        });
    }
    updateDeviceInfoCacheFromBrowser() {
        return __awaiter(this, void 0, void 0, function* () {
            const doesNotHaveAccessToMediaDevices = typeof MediaDeviceInfo === 'undefined';
            if (doesNotHaveAccessToMediaDevices) {
                this.deviceInfoCache = [];
                return;
            }
            let devices = yield navigator.mediaDevices.enumerateDevices();
            let hasDeviceLabels = true;
            for (const device of devices) {
                if (!device.label) {
                    hasDeviceLabels = false;
                    break;
                }
            }
            if (!hasDeviceLabels) {
                try {
                    this.logger.info('attempting to trigger media device labels since they are hidden');
                    const triggerStream = yield this.deviceLabelTrigger();
                    devices = yield navigator.mediaDevices.enumerateDevices();
                    for (const track of triggerStream.getTracks()) {
                        track.stop();
                    }
                }
                catch (err) {
                    this.logger.info('unable to get media device labels');
                }
            }
            this.deviceInfoCache = devices;
        });
    }
    listCachedDevicesOfKind(deviceKind) {
        const devicesOfKind = [];
        for (const device of this.deviceInfoCache) {
            if (device.kind === deviceKind) {
                devicesOfKind.push(device);
            }
        }
        return devicesOfKind;
    }
    handleDeviceChange() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.deviceInfoCache === null) {
                return;
            }
            if (this.alreadyHandlingDeviceChange) {
                new AsyncScheduler_1.default().start(() => {
                    this.handleDeviceChange();
                });
                return;
            }
            this.alreadyHandlingDeviceChange = true;
            const oldAudioInputDevices = this.listCachedDevicesOfKind('audioinput');
            const oldVideoInputDevices = this.listCachedDevicesOfKind('videoinput');
            const oldAudioOutputDevices = this.listCachedDevicesOfKind('audiooutput');
            yield this.updateDeviceInfoCacheFromBrowser();
            const newAudioInputDevices = this.listCachedDevicesOfKind('audioinput');
            const newVideoInputDevices = this.listCachedDevicesOfKind('videoinput');
            const newAudioOutputDevices = this.listCachedDevicesOfKind('audiooutput');
            this.forEachObserver((observer) => {
                if (!this.areDeviceListsEqual(oldAudioInputDevices, newAudioInputDevices)) {
                    Maybe_1.default.of(observer.audioInputsChanged).map(f => f.bind(observer)(newAudioInputDevices));
                }
                if (!this.areDeviceListsEqual(oldVideoInputDevices, newVideoInputDevices)) {
                    Maybe_1.default.of(observer.videoInputsChanged).map(f => f.bind(observer)(newVideoInputDevices));
                }
                if (!this.areDeviceListsEqual(oldAudioOutputDevices, newAudioOutputDevices)) {
                    Maybe_1.default.of(observer.audioOutputsChanged).map(f => f.bind(observer)(newAudioOutputDevices));
                }
            });
            this.alreadyHandlingDeviceChange = false;
        });
    }
    handleDeviceStreamEnded(kind, deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.chooseInputIntrinsicDevice(kind, null, false);
            if (kind === 'audio') {
                this.forEachObserver((observer) => {
                    Maybe_1.default.of(observer.audioInputStreamEnded).map(f => f.bind(observer)(deviceId));
                });
            }
            else {
                this.forEachObserver((observer) => {
                    Maybe_1.default.of(observer.videoInputStreamEnded).map(f => f.bind(observer)(deviceId));
                });
            }
        });
    }
    forEachObserver(observerFunc) {
        for (const observer of this.deviceChangeObservers) {
            new AsyncScheduler_1.default().start(() => {
                /* istanbul ignore else */
                if (this.deviceChangeObservers.has(observer)) {
                    observerFunc(observer);
                }
            });
        }
    }
    areDeviceListsEqual(a, b) {
        return (JSON.stringify(a.map(device => JSON.stringify(device)).sort()) ===
            JSON.stringify(b.map(device => JSON.stringify(device)).sort()));
    }
    intrinsicDeviceAsMediaStream(device) {
        // @ts-ignore
        return device && device.id ? device : null;
    }
    hasSameGroupId(groupId, kind, device) {
        device = this.getIntrinsicDeviceIdStr(device);
        if (groupId === this.getGroupIdFromDeviceId(kind, device) || groupId === '') {
            return true;
        }
        return false;
    }
    getGroupIdFromDeviceId(kind, device) {
        if (this.deviceInfoCache !== null) {
            const cachedDeviceInfo = this.listCachedDevicesOfKind(`${kind}input`).find((cachedDevice) => cachedDevice.deviceId === device);
            if (cachedDeviceInfo && cachedDeviceInfo.groupId) {
                return cachedDeviceInfo.groupId;
            }
        }
        return '';
    }
    getIntrinsicDeviceIdStr(device) {
        if (device === null) {
            return null;
        }
        if (typeof device === 'string') {
            return device;
        }
        if (device.id) {
            return device.id;
        }
        const constraints = device;
        if (!constraints.deviceId) {
            return '';
        }
        if (typeof constraints.deviceId === 'string') {
            return constraints.deviceId;
        }
        const deviceIdConstraint = constraints.deviceId;
        if (typeof deviceIdConstraint.exact === 'string') {
            return deviceIdConstraint.exact;
        }
        return '';
    }
    getActiveDeviceId(kind) {
        /* istanbul ignore else */
        if (this.activeDevices[kind] && this.activeDevices[kind].constraints) {
            const activeDeviceMediaTrackConstraints = this.activeDevices[kind].constraints.audio || this.activeDevices[kind].constraints.video;
            const activeDeviceConstrainDOMStringParameters = activeDeviceMediaTrackConstraints
                .deviceId;
            let activeDeviceId;
            if (typeof activeDeviceConstrainDOMStringParameters === 'string') {
                activeDeviceId = activeDeviceConstrainDOMStringParameters;
            }
            else {
                activeDeviceId = activeDeviceConstrainDOMStringParameters
                    .exact;
            }
            return activeDeviceId;
        }
        /* istanbul ignore next */
        return null;
    }
    restartLocalVideoAfterSelection(oldStream, fromAcquire, fromVideoTransformDevice) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!fromAcquire &&
                this.boundAudioVideoController &&
                this.boundAudioVideoController.videoTileController.hasStartedLocalVideoTile()) {
                if (fromVideoTransformDevice) {
                    // similar to `useWebaudio`, either Device or VideoTransformDevice, `this.activeDevices['video']` tracks the supplied inner Device.
                    // Upon in-meeting switching to VideoTransformDevice, device controller releases old "supplied" stream and
                    // calls replaceLocalVideo to avoid a full stop-start update.
                    yield this.boundAudioVideoController.replaceLocalVideo();
                    this.logger.info('successfully replaced video track');
                    if (oldStream && oldStream.active) {
                        this.logger.warn('previous media stream is not stopped during restart video');
                        this.releaseMediaStream(oldStream);
                    }
                }
                else {
                    // not from VideoTransformDevice, usual behavior.
                    this.logger.info('restarting local video to switch to new device');
                    this.boundAudioVideoController.restartLocalVideo(() => {
                        // TODO: implement MediaStreamDestroyer
                        // tracks of oldStream should be stopped when video tile is disconnected from MediaStream
                        // otherwise, camera is still being accessed and we need to stop it here.
                        if (oldStream && oldStream.active) {
                            this.logger.warn('previous media stream is not stopped during restart video');
                            this.releaseMediaStream(oldStream);
                        }
                    });
                }
            }
            else {
                this.releaseMediaStream(oldStream);
            }
        });
    }
    handleGetUserMediaError(error, errorTimeMs) {
        switch (error.name) {
            case 'NotReadableError':
            case 'TrackStartError':
                throw new NotReadableError_1.default(error);
            case 'NotFoundError':
            case 'DevicesNotFoundError':
                throw new NotFoundError_1.default(error);
            case 'NotAllowedError':
            case 'PermissionDeniedError':
            case 'SecurityError':
                if (errorTimeMs &&
                    errorTimeMs < DefaultDeviceController.permissionDeniedOriginDetectionThresholdMs) {
                    throw new PermissionDeniedError_1.default(error, 'Permission denied by browser');
                }
                else {
                    throw new PermissionDeniedError_1.default(error, 'Permission denied by user');
                }
            case 'OverconstrainedError':
            case 'ConstraintNotSatisfiedError':
                throw new OverconstrainedError_1.default(error);
            case 'TypeError':
                throw new TypeError_1.default(error);
            case 'AbortError':
            default:
                throw new GetUserMediaError_1.default(error);
        }
    }
    chooseInputIntrinsicDevice(kind, device, fromAcquire, fromVideoTransformDevice = false) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            this.inputDeviceCount += 1;
            const callCount = this.inputDeviceCount;
            if (device === null && kind === 'video') {
                this.lastNoVideoInputDeviceCount = this.inputDeviceCount;
                if (this.activeDevices[kind]) {
                    this.releaseMediaStream(this.activeDevices[kind].stream);
                    delete this.activeDevices[kind];
                }
                return;
            }
            // N.B.,: the input device might already have augmented constraints supplied
            // by an `AudioTransformDevice`. `calculateMediaStreamConstraints` will respect
            // settings supplied by the device.
            const proposedConstraints = this.calculateMediaStreamConstraints(kind, device);
            // TODO: `matchesConstraints` should really return compatible/incompatible/exact --
            // `applyConstraints` can be used to reuse the active device while changing the
            // requested constraints.
            if (this.activeDevices[kind] &&
                this.activeDevices[kind].matchesConstraints(proposedConstraints) &&
                this.activeDevices[kind].stream.active &&
                this.activeDevices[kind].groupId !== null &&
                this.hasSameGroupId(this.activeDevices[kind].groupId, kind, device)) {
                this.logger.info(`reusing existing ${kind} device`);
                return;
            }
            if (kind === 'audio' && this.activeDevices[kind] && this.activeDevices[kind].stream) {
                this.releaseMediaStream(this.activeDevices[kind].stream);
            }
            const startTimeMs = Date.now();
            const newDevice = new DeviceSelection_1.default();
            try {
                this.logger.info(`requesting new ${kind} device with constraint ${JSON.stringify(proposedConstraints)}`);
                const stream = this.intrinsicDeviceAsMediaStream(device);
                if (kind === 'audio' && device === null) {
                    newDevice.stream = DefaultDeviceController.createEmptyAudioDevice();
                    newDevice.constraints = null;
                }
                else if (stream) {
                    this.logger.info(`using media stream ${stream.id} for ${kind} device`);
                    newDevice.stream = stream;
                    newDevice.constraints = proposedConstraints;
                }
                else {
                    newDevice.stream = yield navigator.mediaDevices.getUserMedia(proposedConstraints);
                    newDevice.constraints = proposedConstraints;
                    if (kind === 'video' && this.lastNoVideoInputDeviceCount > callCount) {
                        this.logger.warn(`ignored to get video device for constraints ${JSON.stringify(proposedConstraints)} as no device was requested`);
                        this.releaseMediaStream(newDevice.stream);
                        return;
                    }
                    yield this.handleDeviceChange();
                    newDevice.stream.getTracks()[0].addEventListener('ended', () => {
                        if (this.activeDevices[kind] && this.activeDevices[kind].stream === newDevice.stream) {
                            this.logger.warn(`${kind} input device which was active is no longer available, resetting to null device`);
                            this.handleDeviceStreamEnded(kind, this.getActiveDeviceId(kind));
                        }
                    });
                }
                newDevice.groupId = this.getGroupIdFromDeviceId(kind, this.getIntrinsicDeviceIdStr(device));
            }
            catch (error) {
                let errorMessage;
                if ((error === null || error === void 0 ? void 0 : error.name) && error.message) {
                    errorMessage = `${error.name}: ${error.message}`;
                }
                else if (error === null || error === void 0 ? void 0 : error.name) {
                    errorMessage = error.name;
                }
                else if (error === null || error === void 0 ? void 0 : error.message) {
                    errorMessage = error.message;
                }
                else {
                    errorMessage = 'UnknownError';
                }
                if (kind === 'audio') {
                    (_b = (_a = this.boundAudioVideoController) === null || _a === void 0 ? void 0 : _a.eventController) === null || _b === void 0 ? void 0 : _b.publishEvent('audioInputFailed', {
                        audioInputErrorMessage: errorMessage,
                    });
                }
                else {
                    (_d = (_c = this.boundAudioVideoController) === null || _c === void 0 ? void 0 : _c.eventController) === null || _d === void 0 ? void 0 : _d.publishEvent('videoInputFailed', {
                        videoInputErrorMessage: errorMessage,
                    });
                }
                this.logger.error(`failed to get ${kind} device for constraints ${JSON.stringify(proposedConstraints)}: ${errorMessage}`);
                // This is effectively `error instanceof OverconstrainedError` but works in Node.
                if ('constraint' in error) {
                    this.logger.error(`Over-constrained by constraint: ${error.constraint}`);
                }
                /*
                 * If there is any error while acquiring the audio device, we fall back to null device.
                 * Reason: If device selection fails (e.g. NotReadableError), the peer connection is left hanging
                 * with no active audio track since we release the previously attached track.
                 * If no audio packet has yet been sent to the server, the server will not emit the joined event.
                 */
                if (kind === 'audio') {
                    this.logger.info(`choosing null ${kind} device instead`);
                    try {
                        newDevice.stream = DefaultDeviceController.createEmptyAudioDevice();
                        newDevice.constraints = null;
                        yield this.handleNewInputDevice(kind, newDevice, fromAcquire);
                    }
                    catch (error) {
                        this.logger.error(`failed to choose null ${kind} device. ${error.name}: ${error.message}`);
                    }
                }
                this.handleGetUserMediaError(error, Date.now() - startTimeMs);
            }
            this.logger.info(`got ${kind} device for constraints ${JSON.stringify(proposedConstraints)}`);
            yield this.handleNewInputDevice(kind, newDevice, fromAcquire, fromVideoTransformDevice);
            return;
        });
    }
    handleNewInputDevice(kind, newDevice, fromAcquire, fromVideoTransformDevice = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const oldStream = this.activeDevices[kind]
                ? this.activeDevices[kind].stream
                : null;
            this.activeDevices[kind] = newDevice;
            if (kind === 'video') {
                // attempts to mirror `this.useWebAudio`. The difference is that audio destination stream stays the same
                // but video sending needs to switch streams.
                if (this.chosenVideoInputIsTransformDevice()) {
                    this.logger.info('apply processors to transform');
                    yield this.chosenVideoTransformDevice.transformStream(this.activeDevices['video'].stream);
                }
                yield this.restartLocalVideoAfterSelection(oldStream, fromAcquire, fromVideoTransformDevice);
            }
            else {
                this.releaseMediaStream(oldStream);
                if (this.useWebAudio) {
                    this.attachAudioInputStreamToAudioContext(this.activeDevices[kind].stream);
                }
                else if (this.boundAudioVideoController) {
                    try {
                        yield this.boundAudioVideoController.restartLocalAudio(() => { });
                    }
                    catch (error) {
                        this.logger.info(`cannot replace audio track due to: ${error.message}`);
                    }
                }
                else {
                    this.logger.info('no audio-video controller is bound to the device controller');
                }
            }
        });
    }
    bindAudioOutput() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.boundAudioVideoController) {
                return;
            }
            const deviceInfo = this.deviceInfoFromDeviceId('audiooutput', this.audioOutputDeviceId);
            yield this.boundAudioVideoController.audioMixController.bindAudioDevice(deviceInfo);
        });
    }
    calculateMediaStreamConstraints(kind, device) {
        let trackConstraints = {};
        if (device === '') {
            device = null;
        }
        const stream = this.intrinsicDeviceAsMediaStream(device);
        if (device === null) {
            return null;
        }
        else if (typeof device === 'string') {
            if (this.browserBehavior.requiresNoExactMediaStreamConstraints() &&
                this.browserBehavior.requiresGroupIdMediaStreamConstraints()) {
                // In Samsung Internet browser, navigator.mediaDevices.enumerateDevices()
                // returns same deviceId but different groupdId for some audioinput and videoinput devices.
                // To handle this, we select appropriate device using deviceId + groupId.
                trackConstraints.deviceId = device;
                trackConstraints.groupId = this.getGroupIdFromDeviceId(kind, device);
            }
            else if (this.browserBehavior.requiresNoExactMediaStreamConstraints()) {
                trackConstraints.deviceId = device;
            }
            else {
                trackConstraints.deviceId = { exact: device };
            }
        }
        else if (stream) {
            // @ts-ignore - create a fake track constraint using the stream id
            trackConstraints.streamId = stream.id;
        }
        else {
            // Take the input set of constraints. Note that this allows
            // the builder to specify overrides for properties like `autoGainControl`.
            // @ts-ignore - device is a MediaTrackConstraints
            trackConstraints = device;
        }
        if (kind === 'video') {
            trackConstraints.width = trackConstraints.width || {
                ideal: this.videoInputQualitySettings.videoWidth,
            };
            trackConstraints.height = trackConstraints.height || {
                ideal: this.videoInputQualitySettings.videoHeight,
            };
            trackConstraints.frameRate = trackConstraints.frameRate || {
                ideal: this.videoInputQualitySettings.videoFrameRate,
            };
            // TODO: try to replace hard-code value related to videos into quality-level presets
            // The following configs relaxes CPU overuse detection threshold to offer better encoding quality
            // @ts-ignore
            trackConstraints.googCpuOveruseDetection = true;
            // @ts-ignore
            trackConstraints.googCpuOveruseEncodeUsage = true;
            // @ts-ignore
            trackConstraints.googCpuOveruseThreshold = 85;
            // @ts-ignore
            trackConstraints.googCpuUnderuseThreshold = 55;
        }
        if (kind === 'audio' && this.supportSampleRateConstraint()) {
            trackConstraints.sampleRate = { ideal: DefaultDeviceController.defaultSampleRate };
        }
        if (kind === 'audio' && this.supportSampleSizeConstraint()) {
            trackConstraints.sampleSize = { ideal: DefaultDeviceController.defaultSampleSize };
        }
        if (kind === 'audio' && this.supportChannelCountConstraint()) {
            trackConstraints.channelCount = { ideal: DefaultDeviceController.defaultChannelCount };
        }
        if (kind === 'audio') {
            const augmented = Object.assign({ echoCancellation: true, googEchoCancellation: true, googEchoCancellation2: true, googAutoGainControl: true, googAutoGainControl2: true, googNoiseSuppression: true, googNoiseSuppression2: true, googHighpassFilter: true }, trackConstraints);
            trackConstraints = augmented;
        }
        return kind === 'audio' ? { audio: trackConstraints } : { video: trackConstraints };
    }
    deviceInfoFromDeviceId(deviceKind, deviceId) {
        if (this.deviceInfoCache === null) {
            return null;
        }
        for (const device of this.deviceInfoCache) {
            if (device.kind === deviceKind && device.deviceId === deviceId) {
                return device;
            }
        }
        return null;
    }
    acquireInputStream(kind) {
        return __awaiter(this, void 0, void 0, function* () {
            if (kind === 'audio') {
                if (this.useWebAudio) {
                    const dest = this.getMediaStreamDestinationNode();
                    return dest.stream;
                }
            }
            // mirrors `this.useWebAudio`
            if (kind === 'video') {
                if (this.chosenVideoInputIsTransformDevice()) {
                    return this.chosenVideoTransformDevice.outputMediaStream;
                }
            }
            let existingConstraints = null;
            if (!this.activeDevices[kind]) {
                if (kind === 'audio') {
                    this.logger.info(`no ${kind} device chosen, creating empty ${kind} device`);
                }
                else {
                    this.logger.error(`no ${kind} device chosen, stopping local video tile`);
                    this.boundAudioVideoController.videoTileController.stopLocalVideoTile();
                    throw new Error(`no ${kind} device chosen, stopping local video tile`);
                }
            }
            else {
                this.logger.info(`checking whether existing ${kind} device can be reused`);
                const active = this.activeDevices[kind];
                // @ts-ignore
                existingConstraints = active.constraints ? active.constraints[kind] : null;
            }
            try {
                yield this.chooseInputIntrinsicDevice(kind, existingConstraints, true);
            }
            catch (e) {
                this.logger.error(`unable to acquire ${kind} device`);
                if (e instanceof PermissionDeniedError_1.default) {
                    throw e;
                }
                throw new GetUserMediaError_1.default(e, `unable to acquire ${kind} device`);
            }
            return this.activeDevices[kind].stream;
        });
    }
    hasAppliedTransform() {
        return !!this.transform;
    }
    isMediaStreamReusableByDeviceId(stream, device) {
        // for null device, assume the stream is not reusable
        if (!stream || !stream.active || !device) {
            return false;
        }
        if (device.id) {
            return stream.id === device.id;
        }
        const settings = stream.getTracks()[0].getSettings();
        // If a device does not specify deviceId, we have to assume the stream is not reusable.
        return settings.deviceId === this.getIntrinsicDeviceIdStr(device);
    }
    reconnectAudioInputs() {
        // It is never possible to get here without first establishing `audioInputSourceNode` via
        // choosing an inner stream, so we do not check for undefined here in order to avoid
        // creating an un-testable branch!
        this.audioInputSourceNode.disconnect();
        const output = this.getMediaStreamOutputNode();
        this.audioInputSourceNode.connect(output);
    }
    setTransform(device, nodes) {
        var _a, _b;
        (_b = (_a = this.transform) === null || _a === void 0 ? void 0 : _a.nodes) === null || _b === void 0 ? void 0 : _b.end.disconnect();
        this.transform = { nodes, device };
        const proc = nodes === null || nodes === void 0 ? void 0 : nodes.end;
        const dest = this.getMediaStreamDestinationNode();
        this.logger.debug(`Connecting transform node ${proc} to destination ${dest}.`);
        proc === null || proc === void 0 ? void 0 : proc.connect(dest);
        this.reconnectAudioInputs();
    }
    removeTransform() {
        var _a;
        const previous = this.transform;
        if (!previous) {
            return undefined;
        }
        (_a = this.transform.nodes) === null || _a === void 0 ? void 0 : _a.end.disconnect();
        this.transform = undefined;
        this.reconnectAudioInputs();
        return previous;
    }
    attachAudioInputStreamToAudioContext(stream) {
        var _a;
        (_a = this.audioInputSourceNode) === null || _a === void 0 ? void 0 : _a.disconnect();
        this.audioInputSourceNode = DefaultDeviceController.getAudioContext().createMediaStreamSource(stream);
        const output = this.getMediaStreamOutputNode();
        this.audioInputSourceNode.connect(output);
    }
    /**
     * Return the end of the Web Audio graph: post-transform audio.
     */
    getMediaStreamDestinationNode() {
        if (!this.audioInputDestinationNode) {
            this.audioInputDestinationNode = DefaultDeviceController.getAudioContext().createMediaStreamDestination();
        }
        return this.audioInputDestinationNode;
    }
    /**
     * Return the start of the Web Audio graph: pre-transform audio.
     * If there's no transform node, this is the destination node.
     */
    getMediaStreamOutputNode() {
        var _a, _b;
        return ((_b = (_a = this.transform) === null || _a === void 0 ? void 0 : _a.nodes) === null || _b === void 0 ? void 0 : _b.start) || this.getMediaStreamDestinationNode();
    }
    static getAudioContext() {
        if (!DefaultDeviceController.audioContext) {
            const options = {};
            if (navigator.mediaDevices.getSupportedConstraints().sampleRate) {
                options.sampleRate = DefaultDeviceController.defaultSampleRate;
            }
            // @ts-ignore
            DefaultDeviceController.audioContext = new (window.AudioContext || window.webkitAudioContext)(options);
        }
        return DefaultDeviceController.audioContext;
    }
    static closeAudioContext() {
        if (DefaultDeviceController.audioContext) {
            try {
                DefaultDeviceController.audioContext.close();
            }
            catch (e) {
                // Nothing we can do.
            }
        }
        DefaultDeviceController.audioContext = null;
    }
    supportSampleRateConstraint() {
        return this.useWebAudio && !!navigator.mediaDevices.getSupportedConstraints().sampleRate;
    }
    supportSampleSizeConstraint() {
        return this.useWebAudio && !!navigator.mediaDevices.getSupportedConstraints().sampleSize;
    }
    supportChannelCountConstraint() {
        return this.useWebAudio && !!navigator.mediaDevices.getSupportedConstraints().channelCount;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    trace(name, input, output) {
        let s = `API/DefaultDeviceController/${name}`;
        if (typeof input !== 'undefined') {
            s += ` ${JSON.stringify(input)}`;
        }
        if (typeof output !== 'undefined') {
            s += ` -> ${JSON.stringify(output)}`;
        }
        this.logger.info(s);
    }
}
exports.default = DefaultDeviceController;
DefaultDeviceController.permissionDeniedOriginDetectionThresholdMs = 500;
DefaultDeviceController.defaultVideoWidth = 960;
DefaultDeviceController.defaultVideoHeight = 540;
DefaultDeviceController.defaultVideoFrameRate = 15;
DefaultDeviceController.defaultVideoMaxBandwidthKbps = 1400;
DefaultDeviceController.defaultSampleRate = 48000;
DefaultDeviceController.defaultSampleSize = 16;
DefaultDeviceController.defaultChannelCount = 1;
DefaultDeviceController.audioContext = null;
//# sourceMappingURL=DefaultDeviceController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/DeviceSelection.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/DeviceSelection.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class DeviceSelection {
    constructor() {
        this.groupId = '';
    }
    matchesConstraints(constraints) {
        return JSON.stringify(this.constraints) === JSON.stringify(constraints);
    }
}
exports.default = DeviceSelection;
//# sourceMappingURL=DeviceSelection.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/GetUserMediaError.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/GetUserMediaError.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class GetUserMediaError extends Error {
    constructor(cause, message) {
        super(message || 'Error fetching device.');
        this.cause = cause;
    }
}
exports.default = GetUserMediaError;
//# sourceMappingURL=GetUserMediaError.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/NoOpDeviceController.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/NoOpDeviceController.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const NoOpMediaStreamBroker_1 = __webpack_require__(/*! ../mediastreambroker/NoOpMediaStreamBroker */ "./node_modules/amazon-chime-sdk-js/build/mediastreambroker/NoOpMediaStreamBroker.js");
class NoOpDeviceController extends NoOpMediaStreamBroker_1.default {
    constructor(_options) {
        super();
    }
    listAudioInputDevices() {
        return Promise.resolve([]);
    }
    listVideoInputDevices() {
        return Promise.resolve([]);
    }
    listAudioOutputDevices() {
        return Promise.resolve([]);
    }
    chooseAudioInputDevice(_device) {
        return Promise.reject();
    }
    chooseVideoInputDevice(_device) {
        return Promise.reject();
    }
    chooseAudioOutputDevice(_deviceId) {
        return Promise.reject();
    }
    addDeviceChangeObserver(_observer) { }
    removeDeviceChangeObserver(_observer) { }
    createAnalyserNodeForAudioInput() {
        return null;
    }
    startVideoPreviewForVideoInput(_element) { }
    stopVideoPreviewForVideoInput(_element) { }
    setDeviceLabelTrigger(_trigger) { }
    mixIntoAudioInput(_stream) {
        return null;
    }
    chooseVideoInputQuality(_width, _height, _frameRate, _maxBandwidthKbps) { }
    getVideoInputQualitySettings() {
        return null;
    }
}
exports.default = NoOpDeviceController;
//# sourceMappingURL=NoOpDeviceController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/NotFoundError.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/NotFoundError.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const GetUserMediaError_1 = __webpack_require__(/*! ./GetUserMediaError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/GetUserMediaError.js");
class NotFoundError extends GetUserMediaError_1.default {
    constructor(cause) {
        super(cause);
    }
}
exports.default = NotFoundError;
//# sourceMappingURL=NotFoundError.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/NotReadableError.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/NotReadableError.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const GetUserMediaError_1 = __webpack_require__(/*! ./GetUserMediaError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/GetUserMediaError.js");
class NotReadableError extends GetUserMediaError_1.default {
    constructor(cause) {
        super(cause);
    }
}
exports.default = NotReadableError;
//# sourceMappingURL=NotReadableError.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/OverconstrainedError.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/OverconstrainedError.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const GetUserMediaError_1 = __webpack_require__(/*! ./GetUserMediaError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/GetUserMediaError.js");
class OverconstrainedError extends GetUserMediaError_1.default {
    constructor(cause, constraint) {
        super(cause);
        this.constraint = constraint;
    }
}
exports.default = OverconstrainedError;
//# sourceMappingURL=OverconstrainedError.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/PermissionDeniedError.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/PermissionDeniedError.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const GetUserMediaError_1 = __webpack_require__(/*! ./GetUserMediaError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/GetUserMediaError.js");
class PermissionDeniedError extends GetUserMediaError_1.default {
    constructor(cause, message) {
        super(cause, message);
    }
}
exports.default = PermissionDeniedError;
//# sourceMappingURL=PermissionDeniedError.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/TypeError.js":
/*!******************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/TypeError.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const GetUserMediaError_1 = __webpack_require__(/*! ./GetUserMediaError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/GetUserMediaError.js");
class TypeError extends GetUserMediaError_1.default {
    constructor(cause) {
        super(cause);
    }
}
exports.default = TypeError;
//# sourceMappingURL=TypeError.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/VideoQualitySettings.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/VideoQualitySettings.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class VideoQualitySettings {
    constructor(videoWidth, videoHeight, videoFrameRate, videoMaxBandwidthKbps) {
        this.videoWidth = videoWidth;
        this.videoHeight = videoHeight;
        this.videoFrameRate = videoFrameRate;
        this.videoMaxBandwidthKbps = videoMaxBandwidthKbps;
    }
}
exports.default = VideoQualitySettings;
//# sourceMappingURL=VideoQualitySettings.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/VideoTransformDevice.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicecontroller/VideoTransformDevice.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isVideoTransformDevice = void 0;
/**
 * `isVideoTransformDevice` is a type guard for {@link VideoTransformDevice}.
 *
 * @param device the value to check.
 */
function isVideoTransformDevice(device) {
    return (!!device &&
        typeof device === 'object' &&
        'transformStream' in device &&
        'stop' in device &&
        'intrinsicDevice' in device);
}
exports.isVideoTransformDevice = isVideoTransformDevice;
//# sourceMappingURL=VideoTransformDevice.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicepixelratiomonitor/DefaultDevicePixelRatioMonitor.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicepixelratiomonitor/DefaultDevicePixelRatioMonitor.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class DefaultDevicePixelRatioMonitor {
    constructor(devicePixelRatioSource, logger) {
        this.devicePixelRatioSource = devicePixelRatioSource;
        this.mediaQueryListener = () => {
            this.observerQueue.forEach(tileObserver => {
                tileObserver.devicePixelRatioChanged(this.devicePixelRatioSource.devicePixelRatio());
            });
        };
        this.observerQueue = new Set();
        if (typeof window !== 'undefined') {
            const mediaQueryList = matchMedia(`(resolution: ${this.devicePixelRatioSource.devicePixelRatio()}dppx)`);
            if (typeof mediaQueryList.addEventListener === 'function') {
                mediaQueryList.addEventListener('change', this.mediaQueryListener);
            }
            else if (typeof mediaQueryList.addListener === 'function') {
                mediaQueryList.addListener(this.mediaQueryListener);
            }
            else {
                logger.warn('ignoring DefaultDevicePixelRatioMonitor');
            }
        }
    }
    registerObserver(observer) {
        this.observerQueue.add(observer);
        observer.devicePixelRatioChanged(this.devicePixelRatioSource.devicePixelRatio());
    }
    removeObserver(observer) {
        this.observerQueue.delete(observer);
    }
}
exports.default = DefaultDevicePixelRatioMonitor;
//# sourceMappingURL=DefaultDevicePixelRatioMonitor.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/devicepixelratiosource/DevicePixelRatioWindowSource.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/devicepixelratiosource/DevicePixelRatioWindowSource.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class DevicePixelRatioWindowSource {
    devicePixelRatio() {
        if (typeof window === 'undefined' || !window || !window.devicePixelRatio) {
            return 1;
        }
        return window.devicePixelRatio;
    }
}
exports.default = DevicePixelRatioWindowSource;
//# sourceMappingURL=DevicePixelRatioWindowSource.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/eventcontroller/DefaultEventController.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/eventcontroller/DefaultEventController.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ua_parser_js_1 = __webpack_require__(/*! ua-parser-js */ "./node_modules/ua-parser-js/src/ua-parser.js");
const Versioning_1 = __webpack_require__(/*! ../versioning/Versioning */ "./node_modules/amazon-chime-sdk-js/build/versioning/Versioning.js");
class DefaultEventController {
    constructor(audioVideoController) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.audioVideoController = audioVideoController;
        /** @internal */
        this.meetingHistoryStates = [];
        try {
            this.parserResult =
                navigator && navigator.userAgent ? new ua_parser_js_1.UAParser(navigator.userAgent).getResult() : null;
        }
        catch (error) {
            audioVideoController.logger.error(error.message);
        }
        this.browserMajorVersion =
            ((_c = (_b = (_a = this.parserResult) === null || _a === void 0 ? void 0 : _a.browser) === null || _b === void 0 ? void 0 : _b.version) === null || _c === void 0 ? void 0 : _c.split('.')[0]) || DefaultEventController.UNAVAILABLE;
        this.browserName = ((_d = this.parserResult) === null || _d === void 0 ? void 0 : _d.browser.name) || DefaultEventController.UNAVAILABLE;
        this.browserVersion = ((_e = this.parserResult) === null || _e === void 0 ? void 0 : _e.browser.version) || DefaultEventController.UNAVAILABLE;
        this.deviceName =
            [((_f = this.parserResult) === null || _f === void 0 ? void 0 : _f.device.vendor) || '', ((_g = this.parserResult) === null || _g === void 0 ? void 0 : _g.device.model) || '']
                .join(' ')
                .trim() || DefaultEventController.UNAVAILABLE;
    }
    publishEvent(name, attributes) {
        return __awaiter(this, void 0, void 0, function* () {
            const timestampMs = Date.now();
            yield this.pushMeetingState(name, timestampMs);
            // Make a single frozen copy of the event, reusing the object returned by
            // `getAttributes` to avoid copying too much.
            const eventAttributes = Object.freeze(Object.assign(this.getAttributes(timestampMs), attributes));
            this.audioVideoController.forEachObserver((observer) => {
                if (observer.eventDidReceive) {
                    observer.eventDidReceive(name, eventAttributes);
                }
            });
        });
    }
    pushMeetingState(state, timestampMs = Date.now()) {
        return __awaiter(this, void 0, void 0, function* () {
            this.meetingHistoryStates.push({
                name: state,
                timestampMs,
            });
        });
    }
    getAttributes(timestampMs) {
        var _a, _b;
        return {
            attendeeId: this.audioVideoController.configuration.credentials.attendeeId,
            browserMajorVersion: this.browserMajorVersion,
            browserName: this.browserName,
            browserVersion: this.browserVersion,
            deviceName: this.deviceName,
            externalMeetingId: typeof this.audioVideoController.configuration.externalMeetingId === 'string'
                ? this.audioVideoController.configuration.externalMeetingId
                : '',
            externalUserId: this.audioVideoController.configuration.credentials.externalUserId,
            meetingHistory: this.meetingHistoryStates,
            meetingId: this.audioVideoController.configuration.meetingId,
            osName: ((_a = this.parserResult) === null || _a === void 0 ? void 0 : _a.os.name) || DefaultEventController.UNAVAILABLE,
            osVersion: ((_b = this.parserResult) === null || _b === void 0 ? void 0 : _b.os.version) || DefaultEventController.UNAVAILABLE,
            sdkVersion: Versioning_1.default.sdkVersion,
            sdkName: Versioning_1.default.sdkName,
            timestampMs,
        };
    }
}
exports.default = DefaultEventController;
/** @internal */
DefaultEventController.UNAVAILABLE = 'Unavailable';
//# sourceMappingURL=DefaultEventController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isVideoTransformDevice = exports.isAudioTransformDevice = exports.WebSocketReadyState = exports.WaitForAttendeePresenceTask = exports.VoiceFocusTransformDevice = exports.VoiceFocusDeviceTransformer = exports.VideoTileState = exports.VideoStreamDescription = exports.VideoSource = exports.VideoQualitySettings = exports.VideoLogEvent = exports.VideoAdaptiveProbePolicy = exports.Versioning = exports.UnusableAudioWarningConnectionHealthPolicy = exports.TypeError = exports.TimeoutTask = exports.TimeoutScheduler = exports.TaskStatus = exports.SubscribeAndReceiveSubscribeAckTask = exports.StreamMetricReport = exports.Some = exports.SimulcastVideoStreamIndex = exports.SimulcastTransceiverController = exports.SimulcastLayers = exports.SignalingClientSubscribe = exports.SignalingClientJoin = exports.SignalingClientEventType = exports.SignalingClientEvent = exports.SignalingClientConnectionRequest = exports.SignalingAndMetricsConnectionMonitor = exports.SetRemoteDescriptionTask = exports.SetLocalDescriptionTask = exports.SessionStateControllerTransitionResult = exports.SessionStateControllerState = exports.SessionStateControllerDeferPriority = exports.SessionStateControllerAction = exports.SerialGroupTask = exports.SendAndReceiveDataMessagesTask = exports.SDPCandidateType = exports.RunnableTask = exports.ReconnectionHealthPolicy = exports.ReceiveVideoStreamIndexTask = exports.ReceiveVideoInputTask = exports.ReceiveTURNCredentialsTask = exports.ReceiveAudioInputTask = exports.RealtimeVolumeIndicator = exports.RealtimeState = exports.RealtimeAttendeePositionInFrame = exports.PermissionDeniedError = exports.ParallelGroupTask = exports.OverconstrainedError = exports.OpenSignalingConnectionTask = exports.NotReadableError = exports.NotFoundError = exports.None = exports.NoVideoUplinkBandwidthPolicy = exports.NoVideoDownlinkBandwidthPolicy = exports.NoOpVideoFrameProcessor = exports.NoOpVideoElementFactory = exports.NoOpTask = exports.NoOpMediaStreamBroker = exports.NoOpLogger = exports.NoOpDeviceController = exports.NoOpDebugLogger = exports.NoOpAudioVideoController = exports.NScaleVideoUplinkBandwidthPolicy = exports.MultiLogger = exports.MonitorTask = exports.MessagingSessionConfiguration = exports.Message = exports.MeetingSessionVideoAvailability = exports.MeetingSessionURLs = exports.MeetingSessionTURNCredentials = exports.MeetingSessionStatusCode = exports.MeetingSessionStatus = exports.MeetingSessionPOSTLogger = exports.MeetingSessionLifecycleEventCondition = exports.MeetingSessionLifecycleEvent = exports.MeetingSessionCredentials = exports.MeetingSessionConfiguration = exports.MeetingReadinessCheckerConfiguration = exports.MediaDeviceProxyHandler = exports.Maybe = exports.LogLevel = exports.Log = exports.ListenForVolumeIndicatorsTask = exports.LeaveAndReceiveLeaveAckTask = exports.JoinAndReceiveIndexTask = exports.IntervalScheduler = exports.GlobalMetricReport = exports.GetUserMediaError = exports.FullJitterLimitedBackoff = exports.FullJitterBackoffFactory = exports.FullJitterBackoff = exports.FinishGatheringICECandidatesTask = exports.DeviceSelection = exports.DevicePixelRatioWindowSource = exports.DefaultWebSocketAdapter = exports.DefaultVolumeIndicatorAdapter = exports.DefaultVideoTransformDevice = exports.DefaultVideoTileFactory = exports.DefaultVideoTileController = exports.DefaultVideoTile = exports.DefaultVideoStreamIndex = exports.DefaultVideoStreamIdSet = exports.DefaultVideoFrameProcessorPipeline = exports.DefaultVideoCaptureAndEncodeParameter = exports.DefaultTransceiverController = exports.DefaultStatsCollector = exports.DefaultSimulcastUplinkPolicy = exports.DefaultSignalingClient = exports.DefaultSigV4 = exports.DefaultSessionStateController = exports.DefaultSDP = exports.DefaultReconnectController = exports.DefaultRealtimeController = exports.DefaultPingPong = exports.DefaultModality = exports.DefaultMessagingSession = exports.DefaultMeetingSession = exports.DefaultMeetingReadinessChecker = exports.DefaultMediaDeviceFactory = exports.DefaultEventController = exports.DefaultDevicePixelRatioMonitor = exports.DefaultDeviceController = exports.DefaultContentShareController = exports.DefaultClientMetricReport = exports.DefaultBrowserBehavior = exports.DefaultAudioVideoFacade = exports.DefaultAudioVideoController = exports.DefaultAudioMixController = exports.DefaultActiveSpeakerPolicy = exports.DefaultActiveSpeakerDetector = exports.DataMessage = exports.CreateSDPTask = exports.CreatePeerConnectionTask = exports.ContentShareMediaStreamBroker = exports.ContentShareConstants = exports.ConsoleLogger = exports.ConnectionHealthPolicyConfiguration = exports.ConnectionHealthData = exports.ClientVideoStreamReceivingReport = exports.ClientMetricReportMediaType = exports.ClientMetricReportDirection = exports.CleanStoppedSessionTask = exports.CleanRestartedSessionTask = exports.CheckVideoInputFeedback = exports.CheckVideoConnectivityFeedback = exports.CheckNetworkUDPConnectivityFeedback = exports.CheckNetworkTCPConnectivityFeedback = exports.CheckContentShareConnectivityFeedback = exports.CheckCameraResolutionFeedback = exports.CheckAudioOutputFeedback = exports.CheckAudioInputFeedback = exports.CheckAudioConnectivityFeedback = exports.CanvasVideoFrameBuffer = exports.BitrateParameters = exports.BaseTask = exports.BaseConnectionHealthPolicy = exports.AudioVideoControllerState = exports.AudioProfile = exports.AudioLogEvent = exports.Attendee = exports.AttachMediaInputTask = exports.AsyncScheduler = exports.AllHighestVideoBandwidthPolicy = void 0;
const AllHighestVideoBandwidthPolicy_1 = __webpack_require__(/*! ./videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy */ "./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy.js");
exports.AllHighestVideoBandwidthPolicy = AllHighestVideoBandwidthPolicy_1.default;
const AsyncScheduler_1 = __webpack_require__(/*! ./scheduler/AsyncScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js");
exports.AsyncScheduler = AsyncScheduler_1.default;
const AttachMediaInputTask_1 = __webpack_require__(/*! ./task/AttachMediaInputTask */ "./node_modules/amazon-chime-sdk-js/build/task/AttachMediaInputTask.js");
exports.AttachMediaInputTask = AttachMediaInputTask_1.default;
const Attendee_1 = __webpack_require__(/*! ./attendee/Attendee */ "./node_modules/amazon-chime-sdk-js/build/attendee/Attendee.js");
exports.Attendee = Attendee_1.default;
const AudioLogEvent_1 = __webpack_require__(/*! ./statscollector/AudioLogEvent */ "./node_modules/amazon-chime-sdk-js/build/statscollector/AudioLogEvent.js");
exports.AudioLogEvent = AudioLogEvent_1.default;
const AudioProfile_1 = __webpack_require__(/*! ./audioprofile/AudioProfile */ "./node_modules/amazon-chime-sdk-js/build/audioprofile/AudioProfile.js");
exports.AudioProfile = AudioProfile_1.default;
const AudioVideoControllerState_1 = __webpack_require__(/*! ./audiovideocontroller/AudioVideoControllerState */ "./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/AudioVideoControllerState.js");
exports.AudioVideoControllerState = AudioVideoControllerState_1.default;
const BaseConnectionHealthPolicy_1 = __webpack_require__(/*! ./connectionhealthpolicy/BaseConnectionHealthPolicy */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/BaseConnectionHealthPolicy.js");
exports.BaseConnectionHealthPolicy = BaseConnectionHealthPolicy_1.default;
const BaseTask_1 = __webpack_require__(/*! ./task/BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
exports.BaseTask = BaseTask_1.default;
const BitrateParameters_1 = __webpack_require__(/*! ./videouplinkbandwidthpolicy/BitrateParameters */ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/BitrateParameters.js");
exports.BitrateParameters = BitrateParameters_1.default;
const CanvasVideoFrameBuffer_1 = __webpack_require__(/*! ./videoframeprocessor/CanvasVideoFrameBuffer */ "./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/CanvasVideoFrameBuffer.js");
exports.CanvasVideoFrameBuffer = CanvasVideoFrameBuffer_1.default;
const CheckAudioConnectivityFeedback_1 = __webpack_require__(/*! ./meetingreadinesschecker/CheckAudioConnectivityFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioConnectivityFeedback.js");
exports.CheckAudioConnectivityFeedback = CheckAudioConnectivityFeedback_1.default;
const CheckAudioInputFeedback_1 = __webpack_require__(/*! ./meetingreadinesschecker/CheckAudioInputFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioInputFeedback.js");
exports.CheckAudioInputFeedback = CheckAudioInputFeedback_1.default;
const CheckAudioOutputFeedback_1 = __webpack_require__(/*! ./meetingreadinesschecker/CheckAudioOutputFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioOutputFeedback.js");
exports.CheckAudioOutputFeedback = CheckAudioOutputFeedback_1.default;
const CheckCameraResolutionFeedback_1 = __webpack_require__(/*! ./meetingreadinesschecker/CheckCameraResolutionFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckCameraResolutionFeedback.js");
exports.CheckCameraResolutionFeedback = CheckCameraResolutionFeedback_1.default;
const CheckContentShareConnectivityFeedback_1 = __webpack_require__(/*! ./meetingreadinesschecker/CheckContentShareConnectivityFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckContentShareConnectivityFeedback.js");
exports.CheckContentShareConnectivityFeedback = CheckContentShareConnectivityFeedback_1.default;
const CheckNetworkTCPConnectivityFeedback_1 = __webpack_require__(/*! ./meetingreadinesschecker/CheckNetworkTCPConnectivityFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckNetworkTCPConnectivityFeedback.js");
exports.CheckNetworkTCPConnectivityFeedback = CheckNetworkTCPConnectivityFeedback_1.default;
const CheckNetworkUDPConnectivityFeedback_1 = __webpack_require__(/*! ./meetingreadinesschecker/CheckNetworkUDPConnectivityFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckNetworkUDPConnectivityFeedback.js");
exports.CheckNetworkUDPConnectivityFeedback = CheckNetworkUDPConnectivityFeedback_1.default;
const CheckVideoConnectivityFeedback_1 = __webpack_require__(/*! ./meetingreadinesschecker/CheckVideoConnectivityFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckVideoConnectivityFeedback.js");
exports.CheckVideoConnectivityFeedback = CheckVideoConnectivityFeedback_1.default;
const CheckVideoInputFeedback_1 = __webpack_require__(/*! ./meetingreadinesschecker/CheckVideoInputFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckVideoInputFeedback.js");
exports.CheckVideoInputFeedback = CheckVideoInputFeedback_1.default;
const CleanRestartedSessionTask_1 = __webpack_require__(/*! ./task/CleanRestartedSessionTask */ "./node_modules/amazon-chime-sdk-js/build/task/CleanRestartedSessionTask.js");
exports.CleanRestartedSessionTask = CleanRestartedSessionTask_1.default;
const CleanStoppedSessionTask_1 = __webpack_require__(/*! ./task/CleanStoppedSessionTask */ "./node_modules/amazon-chime-sdk-js/build/task/CleanStoppedSessionTask.js");
exports.CleanStoppedSessionTask = CleanStoppedSessionTask_1.default;
const ClientMetricReportDirection_1 = __webpack_require__(/*! ./clientmetricreport/ClientMetricReportDirection */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportDirection.js");
exports.ClientMetricReportDirection = ClientMetricReportDirection_1.default;
const ClientMetricReportMediaType_1 = __webpack_require__(/*! ./clientmetricreport/ClientMetricReportMediaType */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportMediaType.js");
exports.ClientMetricReportMediaType = ClientMetricReportMediaType_1.default;
const ClientVideoStreamReceivingReport_1 = __webpack_require__(/*! ./clientmetricreport/ClientVideoStreamReceivingReport */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientVideoStreamReceivingReport.js");
exports.ClientVideoStreamReceivingReport = ClientVideoStreamReceivingReport_1.default;
const ConnectionHealthData_1 = __webpack_require__(/*! ./connectionhealthpolicy/ConnectionHealthData */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ConnectionHealthData.js");
exports.ConnectionHealthData = ConnectionHealthData_1.default;
const ConnectionHealthPolicyConfiguration_1 = __webpack_require__(/*! ./connectionhealthpolicy/ConnectionHealthPolicyConfiguration */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ConnectionHealthPolicyConfiguration.js");
exports.ConnectionHealthPolicyConfiguration = ConnectionHealthPolicyConfiguration_1.default;
const ConsoleLogger_1 = __webpack_require__(/*! ./logger/ConsoleLogger */ "./node_modules/amazon-chime-sdk-js/build/logger/ConsoleLogger.js");
exports.ConsoleLogger = ConsoleLogger_1.default;
const ContentShareConstants_1 = __webpack_require__(/*! ./contentsharecontroller/ContentShareConstants */ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/ContentShareConstants.js");
exports.ContentShareConstants = ContentShareConstants_1.default;
const ContentShareMediaStreamBroker_1 = __webpack_require__(/*! ./contentsharecontroller/ContentShareMediaStreamBroker */ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/ContentShareMediaStreamBroker.js");
exports.ContentShareMediaStreamBroker = ContentShareMediaStreamBroker_1.default;
const CreatePeerConnectionTask_1 = __webpack_require__(/*! ./task/CreatePeerConnectionTask */ "./node_modules/amazon-chime-sdk-js/build/task/CreatePeerConnectionTask.js");
exports.CreatePeerConnectionTask = CreatePeerConnectionTask_1.default;
const CreateSDPTask_1 = __webpack_require__(/*! ./task/CreateSDPTask */ "./node_modules/amazon-chime-sdk-js/build/task/CreateSDPTask.js");
exports.CreateSDPTask = CreateSDPTask_1.default;
const DataMessage_1 = __webpack_require__(/*! ./datamessage/DataMessage */ "./node_modules/amazon-chime-sdk-js/build/datamessage/DataMessage.js");
exports.DataMessage = DataMessage_1.default;
const DefaultActiveSpeakerDetector_1 = __webpack_require__(/*! ./activespeakerdetector/DefaultActiveSpeakerDetector */ "./node_modules/amazon-chime-sdk-js/build/activespeakerdetector/DefaultActiveSpeakerDetector.js");
exports.DefaultActiveSpeakerDetector = DefaultActiveSpeakerDetector_1.default;
const DefaultActiveSpeakerPolicy_1 = __webpack_require__(/*! ./activespeakerpolicy/DefaultActiveSpeakerPolicy */ "./node_modules/amazon-chime-sdk-js/build/activespeakerpolicy/DefaultActiveSpeakerPolicy.js");
exports.DefaultActiveSpeakerPolicy = DefaultActiveSpeakerPolicy_1.default;
const DefaultAudioMixController_1 = __webpack_require__(/*! ./audiomixcontroller/DefaultAudioMixController */ "./node_modules/amazon-chime-sdk-js/build/audiomixcontroller/DefaultAudioMixController.js");
exports.DefaultAudioMixController = DefaultAudioMixController_1.default;
const DefaultAudioVideoController_1 = __webpack_require__(/*! ./audiovideocontroller/DefaultAudioVideoController */ "./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/DefaultAudioVideoController.js");
exports.DefaultAudioVideoController = DefaultAudioVideoController_1.default;
const DefaultAudioVideoFacade_1 = __webpack_require__(/*! ./audiovideofacade/DefaultAudioVideoFacade */ "./node_modules/amazon-chime-sdk-js/build/audiovideofacade/DefaultAudioVideoFacade.js");
exports.DefaultAudioVideoFacade = DefaultAudioVideoFacade_1.default;
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ./browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
exports.DefaultBrowserBehavior = DefaultBrowserBehavior_1.default;
const DefaultClientMetricReport_1 = __webpack_require__(/*! ./clientmetricreport/DefaultClientMetricReport */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/DefaultClientMetricReport.js");
exports.DefaultClientMetricReport = DefaultClientMetricReport_1.default;
const DefaultContentShareController_1 = __webpack_require__(/*! ./contentsharecontroller/DefaultContentShareController */ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/DefaultContentShareController.js");
exports.DefaultContentShareController = DefaultContentShareController_1.default;
const DefaultDeviceController_1 = __webpack_require__(/*! ./devicecontroller/DefaultDeviceController */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/DefaultDeviceController.js");
exports.DefaultDeviceController = DefaultDeviceController_1.default;
const DefaultDevicePixelRatioMonitor_1 = __webpack_require__(/*! ./devicepixelratiomonitor/DefaultDevicePixelRatioMonitor */ "./node_modules/amazon-chime-sdk-js/build/devicepixelratiomonitor/DefaultDevicePixelRatioMonitor.js");
exports.DefaultDevicePixelRatioMonitor = DefaultDevicePixelRatioMonitor_1.default;
const DefaultEventController_1 = __webpack_require__(/*! ./eventcontroller/DefaultEventController */ "./node_modules/amazon-chime-sdk-js/build/eventcontroller/DefaultEventController.js");
exports.DefaultEventController = DefaultEventController_1.default;
const DefaultMediaDeviceFactory_1 = __webpack_require__(/*! ./mediadevicefactory/DefaultMediaDeviceFactory */ "./node_modules/amazon-chime-sdk-js/build/mediadevicefactory/DefaultMediaDeviceFactory.js");
exports.DefaultMediaDeviceFactory = DefaultMediaDeviceFactory_1.default;
const DefaultMeetingReadinessChecker_1 = __webpack_require__(/*! ./meetingreadinesschecker/DefaultMeetingReadinessChecker */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/DefaultMeetingReadinessChecker.js");
exports.DefaultMeetingReadinessChecker = DefaultMeetingReadinessChecker_1.default;
const DefaultMeetingSession_1 = __webpack_require__(/*! ./meetingsession/DefaultMeetingSession */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/DefaultMeetingSession.js");
exports.DefaultMeetingSession = DefaultMeetingSession_1.default;
const DefaultMessagingSession_1 = __webpack_require__(/*! ./messagingsession/DefaultMessagingSession */ "./node_modules/amazon-chime-sdk-js/build/messagingsession/DefaultMessagingSession.js");
exports.DefaultMessagingSession = DefaultMessagingSession_1.default;
const DefaultModality_1 = __webpack_require__(/*! ./modality/DefaultModality */ "./node_modules/amazon-chime-sdk-js/build/modality/DefaultModality.js");
exports.DefaultModality = DefaultModality_1.default;
const DefaultPingPong_1 = __webpack_require__(/*! ./pingpong/DefaultPingPong */ "./node_modules/amazon-chime-sdk-js/build/pingpong/DefaultPingPong.js");
exports.DefaultPingPong = DefaultPingPong_1.default;
const DefaultRealtimeController_1 = __webpack_require__(/*! ./realtimecontroller/DefaultRealtimeController */ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/DefaultRealtimeController.js");
exports.DefaultRealtimeController = DefaultRealtimeController_1.default;
const DefaultReconnectController_1 = __webpack_require__(/*! ./reconnectcontroller/DefaultReconnectController */ "./node_modules/amazon-chime-sdk-js/build/reconnectcontroller/DefaultReconnectController.js");
exports.DefaultReconnectController = DefaultReconnectController_1.default;
const DefaultSDP_1 = __webpack_require__(/*! ./sdp/DefaultSDP */ "./node_modules/amazon-chime-sdk-js/build/sdp/DefaultSDP.js");
exports.DefaultSDP = DefaultSDP_1.default;
const DefaultSessionStateController_1 = __webpack_require__(/*! ./sessionstatecontroller/DefaultSessionStateController */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/DefaultSessionStateController.js");
exports.DefaultSessionStateController = DefaultSessionStateController_1.default;
const DefaultSigV4_1 = __webpack_require__(/*! ./sigv4/DefaultSigV4 */ "./node_modules/amazon-chime-sdk-js/build/sigv4/DefaultSigV4.js");
exports.DefaultSigV4 = DefaultSigV4_1.default;
const DefaultSignalingClient_1 = __webpack_require__(/*! ./signalingclient/DefaultSignalingClient */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/DefaultSignalingClient.js");
exports.DefaultSignalingClient = DefaultSignalingClient_1.default;
const DefaultSimulcastUplinkPolicy_1 = __webpack_require__(/*! ./videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy */ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy.js");
exports.DefaultSimulcastUplinkPolicy = DefaultSimulcastUplinkPolicy_1.default;
const DefaultStatsCollector_1 = __webpack_require__(/*! ./statscollector/DefaultStatsCollector */ "./node_modules/amazon-chime-sdk-js/build/statscollector/DefaultStatsCollector.js");
exports.DefaultStatsCollector = DefaultStatsCollector_1.default;
const DefaultTransceiverController_1 = __webpack_require__(/*! ./transceivercontroller/DefaultTransceiverController */ "./node_modules/amazon-chime-sdk-js/build/transceivercontroller/DefaultTransceiverController.js");
exports.DefaultTransceiverController = DefaultTransceiverController_1.default;
const DefaultVideoCaptureAndEncodeParameter_1 = __webpack_require__(/*! ./videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter */ "./node_modules/amazon-chime-sdk-js/build/videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter.js");
exports.DefaultVideoCaptureAndEncodeParameter = DefaultVideoCaptureAndEncodeParameter_1.default;
const DefaultVideoFrameProcessorPipeline_1 = __webpack_require__(/*! ./videoframeprocessor/DefaultVideoFrameProcessorPipeline */ "./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/DefaultVideoFrameProcessorPipeline.js");
exports.DefaultVideoFrameProcessorPipeline = DefaultVideoFrameProcessorPipeline_1.default;
const DefaultVideoStreamIdSet_1 = __webpack_require__(/*! ./videostreamidset/DefaultVideoStreamIdSet */ "./node_modules/amazon-chime-sdk-js/build/videostreamidset/DefaultVideoStreamIdSet.js");
exports.DefaultVideoStreamIdSet = DefaultVideoStreamIdSet_1.default;
const DefaultVideoStreamIndex_1 = __webpack_require__(/*! ./videostreamindex/DefaultVideoStreamIndex */ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/DefaultVideoStreamIndex.js");
exports.DefaultVideoStreamIndex = DefaultVideoStreamIndex_1.default;
const DefaultVideoTile_1 = __webpack_require__(/*! ./videotile/DefaultVideoTile */ "./node_modules/amazon-chime-sdk-js/build/videotile/DefaultVideoTile.js");
exports.DefaultVideoTile = DefaultVideoTile_1.default;
const DefaultVideoTileController_1 = __webpack_require__(/*! ./videotilecontroller/DefaultVideoTileController */ "./node_modules/amazon-chime-sdk-js/build/videotilecontroller/DefaultVideoTileController.js");
exports.DefaultVideoTileController = DefaultVideoTileController_1.default;
const DefaultVideoTileFactory_1 = __webpack_require__(/*! ./videotilefactory/DefaultVideoTileFactory */ "./node_modules/amazon-chime-sdk-js/build/videotilefactory/DefaultVideoTileFactory.js");
exports.DefaultVideoTileFactory = DefaultVideoTileFactory_1.default;
const DefaultVideoTransformDevice_1 = __webpack_require__(/*! ./videoframeprocessor/DefaultVideoTransformDevice */ "./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/DefaultVideoTransformDevice.js");
exports.DefaultVideoTransformDevice = DefaultVideoTransformDevice_1.default;
const DefaultVolumeIndicatorAdapter_1 = __webpack_require__(/*! ./volumeindicatoradapter/DefaultVolumeIndicatorAdapter */ "./node_modules/amazon-chime-sdk-js/build/volumeindicatoradapter/DefaultVolumeIndicatorAdapter.js");
exports.DefaultVolumeIndicatorAdapter = DefaultVolumeIndicatorAdapter_1.default;
const DefaultWebSocketAdapter_1 = __webpack_require__(/*! ./websocketadapter/DefaultWebSocketAdapter */ "./node_modules/amazon-chime-sdk-js/build/websocketadapter/DefaultWebSocketAdapter.js");
exports.DefaultWebSocketAdapter = DefaultWebSocketAdapter_1.default;
const DevicePixelRatioWindowSource_1 = __webpack_require__(/*! ./devicepixelratiosource/DevicePixelRatioWindowSource */ "./node_modules/amazon-chime-sdk-js/build/devicepixelratiosource/DevicePixelRatioWindowSource.js");
exports.DevicePixelRatioWindowSource = DevicePixelRatioWindowSource_1.default;
const DeviceSelection_1 = __webpack_require__(/*! ./devicecontroller/DeviceSelection */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/DeviceSelection.js");
exports.DeviceSelection = DeviceSelection_1.default;
const FinishGatheringICECandidatesTask_1 = __webpack_require__(/*! ./task/FinishGatheringICECandidatesTask */ "./node_modules/amazon-chime-sdk-js/build/task/FinishGatheringICECandidatesTask.js");
exports.FinishGatheringICECandidatesTask = FinishGatheringICECandidatesTask_1.default;
const FullJitterBackoff_1 = __webpack_require__(/*! ./backoff/FullJitterBackoff */ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoff.js");
exports.FullJitterBackoff = FullJitterBackoff_1.default;
const FullJitterBackoffFactory_1 = __webpack_require__(/*! ./backoff/FullJitterBackoffFactory */ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoffFactory.js");
exports.FullJitterBackoffFactory = FullJitterBackoffFactory_1.default;
const FullJitterLimitedBackoff_1 = __webpack_require__(/*! ./backoff/FullJitterLimitedBackoff */ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterLimitedBackoff.js");
exports.FullJitterLimitedBackoff = FullJitterLimitedBackoff_1.default;
const GetUserMediaError_1 = __webpack_require__(/*! ./devicecontroller/GetUserMediaError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/GetUserMediaError.js");
exports.GetUserMediaError = GetUserMediaError_1.default;
const GlobalMetricReport_1 = __webpack_require__(/*! ./clientmetricreport/GlobalMetricReport */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/GlobalMetricReport.js");
exports.GlobalMetricReport = GlobalMetricReport_1.default;
const IntervalScheduler_1 = __webpack_require__(/*! ./scheduler/IntervalScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/IntervalScheduler.js");
exports.IntervalScheduler = IntervalScheduler_1.default;
const JoinAndReceiveIndexTask_1 = __webpack_require__(/*! ./task/JoinAndReceiveIndexTask */ "./node_modules/amazon-chime-sdk-js/build/task/JoinAndReceiveIndexTask.js");
exports.JoinAndReceiveIndexTask = JoinAndReceiveIndexTask_1.default;
const LeaveAndReceiveLeaveAckTask_1 = __webpack_require__(/*! ./task/LeaveAndReceiveLeaveAckTask */ "./node_modules/amazon-chime-sdk-js/build/task/LeaveAndReceiveLeaveAckTask.js");
exports.LeaveAndReceiveLeaveAckTask = LeaveAndReceiveLeaveAckTask_1.default;
const ListenForVolumeIndicatorsTask_1 = __webpack_require__(/*! ./task/ListenForVolumeIndicatorsTask */ "./node_modules/amazon-chime-sdk-js/build/task/ListenForVolumeIndicatorsTask.js");
exports.ListenForVolumeIndicatorsTask = ListenForVolumeIndicatorsTask_1.default;
const Log_1 = __webpack_require__(/*! ./logger/Log */ "./node_modules/amazon-chime-sdk-js/build/logger/Log.js");
exports.Log = Log_1.default;
const LogLevel_1 = __webpack_require__(/*! ./logger/LogLevel */ "./node_modules/amazon-chime-sdk-js/build/logger/LogLevel.js");
exports.LogLevel = LogLevel_1.default;
const Maybe_1 = __webpack_require__(/*! ./maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
exports.Maybe = Maybe_1.default;
const MediaDeviceProxyHandler_1 = __webpack_require__(/*! ./mediadevicefactory/MediaDeviceProxyHandler */ "./node_modules/amazon-chime-sdk-js/build/mediadevicefactory/MediaDeviceProxyHandler.js");
exports.MediaDeviceProxyHandler = MediaDeviceProxyHandler_1.default;
const MeetingReadinessCheckerConfiguration_1 = __webpack_require__(/*! ./meetingreadinesschecker/MeetingReadinessCheckerConfiguration */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/MeetingReadinessCheckerConfiguration.js");
exports.MeetingReadinessCheckerConfiguration = MeetingReadinessCheckerConfiguration_1.default;
const MeetingSessionConfiguration_1 = __webpack_require__(/*! ./meetingsession/MeetingSessionConfiguration */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionConfiguration.js");
exports.MeetingSessionConfiguration = MeetingSessionConfiguration_1.default;
const MeetingSessionCredentials_1 = __webpack_require__(/*! ./meetingsession/MeetingSessionCredentials */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionCredentials.js");
exports.MeetingSessionCredentials = MeetingSessionCredentials_1.default;
const MeetingSessionLifecycleEvent_1 = __webpack_require__(/*! ./meetingsession/MeetingSessionLifecycleEvent */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionLifecycleEvent.js");
exports.MeetingSessionLifecycleEvent = MeetingSessionLifecycleEvent_1.default;
const MeetingSessionLifecycleEventCondition_1 = __webpack_require__(/*! ./meetingsession/MeetingSessionLifecycleEventCondition */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionLifecycleEventCondition.js");
exports.MeetingSessionLifecycleEventCondition = MeetingSessionLifecycleEventCondition_1.default;
const MeetingSessionPOSTLogger_1 = __webpack_require__(/*! ./logger/MeetingSessionPOSTLogger */ "./node_modules/amazon-chime-sdk-js/build/logger/MeetingSessionPOSTLogger.js");
exports.MeetingSessionPOSTLogger = MeetingSessionPOSTLogger_1.default;
const MeetingSessionStatus_1 = __webpack_require__(/*! ./meetingsession/MeetingSessionStatus */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatus.js");
exports.MeetingSessionStatus = MeetingSessionStatus_1.default;
const MeetingSessionStatusCode_1 = __webpack_require__(/*! ./meetingsession/MeetingSessionStatusCode */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js");
exports.MeetingSessionStatusCode = MeetingSessionStatusCode_1.default;
const MeetingSessionTURNCredentials_1 = __webpack_require__(/*! ./meetingsession/MeetingSessionTURNCredentials */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionTURNCredentials.js");
exports.MeetingSessionTURNCredentials = MeetingSessionTURNCredentials_1.default;
const MeetingSessionURLs_1 = __webpack_require__(/*! ./meetingsession/MeetingSessionURLs */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionURLs.js");
exports.MeetingSessionURLs = MeetingSessionURLs_1.default;
const MeetingSessionVideoAvailability_1 = __webpack_require__(/*! ./meetingsession/MeetingSessionVideoAvailability */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionVideoAvailability.js");
exports.MeetingSessionVideoAvailability = MeetingSessionVideoAvailability_1.default;
const Message_1 = __webpack_require__(/*! ./message/Message */ "./node_modules/amazon-chime-sdk-js/build/message/Message.js");
exports.Message = Message_1.default;
const MessagingSessionConfiguration_1 = __webpack_require__(/*! ./messagingsession/MessagingSessionConfiguration */ "./node_modules/amazon-chime-sdk-js/build/messagingsession/MessagingSessionConfiguration.js");
exports.MessagingSessionConfiguration = MessagingSessionConfiguration_1.default;
const MonitorTask_1 = __webpack_require__(/*! ./task/MonitorTask */ "./node_modules/amazon-chime-sdk-js/build/task/MonitorTask.js");
exports.MonitorTask = MonitorTask_1.default;
const MultiLogger_1 = __webpack_require__(/*! ./logger/MultiLogger */ "./node_modules/amazon-chime-sdk-js/build/logger/MultiLogger.js");
exports.MultiLogger = MultiLogger_1.default;
const NScaleVideoUplinkBandwidthPolicy_1 = __webpack_require__(/*! ./videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy */ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy.js");
exports.NScaleVideoUplinkBandwidthPolicy = NScaleVideoUplinkBandwidthPolicy_1.default;
const NoOpAudioVideoController_1 = __webpack_require__(/*! ./audiovideocontroller/NoOpAudioVideoController */ "./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/NoOpAudioVideoController.js");
exports.NoOpAudioVideoController = NoOpAudioVideoController_1.default;
const NoOpDebugLogger_1 = __webpack_require__(/*! ./logger/NoOpDebugLogger */ "./node_modules/amazon-chime-sdk-js/build/logger/NoOpDebugLogger.js");
exports.NoOpDebugLogger = NoOpDebugLogger_1.default;
const NoOpDeviceController_1 = __webpack_require__(/*! ./devicecontroller/NoOpDeviceController */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/NoOpDeviceController.js");
exports.NoOpDeviceController = NoOpDeviceController_1.default;
const NoOpLogger_1 = __webpack_require__(/*! ./logger/NoOpLogger */ "./node_modules/amazon-chime-sdk-js/build/logger/NoOpLogger.js");
exports.NoOpLogger = NoOpLogger_1.default;
const NoOpMediaStreamBroker_1 = __webpack_require__(/*! ./mediastreambroker/NoOpMediaStreamBroker */ "./node_modules/amazon-chime-sdk-js/build/mediastreambroker/NoOpMediaStreamBroker.js");
exports.NoOpMediaStreamBroker = NoOpMediaStreamBroker_1.default;
const NoOpTask_1 = __webpack_require__(/*! ./task/NoOpTask */ "./node_modules/amazon-chime-sdk-js/build/task/NoOpTask.js");
exports.NoOpTask = NoOpTask_1.default;
const NoOpVideoElementFactory_1 = __webpack_require__(/*! ./videoelementfactory/NoOpVideoElementFactory */ "./node_modules/amazon-chime-sdk-js/build/videoelementfactory/NoOpVideoElementFactory.js");
exports.NoOpVideoElementFactory = NoOpVideoElementFactory_1.default;
const NoOpVideoFrameProcessor_1 = __webpack_require__(/*! ./videoframeprocessor/NoOpVideoFrameProcessor */ "./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/NoOpVideoFrameProcessor.js");
exports.NoOpVideoFrameProcessor = NoOpVideoFrameProcessor_1.default;
const NoVideoDownlinkBandwidthPolicy_1 = __webpack_require__(/*! ./videodownlinkbandwidthpolicy/NoVideoDownlinkBandwidthPolicy */ "./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/NoVideoDownlinkBandwidthPolicy.js");
exports.NoVideoDownlinkBandwidthPolicy = NoVideoDownlinkBandwidthPolicy_1.default;
const NoVideoUplinkBandwidthPolicy_1 = __webpack_require__(/*! ./videouplinkbandwidthpolicy/NoVideoUplinkBandwidthPolicy */ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/NoVideoUplinkBandwidthPolicy.js");
exports.NoVideoUplinkBandwidthPolicy = NoVideoUplinkBandwidthPolicy_1.default;
const None_1 = __webpack_require__(/*! ./maybe/None */ "./node_modules/amazon-chime-sdk-js/build/maybe/None.js");
exports.None = None_1.default;
const NotFoundError_1 = __webpack_require__(/*! ./devicecontroller/NotFoundError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/NotFoundError.js");
exports.NotFoundError = NotFoundError_1.default;
const NotReadableError_1 = __webpack_require__(/*! ./devicecontroller/NotReadableError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/NotReadableError.js");
exports.NotReadableError = NotReadableError_1.default;
const OpenSignalingConnectionTask_1 = __webpack_require__(/*! ./task/OpenSignalingConnectionTask */ "./node_modules/amazon-chime-sdk-js/build/task/OpenSignalingConnectionTask.js");
exports.OpenSignalingConnectionTask = OpenSignalingConnectionTask_1.default;
const OverconstrainedError_1 = __webpack_require__(/*! ./devicecontroller/OverconstrainedError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/OverconstrainedError.js");
exports.OverconstrainedError = OverconstrainedError_1.default;
const ParallelGroupTask_1 = __webpack_require__(/*! ./task/ParallelGroupTask */ "./node_modules/amazon-chime-sdk-js/build/task/ParallelGroupTask.js");
exports.ParallelGroupTask = ParallelGroupTask_1.default;
const PermissionDeniedError_1 = __webpack_require__(/*! ./devicecontroller/PermissionDeniedError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/PermissionDeniedError.js");
exports.PermissionDeniedError = PermissionDeniedError_1.default;
const RealtimeAttendeePositionInFrame_1 = __webpack_require__(/*! ./realtimecontroller/RealtimeAttendeePositionInFrame */ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeAttendeePositionInFrame.js");
exports.RealtimeAttendeePositionInFrame = RealtimeAttendeePositionInFrame_1.default;
const RealtimeState_1 = __webpack_require__(/*! ./realtimecontroller/RealtimeState */ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeState.js");
exports.RealtimeState = RealtimeState_1.default;
const RealtimeVolumeIndicator_1 = __webpack_require__(/*! ./realtimecontroller/RealtimeVolumeIndicator */ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeVolumeIndicator.js");
exports.RealtimeVolumeIndicator = RealtimeVolumeIndicator_1.default;
const ReceiveAudioInputTask_1 = __webpack_require__(/*! ./task/ReceiveAudioInputTask */ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveAudioInputTask.js");
exports.ReceiveAudioInputTask = ReceiveAudioInputTask_1.default;
const ReceiveTURNCredentialsTask_1 = __webpack_require__(/*! ./task/ReceiveTURNCredentialsTask */ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveTURNCredentialsTask.js");
exports.ReceiveTURNCredentialsTask = ReceiveTURNCredentialsTask_1.default;
const ReceiveVideoInputTask_1 = __webpack_require__(/*! ./task/ReceiveVideoInputTask */ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveVideoInputTask.js");
exports.ReceiveVideoInputTask = ReceiveVideoInputTask_1.default;
const ReceiveVideoStreamIndexTask_1 = __webpack_require__(/*! ./task/ReceiveVideoStreamIndexTask */ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveVideoStreamIndexTask.js");
exports.ReceiveVideoStreamIndexTask = ReceiveVideoStreamIndexTask_1.default;
const ReconnectionHealthPolicy_1 = __webpack_require__(/*! ./connectionhealthpolicy/ReconnectionHealthPolicy */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ReconnectionHealthPolicy.js");
exports.ReconnectionHealthPolicy = ReconnectionHealthPolicy_1.default;
const RunnableTask_1 = __webpack_require__(/*! ./task/RunnableTask */ "./node_modules/amazon-chime-sdk-js/build/task/RunnableTask.js");
exports.RunnableTask = RunnableTask_1.default;
const SDPCandidateType_1 = __webpack_require__(/*! ./sdp/SDPCandidateType */ "./node_modules/amazon-chime-sdk-js/build/sdp/SDPCandidateType.js");
exports.SDPCandidateType = SDPCandidateType_1.default;
const SendAndReceiveDataMessagesTask_1 = __webpack_require__(/*! ./task/SendAndReceiveDataMessagesTask */ "./node_modules/amazon-chime-sdk-js/build/task/SendAndReceiveDataMessagesTask.js");
exports.SendAndReceiveDataMessagesTask = SendAndReceiveDataMessagesTask_1.default;
const SerialGroupTask_1 = __webpack_require__(/*! ./task/SerialGroupTask */ "./node_modules/amazon-chime-sdk-js/build/task/SerialGroupTask.js");
exports.SerialGroupTask = SerialGroupTask_1.default;
const SessionStateControllerAction_1 = __webpack_require__(/*! ./sessionstatecontroller/SessionStateControllerAction */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerAction.js");
exports.SessionStateControllerAction = SessionStateControllerAction_1.default;
const SessionStateControllerDeferPriority_1 = __webpack_require__(/*! ./sessionstatecontroller/SessionStateControllerDeferPriority */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerDeferPriority.js");
exports.SessionStateControllerDeferPriority = SessionStateControllerDeferPriority_1.default;
const SessionStateControllerState_1 = __webpack_require__(/*! ./sessionstatecontroller/SessionStateControllerState */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerState.js");
exports.SessionStateControllerState = SessionStateControllerState_1.default;
const SessionStateControllerTransitionResult_1 = __webpack_require__(/*! ./sessionstatecontroller/SessionStateControllerTransitionResult */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerTransitionResult.js");
exports.SessionStateControllerTransitionResult = SessionStateControllerTransitionResult_1.default;
const SetLocalDescriptionTask_1 = __webpack_require__(/*! ./task/SetLocalDescriptionTask */ "./node_modules/amazon-chime-sdk-js/build/task/SetLocalDescriptionTask.js");
exports.SetLocalDescriptionTask = SetLocalDescriptionTask_1.default;
const SetRemoteDescriptionTask_1 = __webpack_require__(/*! ./task/SetRemoteDescriptionTask */ "./node_modules/amazon-chime-sdk-js/build/task/SetRemoteDescriptionTask.js");
exports.SetRemoteDescriptionTask = SetRemoteDescriptionTask_1.default;
const SignalingAndMetricsConnectionMonitor_1 = __webpack_require__(/*! ./connectionmonitor/SignalingAndMetricsConnectionMonitor */ "./node_modules/amazon-chime-sdk-js/build/connectionmonitor/SignalingAndMetricsConnectionMonitor.js");
exports.SignalingAndMetricsConnectionMonitor = SignalingAndMetricsConnectionMonitor_1.default;
const SignalingClientConnectionRequest_1 = __webpack_require__(/*! ./signalingclient/SignalingClientConnectionRequest */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientConnectionRequest.js");
exports.SignalingClientConnectionRequest = SignalingClientConnectionRequest_1.default;
const SignalingClientEvent_1 = __webpack_require__(/*! ./signalingclient/SignalingClientEvent */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEvent.js");
exports.SignalingClientEvent = SignalingClientEvent_1.default;
const SignalingClientEventType_1 = __webpack_require__(/*! ./signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
exports.SignalingClientEventType = SignalingClientEventType_1.default;
const SignalingClientJoin_1 = __webpack_require__(/*! ./signalingclient/SignalingClientJoin */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientJoin.js");
exports.SignalingClientJoin = SignalingClientJoin_1.default;
const SignalingClientSubscribe_1 = __webpack_require__(/*! ./signalingclient/SignalingClientSubscribe */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientSubscribe.js");
exports.SignalingClientSubscribe = SignalingClientSubscribe_1.default;
const SimulcastLayers_1 = __webpack_require__(/*! ./simulcastlayers/SimulcastLayers */ "./node_modules/amazon-chime-sdk-js/build/simulcastlayers/SimulcastLayers.js");
exports.SimulcastLayers = SimulcastLayers_1.default;
const SimulcastTransceiverController_1 = __webpack_require__(/*! ./transceivercontroller/SimulcastTransceiverController */ "./node_modules/amazon-chime-sdk-js/build/transceivercontroller/SimulcastTransceiverController.js");
exports.SimulcastTransceiverController = SimulcastTransceiverController_1.default;
const SimulcastVideoStreamIndex_1 = __webpack_require__(/*! ./videostreamindex/SimulcastVideoStreamIndex */ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/SimulcastVideoStreamIndex.js");
exports.SimulcastVideoStreamIndex = SimulcastVideoStreamIndex_1.default;
const Some_1 = __webpack_require__(/*! ./maybe/Some */ "./node_modules/amazon-chime-sdk-js/build/maybe/Some.js");
exports.Some = Some_1.default;
const StreamMetricReport_1 = __webpack_require__(/*! ./clientmetricreport/StreamMetricReport */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/StreamMetricReport.js");
exports.StreamMetricReport = StreamMetricReport_1.default;
const SubscribeAndReceiveSubscribeAckTask_1 = __webpack_require__(/*! ./task/SubscribeAndReceiveSubscribeAckTask */ "./node_modules/amazon-chime-sdk-js/build/task/SubscribeAndReceiveSubscribeAckTask.js");
exports.SubscribeAndReceiveSubscribeAckTask = SubscribeAndReceiveSubscribeAckTask_1.default;
const TaskStatus_1 = __webpack_require__(/*! ./task/TaskStatus */ "./node_modules/amazon-chime-sdk-js/build/task/TaskStatus.js");
exports.TaskStatus = TaskStatus_1.default;
const TimeoutScheduler_1 = __webpack_require__(/*! ./scheduler/TimeoutScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/TimeoutScheduler.js");
exports.TimeoutScheduler = TimeoutScheduler_1.default;
const TimeoutTask_1 = __webpack_require__(/*! ./task/TimeoutTask */ "./node_modules/amazon-chime-sdk-js/build/task/TimeoutTask.js");
exports.TimeoutTask = TimeoutTask_1.default;
const TypeError_1 = __webpack_require__(/*! ./devicecontroller/TypeError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/TypeError.js");
exports.TypeError = TypeError_1.default;
const UnusableAudioWarningConnectionHealthPolicy_1 = __webpack_require__(/*! ./connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy.js");
exports.UnusableAudioWarningConnectionHealthPolicy = UnusableAudioWarningConnectionHealthPolicy_1.default;
const Versioning_1 = __webpack_require__(/*! ./versioning/Versioning */ "./node_modules/amazon-chime-sdk-js/build/versioning/Versioning.js");
exports.Versioning = Versioning_1.default;
const VideoAdaptiveProbePolicy_1 = __webpack_require__(/*! ./videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy */ "./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy.js");
exports.VideoAdaptiveProbePolicy = VideoAdaptiveProbePolicy_1.default;
const VideoLogEvent_1 = __webpack_require__(/*! ./statscollector/VideoLogEvent */ "./node_modules/amazon-chime-sdk-js/build/statscollector/VideoLogEvent.js");
exports.VideoLogEvent = VideoLogEvent_1.default;
const VideoQualitySettings_1 = __webpack_require__(/*! ./devicecontroller/VideoQualitySettings */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/VideoQualitySettings.js");
exports.VideoQualitySettings = VideoQualitySettings_1.default;
const VideoSource_1 = __webpack_require__(/*! ./videosource/VideoSource */ "./node_modules/amazon-chime-sdk-js/build/videosource/VideoSource.js");
exports.VideoSource = VideoSource_1.default;
const VideoStreamDescription_1 = __webpack_require__(/*! ./videostreamindex/VideoStreamDescription */ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/VideoStreamDescription.js");
exports.VideoStreamDescription = VideoStreamDescription_1.default;
const VideoTileState_1 = __webpack_require__(/*! ./videotile/VideoTileState */ "./node_modules/amazon-chime-sdk-js/build/videotile/VideoTileState.js");
exports.VideoTileState = VideoTileState_1.default;
const VoiceFocusDeviceTransformer_1 = __webpack_require__(/*! ./voicefocus/VoiceFocusDeviceTransformer */ "./node_modules/amazon-chime-sdk-js/build/voicefocus/VoiceFocusDeviceTransformer.js");
exports.VoiceFocusDeviceTransformer = VoiceFocusDeviceTransformer_1.default;
const VoiceFocusTransformDevice_1 = __webpack_require__(/*! ./voicefocus/VoiceFocusTransformDevice */ "./node_modules/amazon-chime-sdk-js/build/voicefocus/VoiceFocusTransformDevice.js");
exports.VoiceFocusTransformDevice = VoiceFocusTransformDevice_1.default;
const WaitForAttendeePresenceTask_1 = __webpack_require__(/*! ./task/WaitForAttendeePresenceTask */ "./node_modules/amazon-chime-sdk-js/build/task/WaitForAttendeePresenceTask.js");
exports.WaitForAttendeePresenceTask = WaitForAttendeePresenceTask_1.default;
const WebSocketReadyState_1 = __webpack_require__(/*! ./websocketadapter/WebSocketReadyState */ "./node_modules/amazon-chime-sdk-js/build/websocketadapter/WebSocketReadyState.js");
exports.WebSocketReadyState = WebSocketReadyState_1.default;
const AudioTransformDevice_1 = __webpack_require__(/*! ./devicecontroller/AudioTransformDevice */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/AudioTransformDevice.js");
Object.defineProperty(exports, "isAudioTransformDevice", ({ enumerable: true, get: function () { return AudioTransformDevice_1.isAudioTransformDevice; } }));
const VideoTransformDevice_1 = __webpack_require__(/*! ./devicecontroller/VideoTransformDevice */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/VideoTransformDevice.js");
Object.defineProperty(exports, "isVideoTransformDevice", ({ enumerable: true, get: function () { return VideoTransformDevice_1.isVideoTransformDevice; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/logger/ConsoleLogger.js":
/*!************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/logger/ConsoleLogger.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const LogLevel_1 = __webpack_require__(/*! ./LogLevel */ "./node_modules/amazon-chime-sdk-js/build/logger/LogLevel.js");
/**
 * ConsoleLogger writes logs with console
 *
 * ```typescript
 *   // working with the ConsoleLogger
 *   const logger = new ConsoleLogger('demo'); //default level is LogLevel.WARN
 *   logger.info('info');
 *   logger.debug('debug');
 *   logger.warn('warn');
 *   logger.error('error');
 *
 *   // setting logging levels
 *   const logger = new ConsoleLogger('demo', LogLevel.INFO)
 *   logger.debug(debugFunc()); // this will not show up
 *   logger.setLogLevel(LogLevel.DEBUG)
 *   logger.debug(debugFunc()); // this will show up
 *
 * ```
 */
class ConsoleLogger {
    constructor(name, level = LogLevel_1.default.WARN) {
        this.name = name;
        this.level = level;
    }
    info(msg) {
        this.log(LogLevel_1.default.INFO, msg);
    }
    warn(msg) {
        this.log(LogLevel_1.default.WARN, msg);
    }
    error(msg) {
        this.log(LogLevel_1.default.ERROR, msg);
    }
    debug(debugFunction) {
        if (LogLevel_1.default.DEBUG < this.level) {
            return;
        }
        this.log(LogLevel_1.default.DEBUG, typeof debugFunction === 'string' ? debugFunction : debugFunction());
    }
    setLogLevel(level) {
        this.level = level;
    }
    getLogLevel() {
        return this.level;
    }
    log(type, msg) {
        if (type < this.level) {
            return;
        }
        const timestamp = new Date().toISOString();
        const logMessage = `${timestamp} [${LogLevel_1.default[type]}] ${this.name} - ${msg}`;
        switch (type) {
            case LogLevel_1.default.ERROR:
                console.error(logMessage);
                break;
            case LogLevel_1.default.WARN:
                console.warn(logMessage);
                break;
            case LogLevel_1.default.DEBUG:
                console.debug(logMessage.replace(/\\r\\n/g, '\n'));
                break;
            case LogLevel_1.default.INFO:
                console.info(logMessage);
                break;
        }
    }
}
exports.default = ConsoleLogger;
//# sourceMappingURL=ConsoleLogger.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/logger/Log.js":
/*!**************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/logger/Log.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class Log {
    constructor(sequenceNumber, message, timestampMs, logLevel) {
        this.sequenceNumber = sequenceNumber;
        this.message = message;
        this.timestampMs = timestampMs;
        this.logLevel = logLevel;
    }
}
exports.default = Log;
//# sourceMappingURL=Log.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/logger/LogLevel.js":
/*!*******************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/logger/LogLevel.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
    LogLevel[LogLevel["OFF"] = 4] = "OFF";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
exports.default = LogLevel;
//# sourceMappingURL=LogLevel.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/logger/MeetingSessionPOSTLogger.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/logger/MeetingSessionPOSTLogger.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const LogLevel_1 = __webpack_require__(/*! ../logger/LogLevel */ "./node_modules/amazon-chime-sdk-js/build/logger/LogLevel.js");
const IntervalScheduler_1 = __webpack_require__(/*! ../scheduler/IntervalScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/IntervalScheduler.js");
const Log_1 = __webpack_require__(/*! ./Log */ "./node_modules/amazon-chime-sdk-js/build/logger/Log.js");
class MeetingSessionPOSTLogger {
    constructor(name, configuration, batchSize, intervalMs, url, level = LogLevel_1.default.WARN) {
        this.name = name;
        this.configuration = configuration;
        this.batchSize = batchSize;
        this.intervalMs = intervalMs;
        this.url = url;
        this.level = level;
        this.logCapture = [];
        this.sequenceNumber = 0;
        this.lock = false;
        this.intervalScheduler = new IntervalScheduler_1.default(this.intervalMs);
        this.startLogPublishScheduler(this.batchSize);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const GlobalAny = __webpack_require__.g;
        GlobalAny['window']['addEventListener'] &&
            window.addEventListener('unload', () => {
                this.stop();
            });
    }
    debug(debugFunction) {
        if (LogLevel_1.default.DEBUG < this.level) {
            return;
        }
        this.log(LogLevel_1.default.DEBUG, debugFunction());
    }
    info(msg) {
        this.log(LogLevel_1.default.INFO, msg);
    }
    warn(msg) {
        this.log(LogLevel_1.default.WARN, msg);
    }
    error(msg) {
        this.log(LogLevel_1.default.ERROR, msg);
    }
    setLogLevel(level) {
        this.level = level;
    }
    getLogLevel() {
        return this.level;
    }
    getLogCaptureSize() {
        return this.logCapture.length;
    }
    startLogPublishScheduler(batchSize) {
        this.intervalScheduler.start(() => __awaiter(this, void 0, void 0, function* () {
            if (this.lock === true || this.getLogCaptureSize() === 0) {
                return;
            }
            this.lock = true;
            const batch = this.logCapture.slice(0, batchSize);
            const body = this.makeRequestBody(batch);
            try {
                const response = yield fetch(this.url, {
                    method: 'POST',
                    body,
                });
                if (response.status === 200) {
                    this.logCapture = this.logCapture.slice(batch.length);
                }
            }
            catch (error) {
                console.warn('[MeetingSessionPOSTLogger] ' + error.message);
            }
            finally {
                this.lock = false;
            }
        }));
    }
    stop() {
        this.intervalScheduler.stop();
        const body = this.makeRequestBody(this.logCapture);
        navigator.sendBeacon(this.url, body);
    }
    makeRequestBody(batch) {
        return JSON.stringify({
            meetingId: this.configuration.meetingId,
            attendeeId: this.configuration.credentials.attendeeId,
            appName: this.name,
            logs: batch,
        });
    }
    log(type, msg) {
        if (type < this.level) {
            return;
        }
        const date = new Date();
        this.logCapture.push(new Log_1.default(this.sequenceNumber, msg, date.getTime(), LogLevel_1.default[type]));
        this.sequenceNumber += 1;
    }
}
exports.default = MeetingSessionPOSTLogger;
//# sourceMappingURL=MeetingSessionPOSTLogger.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/logger/MultiLogger.js":
/*!**********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/logger/MultiLogger.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const LogLevel_1 = __webpack_require__(/*! ./LogLevel */ "./node_modules/amazon-chime-sdk-js/build/logger/LogLevel.js");
/**
 * MultiLogger writes logs to multiple other loggers
 */
class MultiLogger {
    constructor(...loggers) {
        this._loggers = loggers;
    }
    info(msg) {
        for (const logger of this._loggers) {
            logger.info(msg);
        }
    }
    warn(msg) {
        for (const logger of this._loggers) {
            logger.warn(msg);
        }
    }
    error(msg) {
        for (const logger of this._loggers) {
            logger.error(msg);
        }
    }
    debug(debugFunction) {
        let message;
        const memoized = typeof debugFunction === 'string'
            ? debugFunction
            : () => {
                if (!message) {
                    message = debugFunction();
                }
                return message;
            };
        for (const logger of this._loggers) {
            logger.debug(memoized);
        }
    }
    setLogLevel(level) {
        for (const logger of this._loggers) {
            logger.setLogLevel(level);
        }
    }
    getLogLevel() {
        for (const logger of this._loggers) {
            return logger.getLogLevel();
        }
        return LogLevel_1.default.OFF;
    }
}
exports.default = MultiLogger;
//# sourceMappingURL=MultiLogger.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/logger/NoOpDebugLogger.js":
/*!**************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/logger/NoOpDebugLogger.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const LogLevel_1 = __webpack_require__(/*! ./LogLevel */ "./node_modules/amazon-chime-sdk-js/build/logger/LogLevel.js");
const NoOpLogger_1 = __webpack_require__(/*! ./NoOpLogger */ "./node_modules/amazon-chime-sdk-js/build/logger/NoOpLogger.js");
/**
 * [[NoOpDebugLogger]] does not log any message but does call
 * debug functions by default.
 */
class NoOpDebugLogger extends NoOpLogger_1.default {
    constructor() {
        super(LogLevel_1.default.DEBUG);
    }
}
exports.default = NoOpDebugLogger;
//# sourceMappingURL=NoOpDebugLogger.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/logger/NoOpLogger.js":
/*!*********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/logger/NoOpLogger.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const LogLevel_1 = __webpack_require__(/*! ./LogLevel */ "./node_modules/amazon-chime-sdk-js/build/logger/LogLevel.js");
/**
 * [[NoOpLogger]] does not log any message.
 */
class NoOpLogger {
    constructor(level = LogLevel_1.default.OFF) {
        this.level = level;
    }
    info(_msg) { }
    warn(_msg) { }
    error(_msg) { }
    debug(debugFunction) {
        if (LogLevel_1.default.DEBUG < this.level) {
            return;
        }
        if (typeof debugFunction !== 'string') {
            debugFunction();
        }
    }
    setLogLevel(level) {
        this.level = level;
    }
    getLogLevel() {
        return this.level;
    }
}
exports.default = NoOpLogger;
//# sourceMappingURL=NoOpLogger.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js":
/*!***************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const None_1 = __webpack_require__(/*! ./None */ "./node_modules/amazon-chime-sdk-js/build/maybe/None.js");
const Some_1 = __webpack_require__(/*! ./Some */ "./node_modules/amazon-chime-sdk-js/build/maybe/Some.js");
class Maybe {
    static of(value) {
        return value === undefined || value === null ? None_1.default.of() : Some_1.default.of(value);
    }
}
exports.default = Maybe;
//# sourceMappingURL=Maybe.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/maybe/None.js":
/*!**************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/maybe/None.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Maybe_1 = __webpack_require__(/*! ./Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
class None {
    constructor() {
        this.isSome = false;
        this.isNone = true;
    }
    get() {
        throw new Error('value is null');
    }
    getOrElse(value) {
        return value;
    }
    map(_f) {
        return new None();
    }
    flatMap(_f) {
        return new None();
    }
    defaulting(value) {
        return Maybe_1.default.of(this.getOrElse(value));
    }
    static of() {
        return new None();
    }
}
exports.default = None;
//# sourceMappingURL=None.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/maybe/Some.js":
/*!**************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/maybe/Some.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Maybe_1 = __webpack_require__(/*! ./Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
class Some {
    constructor(value) {
        this.value = value;
        this.isSome = true;
        this.isNone = false;
    }
    map(f) {
        return Maybe_1.default.of(f(this.value));
    }
    flatMap(f) {
        return f(this.value);
    }
    get() {
        return this.value;
    }
    getOrElse(_value) {
        return this.value;
    }
    defaulting(value) {
        return Maybe_1.default.of(this.getOrElse(value));
    }
    static of(value) {
        if (value === null || value === undefined) {
            throw new Error('value is ${value}');
        }
        return new Some(value);
    }
}
exports.default = Some;
//# sourceMappingURL=Some.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/mediadevicefactory/DefaultMediaDeviceFactory.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/mediadevicefactory/DefaultMediaDeviceFactory.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const MediaDeviceProxyHandler_1 = __webpack_require__(/*! ./MediaDeviceProxyHandler */ "./node_modules/amazon-chime-sdk-js/build/mediadevicefactory/MediaDeviceProxyHandler.js");
class DefaultMediaDeviceFactory {
    constructor() {
        this.isMediaDevicesSupported = typeof navigator !== 'undefined' && !!navigator.mediaDevices;
    }
    create() {
        if (!this.isMediaDevicesSupported) {
            throw new Error(`navigator.mediaDevices is not supported`);
        }
        else {
            return new Proxy(navigator.mediaDevices, new MediaDeviceProxyHandler_1.default());
        }
    }
}
exports.default = DefaultMediaDeviceFactory;
//# sourceMappingURL=DefaultMediaDeviceFactory.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/mediadevicefactory/MediaDeviceProxyHandler.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/mediadevicefactory/MediaDeviceProxyHandler.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const AsyncScheduler_1 = __webpack_require__(/*! ../scheduler/AsyncScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js");
const IntervalScheduler_1 = __webpack_require__(/*! ../scheduler/IntervalScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/IntervalScheduler.js");
class MediaDeviceProxyHandler {
    constructor() {
        this.scheduler = null;
        this.devices = null;
        this.deviceChangeListeners = new Set();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types
        this.get = (target, property, receiver) => {
            if (!Reflect.has(target, property)) {
                return undefined;
            }
            if (!('ondevicechange' in navigator.mediaDevices)) {
                if (property === 'addEventListener') {
                    return this.patchAddEventListener(target, property, receiver);
                }
                else if (property === 'removeEventListener') {
                    return this.patchRemoveEventListener(target, property, receiver);
                }
            }
            const value = Reflect.get(target, property, receiver);
            return typeof value === 'function' ? value.bind(target) : value;
        };
        this.patchAddEventListener = (target, property, 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        receiver) => {
            const value = Reflect.get(target, property, receiver);
            return (type, listener, options) => {
                if (type === 'devicechange') {
                    this.deviceChangeListeners.add(listener);
                    if (!this.scheduler) {
                        this.scheduler = new IntervalScheduler_1.default(MediaDeviceProxyHandler.INTERVAL_MS);
                        this.scheduler.start(this.pollDeviceLists);
                    }
                }
                else {
                    return Reflect.apply(value, target, [type, listener, options]);
                }
            };
        };
        this.patchRemoveEventListener = (target, property, 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        receiver) => {
            const value = Reflect.get(target, property, receiver);
            return (type, listener, options) => {
                if (type === 'devicechange') {
                    this.deviceChangeListeners.delete(listener);
                    if (this.deviceChangeListeners.size === 0 && this.scheduler) {
                        this.scheduler.stop();
                        this.scheduler = null;
                    }
                }
                else {
                    return Reflect.apply(value, target, [type, listener, options]);
                }
            };
        };
        this.pollDeviceLists = () => __awaiter(this, void 0, void 0, function* () {
            const newDevices = yield this.sortedDeviceList();
            if (this.devices) {
                const changed = newDevices.length !== this.devices.length ||
                    newDevices.some((device, index) => {
                        return device.deviceId !== this.devices[index].deviceId;
                    });
                if (changed) {
                    this.handleDeviceChangeEvent();
                }
            }
            this.devices = newDevices;
        });
    }
    sortedDeviceList() {
        return __awaiter(this, void 0, void 0, function* () {
            // @ts-ignore
            const newDevices = yield navigator.mediaDevices.enumerateDevices();
            return newDevices.sort((device1, device2) => {
                if (device1.deviceId < device2.deviceId) {
                    return 1;
                }
                else if (device1.deviceId > device2.deviceId) {
                    return -1;
                }
                else {
                    return 0;
                }
            });
        });
    }
    handleDeviceChangeEvent() {
        for (const listener of this.deviceChangeListeners) {
            new AsyncScheduler_1.default().start(() => {
                /* istanbul ignore else */
                if (this.deviceChangeListeners.has(listener)) {
                    const event = new Event('devicechange');
                    if (typeof listener === 'function') {
                        listener(event);
                    }
                    else {
                        listener.handleEvent(event);
                    }
                }
            });
        }
    }
}
exports.default = MediaDeviceProxyHandler;
MediaDeviceProxyHandler.INTERVAL_MS = 1000;
//# sourceMappingURL=MediaDeviceProxyHandler.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/mediastreambroker/NoOpMediaStreamBroker.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/mediastreambroker/NoOpMediaStreamBroker.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[NoOpDeviceBroker]] rejects requests to acquire a [[MediaStream]].
 */
class NoOpMediaStreamBroker {
    acquireAudioInputStream() {
        return Promise.reject();
    }
    acquireVideoInputStream() {
        return Promise.reject();
    }
    acquireDisplayInputStream(_streamConstraints) {
        return Promise.reject();
    }
    releaseMediaStream(_mediaStreamToRelease) { }
    bindToAudioVideoController(_audioVideoController) { }
}
exports.default = NoOpMediaStreamBroker;
//# sourceMappingURL=NoOpMediaStreamBroker.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioConnectivityFeedback.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioConnectivityFeedback.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckAudioConnectivityFeedback = void 0;
var CheckAudioConnectivityFeedback;
(function (CheckAudioConnectivityFeedback) {
    CheckAudioConnectivityFeedback[CheckAudioConnectivityFeedback["Succeeded"] = 0] = "Succeeded";
    CheckAudioConnectivityFeedback[CheckAudioConnectivityFeedback["AudioInputRequestFailed"] = 1] = "AudioInputRequestFailed";
    CheckAudioConnectivityFeedback[CheckAudioConnectivityFeedback["AudioInputPermissionDenied"] = 2] = "AudioInputPermissionDenied";
    CheckAudioConnectivityFeedback[CheckAudioConnectivityFeedback["ConnectionFailed"] = 3] = "ConnectionFailed";
    CheckAudioConnectivityFeedback[CheckAudioConnectivityFeedback["AudioNotReceived"] = 4] = "AudioNotReceived";
})(CheckAudioConnectivityFeedback = exports.CheckAudioConnectivityFeedback || (exports.CheckAudioConnectivityFeedback = {}));
exports.default = CheckAudioConnectivityFeedback;
//# sourceMappingURL=CheckAudioConnectivityFeedback.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioInputFeedback.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioInputFeedback.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckAudioInputFeedback = void 0;
var CheckAudioInputFeedback;
(function (CheckAudioInputFeedback) {
    CheckAudioInputFeedback[CheckAudioInputFeedback["Succeeded"] = 0] = "Succeeded";
    CheckAudioInputFeedback[CheckAudioInputFeedback["Failed"] = 1] = "Failed";
    CheckAudioInputFeedback[CheckAudioInputFeedback["PermissionDenied"] = 2] = "PermissionDenied";
})(CheckAudioInputFeedback = exports.CheckAudioInputFeedback || (exports.CheckAudioInputFeedback = {}));
exports.default = CheckAudioInputFeedback;
//# sourceMappingURL=CheckAudioInputFeedback.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioOutputFeedback.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioOutputFeedback.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckAudioOutputFeedback = void 0;
var CheckAudioOutputFeedback;
(function (CheckAudioOutputFeedback) {
    CheckAudioOutputFeedback[CheckAudioOutputFeedback["Succeeded"] = 0] = "Succeeded";
    CheckAudioOutputFeedback[CheckAudioOutputFeedback["Failed"] = 1] = "Failed";
})(CheckAudioOutputFeedback = exports.CheckAudioOutputFeedback || (exports.CheckAudioOutputFeedback = {}));
exports.default = CheckAudioOutputFeedback;
//# sourceMappingURL=CheckAudioOutputFeedback.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckCameraResolutionFeedback.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckCameraResolutionFeedback.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckCameraResolutionFeedback = void 0;
var CheckCameraResolutionFeedback;
(function (CheckCameraResolutionFeedback) {
    CheckCameraResolutionFeedback[CheckCameraResolutionFeedback["Succeeded"] = 0] = "Succeeded";
    CheckCameraResolutionFeedback[CheckCameraResolutionFeedback["Failed"] = 1] = "Failed";
    CheckCameraResolutionFeedback[CheckCameraResolutionFeedback["ResolutionNotSupported"] = 2] = "ResolutionNotSupported";
    CheckCameraResolutionFeedback[CheckCameraResolutionFeedback["PermissionDenied"] = 3] = "PermissionDenied";
})(CheckCameraResolutionFeedback = exports.CheckCameraResolutionFeedback || (exports.CheckCameraResolutionFeedback = {}));
exports.default = CheckCameraResolutionFeedback;
//# sourceMappingURL=CheckCameraResolutionFeedback.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckContentShareConnectivityFeedback.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckContentShareConnectivityFeedback.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckContentShareConnectivityFeedback = void 0;
var CheckContentShareConnectivityFeedback;
(function (CheckContentShareConnectivityFeedback) {
    CheckContentShareConnectivityFeedback[CheckContentShareConnectivityFeedback["Succeeded"] = 0] = "Succeeded";
    CheckContentShareConnectivityFeedback[CheckContentShareConnectivityFeedback["Failed"] = 1] = "Failed";
    CheckContentShareConnectivityFeedback[CheckContentShareConnectivityFeedback["PermissionDenied"] = 2] = "PermissionDenied";
    CheckContentShareConnectivityFeedback[CheckContentShareConnectivityFeedback["TimedOut"] = 3] = "TimedOut";
    CheckContentShareConnectivityFeedback[CheckContentShareConnectivityFeedback["ConnectionFailed"] = 4] = "ConnectionFailed";
})(CheckContentShareConnectivityFeedback = exports.CheckContentShareConnectivityFeedback || (exports.CheckContentShareConnectivityFeedback = {}));
exports.default = CheckContentShareConnectivityFeedback;
//# sourceMappingURL=CheckContentShareConnectivityFeedback.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckNetworkTCPConnectivityFeedback.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckNetworkTCPConnectivityFeedback.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckNetworkTCPConnectivityFeedback = void 0;
var CheckNetworkTCPConnectivityFeedback;
(function (CheckNetworkTCPConnectivityFeedback) {
    CheckNetworkTCPConnectivityFeedback[CheckNetworkTCPConnectivityFeedback["Succeeded"] = 0] = "Succeeded";
    CheckNetworkTCPConnectivityFeedback[CheckNetworkTCPConnectivityFeedback["MeetingSessionURLsNotInitialized"] = 1] = "MeetingSessionURLsNotInitialized";
    CheckNetworkTCPConnectivityFeedback[CheckNetworkTCPConnectivityFeedback["ConnectionFailed"] = 2] = "ConnectionFailed";
    CheckNetworkTCPConnectivityFeedback[CheckNetworkTCPConnectivityFeedback["ICENegotiationFailed"] = 3] = "ICENegotiationFailed";
})(CheckNetworkTCPConnectivityFeedback = exports.CheckNetworkTCPConnectivityFeedback || (exports.CheckNetworkTCPConnectivityFeedback = {}));
exports.default = CheckNetworkTCPConnectivityFeedback;
//# sourceMappingURL=CheckNetworkTCPConnectivityFeedback.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckNetworkUDPConnectivityFeedback.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckNetworkUDPConnectivityFeedback.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckNetworkUDPConnectivityFeedback = void 0;
var CheckNetworkUDPConnectivityFeedback;
(function (CheckNetworkUDPConnectivityFeedback) {
    CheckNetworkUDPConnectivityFeedback[CheckNetworkUDPConnectivityFeedback["Succeeded"] = 0] = "Succeeded";
    CheckNetworkUDPConnectivityFeedback[CheckNetworkUDPConnectivityFeedback["MeetingSessionURLsNotInitialized"] = 1] = "MeetingSessionURLsNotInitialized";
    CheckNetworkUDPConnectivityFeedback[CheckNetworkUDPConnectivityFeedback["ConnectionFailed"] = 2] = "ConnectionFailed";
    CheckNetworkUDPConnectivityFeedback[CheckNetworkUDPConnectivityFeedback["ICENegotiationFailed"] = 3] = "ICENegotiationFailed";
})(CheckNetworkUDPConnectivityFeedback = exports.CheckNetworkUDPConnectivityFeedback || (exports.CheckNetworkUDPConnectivityFeedback = {}));
exports.default = CheckNetworkUDPConnectivityFeedback;
//# sourceMappingURL=CheckNetworkUDPConnectivityFeedback.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckVideoConnectivityFeedback.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckVideoConnectivityFeedback.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckVideoConnectivityFeedback = void 0;
var CheckVideoConnectivityFeedback;
(function (CheckVideoConnectivityFeedback) {
    CheckVideoConnectivityFeedback[CheckVideoConnectivityFeedback["Succeeded"] = 0] = "Succeeded";
    CheckVideoConnectivityFeedback[CheckVideoConnectivityFeedback["VideoInputRequestFailed"] = 1] = "VideoInputRequestFailed";
    CheckVideoConnectivityFeedback[CheckVideoConnectivityFeedback["VideoInputPermissionDenied"] = 2] = "VideoInputPermissionDenied";
    CheckVideoConnectivityFeedback[CheckVideoConnectivityFeedback["ConnectionFailed"] = 3] = "ConnectionFailed";
    CheckVideoConnectivityFeedback[CheckVideoConnectivityFeedback["VideoNotSent"] = 4] = "VideoNotSent";
})(CheckVideoConnectivityFeedback = exports.CheckVideoConnectivityFeedback || (exports.CheckVideoConnectivityFeedback = {}));
exports.default = CheckVideoConnectivityFeedback;
//# sourceMappingURL=CheckVideoConnectivityFeedback.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckVideoInputFeedback.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckVideoInputFeedback.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CheckVideoInputFeedback = void 0;
var CheckVideoInputFeedback;
(function (CheckVideoInputFeedback) {
    CheckVideoInputFeedback[CheckVideoInputFeedback["Succeeded"] = 0] = "Succeeded";
    CheckVideoInputFeedback[CheckVideoInputFeedback["Failed"] = 1] = "Failed";
    CheckVideoInputFeedback[CheckVideoInputFeedback["PermissionDenied"] = 2] = "PermissionDenied";
})(CheckVideoInputFeedback = exports.CheckVideoInputFeedback || (exports.CheckVideoInputFeedback = {}));
exports.default = CheckVideoInputFeedback;
//# sourceMappingURL=CheckVideoInputFeedback.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/DefaultMeetingReadinessChecker.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/DefaultMeetingReadinessChecker.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultAudioMixController_1 = __webpack_require__(/*! ../audiomixcontroller/DefaultAudioMixController */ "./node_modules/amazon-chime-sdk-js/build/audiomixcontroller/DefaultAudioMixController.js");
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
const DefaultDeviceController_1 = __webpack_require__(/*! ../devicecontroller/DefaultDeviceController */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/DefaultDeviceController.js");
const PermissionDeniedError_1 = __webpack_require__(/*! ../devicecontroller/PermissionDeniedError */ "./node_modules/amazon-chime-sdk-js/build/devicecontroller/PermissionDeniedError.js");
const TimeoutScheduler_1 = __webpack_require__(/*! ../scheduler/TimeoutScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/TimeoutScheduler.js");
const BaseTask_1 = __webpack_require__(/*! ../task/BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
const TimeoutTask_1 = __webpack_require__(/*! ../task/TimeoutTask */ "./node_modules/amazon-chime-sdk-js/build/task/TimeoutTask.js");
const CheckAudioConnectivityFeedback_1 = __webpack_require__(/*! ./CheckAudioConnectivityFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioConnectivityFeedback.js");
const CheckAudioInputFeedback_1 = __webpack_require__(/*! ./CheckAudioInputFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioInputFeedback.js");
const CheckAudioOutputFeedback_1 = __webpack_require__(/*! ./CheckAudioOutputFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckAudioOutputFeedback.js");
const CheckCameraResolutionFeedback_1 = __webpack_require__(/*! ./CheckCameraResolutionFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckCameraResolutionFeedback.js");
const CheckContentShareConnectivityFeedback_1 = __webpack_require__(/*! ./CheckContentShareConnectivityFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckContentShareConnectivityFeedback.js");
const CheckNetworkTCPConnectivityFeedback_1 = __webpack_require__(/*! ./CheckNetworkTCPConnectivityFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckNetworkTCPConnectivityFeedback.js");
const CheckNetworkUDPConnectivityFeedback_1 = __webpack_require__(/*! ./CheckNetworkUDPConnectivityFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckNetworkUDPConnectivityFeedback.js");
const CheckVideoConnectivityFeedback_1 = __webpack_require__(/*! ./CheckVideoConnectivityFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckVideoConnectivityFeedback.js");
const CheckVideoInputFeedback_1 = __webpack_require__(/*! ./CheckVideoInputFeedback */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/CheckVideoInputFeedback.js");
const MeetingReadinessCheckerConfiguration_1 = __webpack_require__(/*! ./MeetingReadinessCheckerConfiguration */ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/MeetingReadinessCheckerConfiguration.js");
class DefaultMeetingReadinessChecker {
    constructor(logger, meetingSession, configuration = new MeetingReadinessCheckerConfiguration_1.default()) {
        this.logger = logger;
        this.meetingSession = meetingSession;
        this.configuration = configuration;
        this.browserBehavior = new DefaultBrowserBehavior_1.default();
    }
    static delay(timeoutMs) {
        return __awaiter(this, void 0, void 0, function* () {
            yield new Promise(resolve => new TimeoutScheduler_1.default(timeoutMs).start(resolve));
        });
    }
    checkAudioInput(audioInputDeviceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.meetingSession.audioVideo.chooseAudioInputDevice(audioInputDeviceInfo);
                yield this.meetingSession.audioVideo.chooseAudioInputDevice(null);
                return CheckAudioInputFeedback_1.default.Succeeded;
            }
            catch (error) {
                this.logger.error(`MeetingReadinessChecker: Audio input check failed with error ${error}`);
                if (error instanceof PermissionDeniedError_1.default) {
                    return CheckAudioInputFeedback_1.default.PermissionDenied;
                }
                return CheckAudioInputFeedback_1.default.Failed;
            }
        });
    }
    checkAudioOutput(audioOutputDeviceInfo, audioOutputVerificationCallback, audioElement = null) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const audioOutputDeviceId = audioOutputDeviceInfo && audioOutputDeviceInfo.deviceId
                    ? audioOutputDeviceInfo.deviceId
                    : '';
                yield this.playTone(audioOutputDeviceId, 440, audioElement);
                const userFeedback = yield audioOutputVerificationCallback();
                if (userFeedback) {
                    return CheckAudioOutputFeedback_1.default.Succeeded;
                }
                return CheckAudioOutputFeedback_1.default.Failed;
            }
            catch (error) {
                this.logger.error(`MeetingReadinessChecker: Audio output check failed with error: ${error}`);
                return CheckAudioOutputFeedback_1.default.Failed;
            }
            finally {
                this.stopTone();
            }
        });
    }
    playTone(sinkId, frequency, audioElement) {
        return __awaiter(this, void 0, void 0, function* () {
            const rampSec = 0.1;
            const maxGainValue = 0.1;
            if (this.oscillatorNode) {
                this.stopTone();
            }
            this.audioContext = DefaultDeviceController_1.default.getAudioContext();
            this.gainNode = this.audioContext.createGain();
            this.gainNode.gain.value = 0;
            this.oscillatorNode = this.audioContext.createOscillator();
            this.oscillatorNode.frequency.value = frequency;
            this.oscillatorNode.connect(this.gainNode);
            this.destinationStream = this.audioContext.createMediaStreamDestination();
            this.gainNode.connect(this.destinationStream);
            const currentTime = this.audioContext.currentTime;
            const startTime = currentTime + 0.1;
            this.gainNode.gain.linearRampToValueAtTime(0, startTime);
            this.gainNode.gain.linearRampToValueAtTime(maxGainValue, startTime + rampSec);
            this.oscillatorNode.start();
            // Because we always use `DefaultAudioMixController`, and both this class
            // and DAMC use `DefaultBrowserBehavior`, it is not possible for the `bindAudioDevice` call here to throw.
            // Nevertheless, we `catch` here and disable code coverage.
            const audioMixController = new DefaultAudioMixController_1.default(this.logger);
            try {
                if (this.browserBehavior.supportsSetSinkId()) {
                    yield audioMixController.bindAudioDevice({ deviceId: sinkId });
                }
            }
            catch (e) {
                /* istanbul ignore next */
                this.logger.error(`Failed to bind audio device: ${e}`);
            }
            try {
                yield audioMixController.bindAudioElement(audioElement || new Audio());
            }
            catch (e) {
                this.logger.error(`Failed to bind audio element: ${e}`);
            }
            yield audioMixController.bindAudioStream(this.destinationStream.stream);
        });
    }
    stopTone() {
        if (!this.audioContext || !this.gainNode || !this.oscillatorNode || !this.destinationStream) {
            return;
        }
        const durationSec = 1;
        const rampSec = 0.1;
        const maxGainValue = 0.1;
        const currentTime = this.audioContext.currentTime;
        this.gainNode.gain.linearRampToValueAtTime(maxGainValue, currentTime + rampSec + durationSec);
        this.gainNode.gain.linearRampToValueAtTime(0, currentTime + rampSec * 2 + durationSec);
        this.oscillatorNode.stop();
        this.oscillatorNode.disconnect(this.gainNode);
        this.gainNode.disconnect(this.destinationStream);
        this.oscillatorNode = null;
        this.gainNode = null;
        this.destinationStream = null;
    }
    checkVideoInput(videoInputDeviceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.meetingSession.audioVideo.chooseVideoInputDevice(videoInputDeviceInfo);
                yield this.meetingSession.audioVideo.chooseVideoInputDevice(null);
                return CheckVideoInputFeedback_1.default.Succeeded;
            }
            catch (error) {
                this.logger.error(`MeetingReadinessChecker: Video check failed with error ${error}`);
                if (error instanceof PermissionDeniedError_1.default) {
                    return CheckVideoInputFeedback_1.default.PermissionDenied;
                }
                return CheckVideoInputFeedback_1.default.Failed;
            }
        });
    }
    checkCameraResolution(videoInputDevice, width, height) {
        return __awaiter(this, void 0, void 0, function* () {
            const videoConstraint = {
                video: this.calculateVideoConstraint(videoInputDevice, width, height),
            };
            let stream;
            try {
                stream = yield navigator.mediaDevices.getUserMedia(videoConstraint);
            }
            catch (error) {
                this.logger.error(`MeetingReadinessChecker: Camera resolution check with width: ${width} height ${height} failed with error ${error}`);
                if (error && error.name === 'OverconstrainedError') {
                    return CheckCameraResolutionFeedback_1.default.ResolutionNotSupported;
                }
                if (error && error.name === 'NotAllowedError') {
                    return CheckCameraResolutionFeedback_1.default.PermissionDenied;
                }
                return CheckCameraResolutionFeedback_1.default.Failed;
            }
            finally {
                if (stream) {
                    stream.getTracks().forEach(function (track) {
                        track.stop();
                    });
                }
            }
            return CheckCameraResolutionFeedback_1.default.Succeeded;
        });
    }
    calculateVideoConstraint(videoInputDevice, width, height) {
        const dimension = this.browserBehavior.requiresResolutionAlignment(width, height);
        const trackConstraints = {};
        if (this.browserBehavior.requiresNoExactMediaStreamConstraints()) {
            trackConstraints.deviceId = videoInputDevice.deviceId;
            trackConstraints.width = width;
            trackConstraints.height = height;
        }
        else {
            trackConstraints.deviceId = { exact: videoInputDevice.deviceId };
            trackConstraints.width = { exact: dimension[0] };
            trackConstraints.height = { exact: dimension[1] };
        }
        return trackConstraints;
    }
    checkContentShareConnectivity(sourceId) {
        return __awaiter(this, void 0, void 0, function* () {
            let isContentShareStarted = false;
            let isAudioVideoStarted = false;
            const contentShareObserver = {
                contentShareDidStart: () => {
                    isContentShareStarted = true;
                },
            };
            const observer = {
                audioVideoDidStart: () => {
                    isAudioVideoStarted = true;
                },
            };
            try {
                this.meetingSession.audioVideo.addObserver(observer);
                this.meetingSession.audioVideo.start();
                this.meetingSession.audioVideo.addContentShareObserver(contentShareObserver);
                yield this.meetingSession.audioVideo.startContentShareFromScreenCapture(sourceId);
                yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {
                    return isAudioVideoStarted && isContentShareStarted;
                }));
                if (!isAudioVideoStarted) {
                    return CheckContentShareConnectivityFeedback_1.default.ConnectionFailed;
                }
                yield this.stopMeeting();
                return isContentShareStarted
                    ? CheckContentShareConnectivityFeedback_1.default.Succeeded
                    : CheckContentShareConnectivityFeedback_1.default.TimedOut;
            }
            catch (error) {
                this.logger.error(`MeetingReadinessChecker: Content share check failed with error ${error}`);
                if (error.name === 'NotAllowedError') {
                    return CheckContentShareConnectivityFeedback_1.default.PermissionDenied;
                }
                else {
                    return CheckContentShareConnectivityFeedback_1.default.Failed;
                }
            }
            finally {
                this.meetingSession.audioVideo.removeObserver(observer);
                this.meetingSession.audioVideo.stopContentShare();
                this.meetingSession.audioVideo.removeContentShareObserver(contentShareObserver);
            }
        });
    }
    checkAudioConnectivity(audioInputDeviceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            let audioPresence = false;
            const audioVideo = this.meetingSession.audioVideo;
            const attendeePresenceHandler = (attendeeId, present, _externalUserId, _dropped) => {
                if (attendeeId === this.meetingSession.configuration.credentials.attendeeId && present) {
                    audioPresence = true;
                }
            };
            try {
                yield audioVideo.chooseAudioInputDevice(audioInputDeviceInfo);
            }
            catch (error) {
                this.logger.error(`MeetingReadinessChecker: Failed to get audio input device with error ${error}`);
                if (error instanceof PermissionDeniedError_1.default) {
                    return CheckAudioConnectivityFeedback_1.default.AudioInputPermissionDenied;
                }
                return CheckAudioConnectivityFeedback_1.default.AudioInputRequestFailed;
            }
            audioVideo.realtimeSubscribeToAttendeeIdPresence(attendeePresenceHandler);
            if (!(yield this.startMeeting())) {
                audioVideo.realtimeUnsubscribeToAttendeeIdPresence(attendeePresenceHandler);
                try {
                    yield this.meetingSession.audioVideo.chooseAudioInputDevice(null);
                }
                catch (e) {
                    this.logger.error(`MeetingReadinessChecker: Failed to choose null device with error ${e}`);
                }
                return CheckAudioConnectivityFeedback_1.default.ConnectionFailed;
            }
            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {
                return audioPresence;
            }));
            audioVideo.realtimeUnsubscribeToAttendeeIdPresence(attendeePresenceHandler);
            yield this.stopMeeting();
            try {
                yield this.meetingSession.audioVideo.chooseAudioInputDevice(null);
            }
            catch (e) {
                this.logger.error(`MeetingReadinessChecker: Failed to choose null device with error ${e}`);
            }
            return audioPresence
                ? CheckAudioConnectivityFeedback_1.default.Succeeded
                : CheckAudioConnectivityFeedback_1.default.AudioNotReceived;
        });
    }
    checkVideoConnectivity(videoInputDeviceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const audioVideo = this.meetingSession.audioVideo;
            try {
                yield audioVideo.chooseVideoInputDevice(videoInputDeviceInfo);
            }
            catch (error) {
                this.logger.error(`MeetingReadinessChecker: Failed to get video input device with error ${error}`);
                if (error instanceof PermissionDeniedError_1.default) {
                    return CheckVideoConnectivityFeedback_1.default.VideoInputPermissionDenied;
                }
                return CheckVideoConnectivityFeedback_1.default.VideoInputRequestFailed;
            }
            if (!(yield this.startMeeting())) {
                return CheckVideoConnectivityFeedback_1.default.ConnectionFailed;
            }
            let packetsSent = 0;
            audioVideo.startLocalVideoTile();
            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {
                const rawStats = yield audioVideo.getRTCPeerConnectionStats();
                if (rawStats) {
                    rawStats.forEach(report => {
                        if (report.type === 'outbound-rtp' && report.mediaType === 'video') {
                            packetsSent = report.packetsSent;
                        }
                    });
                }
                return packetsSent > 0;
            }));
            audioVideo.stopLocalVideoTile();
            yield this.stopMeeting();
            if (packetsSent <= 0) {
                return CheckVideoConnectivityFeedback_1.default.VideoNotSent;
            }
            return CheckVideoConnectivityFeedback_1.default.Succeeded;
        });
    }
    checkNetworkUDPConnectivity() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.originalURLRewriter = this.meetingSession.configuration.urls.urlRewriter;
            }
            catch (error) {
                this.logger.error(`MeetingSessionConfiguration.urls doesn't exist. Error: ${error}`);
                return CheckNetworkUDPConnectivityFeedback_1.default.MeetingSessionURLsNotInitialized;
            }
            this.meetingSession.configuration.urls.urlRewriter = (uri) => {
                const transformedUri = this.originalURLRewriter(uri);
                if (transformedUri.includes('transport=tcp')) {
                    return '';
                }
                return transformedUri;
            };
            const audioVideo = this.meetingSession.audioVideo;
            if (!(yield this.startMeeting())) {
                this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;
                return CheckNetworkUDPConnectivityFeedback_1.default.ConnectionFailed;
            }
            let candidatePairSucceed = false;
            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {
                const rawStats = yield audioVideo.getRTCPeerConnectionStats();
                if (rawStats) {
                    rawStats.forEach(report => {
                        if (report.type === 'candidate-pair' && report.state === 'succeeded') {
                            candidatePairSucceed = true;
                        }
                    });
                }
                return candidatePairSucceed;
            }));
            this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;
            yield this.stopMeeting();
            if (!candidatePairSucceed) {
                return CheckNetworkUDPConnectivityFeedback_1.default.ICENegotiationFailed;
            }
            return CheckNetworkUDPConnectivityFeedback_1.default.Succeeded;
        });
    }
    checkNetworkTCPConnectivity() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.originalURLRewriter = this.meetingSession.configuration.urls.urlRewriter;
            }
            catch (error) {
                this.logger.error(`MeetingSessionConfiguration.urls doesn't exist. Error: ${error}`);
                return CheckNetworkTCPConnectivityFeedback_1.default.MeetingSessionURLsNotInitialized;
            }
            this.meetingSession.configuration.urls.urlRewriter = (uri) => {
                const transformedUri = this.originalURLRewriter(uri);
                if (transformedUri.includes('transport=udp')) {
                    return '';
                }
                return transformedUri;
            };
            const audioVideo = this.meetingSession.audioVideo;
            if (!(yield this.startMeeting())) {
                this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;
                return CheckNetworkTCPConnectivityFeedback_1.default.ConnectionFailed;
            }
            let candidatePairSucceed = false;
            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {
                const rawStats = yield audioVideo.getRTCPeerConnectionStats();
                if (rawStats) {
                    rawStats.forEach(report => {
                        if (report.type === 'candidate-pair' && report.state === 'succeeded') {
                            candidatePairSucceed = true;
                        }
                    });
                }
                return candidatePairSucceed;
            }));
            this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;
            yield this.stopMeeting();
            if (!candidatePairSucceed) {
                return CheckNetworkTCPConnectivityFeedback_1.default.ICENegotiationFailed;
            }
            return CheckNetworkTCPConnectivityFeedback_1.default.Succeeded;
        });
    }
    startMeeting() {
        return __awaiter(this, void 0, void 0, function* () {
            let isStarted = false;
            const observer = {
                audioVideoDidStart: () => {
                    isStarted = true;
                },
            };
            this.meetingSession.audioVideo.addObserver(observer);
            this.meetingSession.audioVideo.start();
            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {
                return isStarted;
            }));
            this.meetingSession.audioVideo.removeObserver(observer);
            return isStarted;
        });
    }
    stopMeeting() {
        return __awaiter(this, void 0, void 0, function* () {
            let isStopped = false;
            const observer = {
                audioVideoDidStop: (_sessionStatus) => {
                    isStopped = true;
                },
            };
            this.meetingSession.audioVideo.addObserver(observer);
            this.meetingSession.audioVideo.stop();
            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {
                return isStopped;
            }));
            this.meetingSession.audioVideo.removeObserver(observer);
            return isStopped;
        });
    }
    executeTimeoutTask(conditionCheck) {
        return __awaiter(this, void 0, void 0, function* () {
            let isSuccess = false;
            class CheckForConditionTask extends BaseTask_1.default {
                constructor(logger, waitDurationMs) {
                    super(logger);
                    this.waitDurationMs = waitDurationMs;
                    this.isCancelled = false;
                }
                cancel() {
                    this.isCancelled = true;
                }
                run() {
                    return __awaiter(this, void 0, void 0, function* () {
                        while (!this.isCancelled) {
                            if (yield conditionCheck()) {
                                isSuccess = true;
                                break;
                            }
                            yield DefaultMeetingReadinessChecker.delay(this.waitDurationMs);
                        }
                    });
                }
            }
            const timeoutTask = new TimeoutTask_1.default(this.logger, new CheckForConditionTask(this.logger, this.configuration.waitDurationMs), this.configuration.timeoutMs);
            yield timeoutTask.run();
            return isSuccess;
        });
    }
}
exports.default = DefaultMeetingReadinessChecker;
//# sourceMappingURL=DefaultMeetingReadinessChecker.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/MeetingReadinessCheckerConfiguration.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingreadinesschecker/MeetingReadinessCheckerConfiguration.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[MeetingReadinessCheckerConfiguration]] includes custom settings used for MeetingReadinessChecker
 */
class MeetingReadinessCheckerConfiguration {
    constructor() {
        /**
         * Specify how long to wait for each check in a test.
         * If null, it will use the default value.
         */
        this.timeoutMs = 10000;
        /**
         * Specify the wait time before checking again when a check condition is not met.
         * If null, it will use the default value.
         */
        this.waitDurationMs = 3000;
    }
}
exports.default = MeetingReadinessCheckerConfiguration;
//# sourceMappingURL=MeetingReadinessCheckerConfiguration.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingsession/DefaultMeetingSession.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingsession/DefaultMeetingSession.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultAudioVideoController_1 = __webpack_require__(/*! ../audiovideocontroller/DefaultAudioVideoController */ "./node_modules/amazon-chime-sdk-js/build/audiovideocontroller/DefaultAudioVideoController.js");
const DefaultAudioVideoFacade_1 = __webpack_require__(/*! ../audiovideofacade/DefaultAudioVideoFacade */ "./node_modules/amazon-chime-sdk-js/build/audiovideofacade/DefaultAudioVideoFacade.js");
const FullJitterBackoff_1 = __webpack_require__(/*! ../backoff/FullJitterBackoff */ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoff.js");
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
const ContentShareMediaStreamBroker_1 = __webpack_require__(/*! ../contentsharecontroller/ContentShareMediaStreamBroker */ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/ContentShareMediaStreamBroker.js");
const DefaultContentShareController_1 = __webpack_require__(/*! ../contentsharecontroller/DefaultContentShareController */ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/DefaultContentShareController.js");
const DefaultReconnectController_1 = __webpack_require__(/*! ../reconnectcontroller/DefaultReconnectController */ "./node_modules/amazon-chime-sdk-js/build/reconnectcontroller/DefaultReconnectController.js");
const DefaultWebSocketAdapter_1 = __webpack_require__(/*! ../websocketadapter/DefaultWebSocketAdapter */ "./node_modules/amazon-chime-sdk-js/build/websocketadapter/DefaultWebSocketAdapter.js");
class DefaultMeetingSession {
    constructor(configuration, logger, deviceController) {
        this._configuration = configuration;
        this._logger = logger;
        this.checkBrowserSupportAndFeatureConfiguration();
        this._deviceController = deviceController;
        this.audioVideoController = new DefaultAudioVideoController_1.default(this._configuration, this._logger, new DefaultWebSocketAdapter_1.default(this._logger), deviceController, new DefaultReconnectController_1.default(DefaultMeetingSession.RECONNECT_TIMEOUT_MS, new FullJitterBackoff_1.default(DefaultMeetingSession.RECONNECT_FIXED_WAIT_MS, DefaultMeetingSession.RECONNECT_SHORT_BACKOFF_MS, DefaultMeetingSession.RECONNECT_LONG_BACKOFF_MS)));
        deviceController.bindToAudioVideoController(this.audioVideoController);
        const contentShareMediaStreamBroker = new ContentShareMediaStreamBroker_1.default(this._logger);
        this.contentShareController = new DefaultContentShareController_1.default(contentShareMediaStreamBroker, new DefaultAudioVideoController_1.default(DefaultContentShareController_1.default.createContentShareMeetingSessionConfigure(this._configuration), this._logger, new DefaultWebSocketAdapter_1.default(this._logger), contentShareMediaStreamBroker, new DefaultReconnectController_1.default(DefaultMeetingSession.RECONNECT_TIMEOUT_MS, new FullJitterBackoff_1.default(DefaultMeetingSession.RECONNECT_FIXED_WAIT_MS, DefaultMeetingSession.RECONNECT_SHORT_BACKOFF_MS, DefaultMeetingSession.RECONNECT_LONG_BACKOFF_MS))), this.audioVideoController);
        this.audioVideoFacade = new DefaultAudioVideoFacade_1.default(this.audioVideoController, this.audioVideoController.videoTileController, this.audioVideoController.realtimeController, this.audioVideoController.audioMixController, this._deviceController, this.contentShareController);
    }
    get configuration() {
        return this._configuration;
    }
    get logger() {
        return this._logger;
    }
    get audioVideo() {
        return this.audioVideoFacade;
    }
    get contentShare() {
        return this.contentShareController;
    }
    get deviceController() {
        return this._deviceController;
    }
    checkBrowserSupportAndFeatureConfiguration() {
        const browserBehavior = new DefaultBrowserBehavior_1.default();
        const browser = `${browserBehavior.name()} ${browserBehavior.majorVersion()} (${browserBehavior.version()})`;
        this.logger.info(`browser is ${browser}`);
        if (!browserBehavior.isSupported()) {
            this.logger.warn('this browser is not currently supported. ' +
                'Stability may suffer. ' +
                `Supported browsers are: ${browserBehavior.supportString()}.`);
        }
        if (this._configuration.enableUnifiedPlanForChromiumBasedBrowsers) {
            if (browserBehavior.hasChromiumWebRTC()) {
                this.logger.info('WebRTC unified plan for Chromium-based browsers is enabled');
            }
            else {
                this.logger.info(`WebRTC unified plan is required for ${browserBehavior.name()}`);
            }
        }
        if (this._configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers) {
            if (!this._configuration.enableUnifiedPlanForChromiumBasedBrowsers) {
                this._configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = false;
                this.logger.info('Simulcast requires enabling WebRTC Unified Plan for Chromium-based browsers');
            }
            else if (browserBehavior.hasChromiumWebRTC()) {
                this.logger.info(`Simulcast is enabled for ${browserBehavior.name()}`);
            }
            else {
                this._configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = false;
                this.logger.info('Simulcast requires WebRTC Unified Plan and is only supported on Chromium-based browsers');
            }
        }
    }
}
exports.default = DefaultMeetingSession;
DefaultMeetingSession.RECONNECT_TIMEOUT_MS = 120 * 1000;
DefaultMeetingSession.RECONNECT_FIXED_WAIT_MS = 0;
DefaultMeetingSession.RECONNECT_SHORT_BACKOFF_MS = 1 * 1000;
DefaultMeetingSession.RECONNECT_LONG_BACKOFF_MS = 5 * 1000;
//# sourceMappingURL=DefaultMeetingSession.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionConfiguration.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionConfiguration.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ConnectionHealthPolicyConfiguration_1 = __webpack_require__(/*! ../connectionhealthpolicy/ConnectionHealthPolicyConfiguration */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ConnectionHealthPolicyConfiguration.js");
const AllHighestVideoBandwidthPolicy_1 = __webpack_require__(/*! ../videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy */ "./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy.js");
const NScaleVideoUplinkBandwidthPolicy_1 = __webpack_require__(/*! ../videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy */ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy.js");
const MeetingSessionCredentials_1 = __webpack_require__(/*! ./MeetingSessionCredentials */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionCredentials.js");
const MeetingSessionURLs_1 = __webpack_require__(/*! ./MeetingSessionURLs */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionURLs.js");
/**
 * [[MeetingSessionConfiguration]] contains the information necessary to start
 * a session.
 */
class MeetingSessionConfiguration {
    /**
     * Constructs a MeetingSessionConfiguration optionally with a chime:CreateMeeting and
     * chime:CreateAttendee response. You can pass in either a JSON object containing the
     * responses, or a JSON object containing the information in the Meeting and Attendee
     * root-level fields. Examples:
     *
     * ```
     * const configuration = new MeetingSessionConfiguration({
     *   "Meeting": {
     *      "MeetingId": "...",
     *      "MediaPlacement": {
     *        "AudioHostUrl": "...",
     *        "ScreenDataUrl": "...",
     *        "ScreenSharingUrl": "...",
     *        "ScreenViewingUrl": "...",
     *        "SignalingUrl": "...",
     *        "TurnControlUrl": "..."
     *      }
     *    }
     *   }
     * }, {
     *   "Attendee": {
     *     "ExternalUserId": "...",
     *     "AttendeeId": "...",
     *     "JoinToken": "..."
     *   }
     * });
     * ```
     *
     * ```
     * const configuration = new MeetingSessionConfiguration({
     *   "MeetingId": "...",
     *   "MediaPlacement": {
     *     "AudioHostUrl": "...",
     *     "ScreenDataUrl": "...",
     *     "ScreenSharingUrl": "...",
     *     "ScreenViewingUrl": "...",
     *     "SignalingUrl": "...",
     *     "TurnControlUrl": "..."
     *   }
     * }, {
     *   "ExternalUserId": "...",
     *   "AttendeeId": "...",
     *   "JoinToken": "..."
     * });
     * ```
     */
    constructor(createMeetingResponse, createAttendeeResponse) {
        /**
         * The id of the meeting the session is joining.
         */
        this.meetingId = null;
        /**
         * The external meeting id of the meeting the session is joining.
         */
        this.externalMeetingId = null;
        /**
         * The credentials used to authenticate the session.
         */
        this.credentials = null;
        /**
         * The URLs the session uses to reach the meeting service.
         */
        this.urls = null;
        /**
         * Maximum amount of time in milliseconds to allow for connecting.
         */
        this.connectionTimeoutMs = 15000;
        /**
         * Maximum amount of time in milliseconds to allow for a screen sharing connection.
         */
        this.screenSharingTimeoutMs = 5000;
        /**
         * Maximum amount of time in milliseconds to allow for a screen viewing connection.
         */
        this.screenViewingTimeoutMs = 5000;
        /**
         * Maximum amount of time in milliseconds to wait for the current attendee to be present
         * after initial connection.
         */
        this.attendeePresenceTimeoutMs = 0;
        /**
         * Configuration for connection health policies: reconnection, unusable audio warning connection,
         * and signal strength bars connection.
         */
        this.connectionHealthPolicyConfiguration = new ConnectionHealthPolicyConfiguration_1.default();
        /**
         * Feature flag to enable Chromium-based browsers
         */
        this.enableUnifiedPlanForChromiumBasedBrowsers = true;
        /**
         * Feature flag to enable Simulcast
         */
        this.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = false;
        /**
         * Video downlink bandwidth policy to determine which remote videos
         * are subscribed to.
         */
        this.videoDownlinkBandwidthPolicy = null;
        /**
         * Video uplink bandwidth policy to determine the bandwidth constraints
         * of the local video.
         */
        this.videoUplinkBandwidthPolicy = null;
        if (createMeetingResponse) {
            createMeetingResponse = this.toLowerCasePropertyNames(createMeetingResponse);
            if (createMeetingResponse.meeting) {
                createMeetingResponse = createMeetingResponse.meeting;
            }
            this.meetingId = createMeetingResponse.meetingid;
            this.externalMeetingId = createMeetingResponse.externalmeetingid;
            this.urls = new MeetingSessionURLs_1.default();
            this.urls.audioHostURL = createMeetingResponse.mediaplacement.audiohosturl;
            this.urls.screenDataURL = createMeetingResponse.mediaplacement.screendataurl;
            this.urls.screenSharingURL = createMeetingResponse.mediaplacement.screensharingurl;
            this.urls.screenViewingURL = createMeetingResponse.mediaplacement.screenviewingurl;
            this.urls.signalingURL = createMeetingResponse.mediaplacement.signalingurl;
            this.urls.turnControlURL = createMeetingResponse.mediaplacement.turncontrolurl;
        }
        if (createAttendeeResponse) {
            createAttendeeResponse = this.toLowerCasePropertyNames(createAttendeeResponse);
            if (createAttendeeResponse.attendee) {
                createAttendeeResponse = createAttendeeResponse.attendee;
            }
            this.credentials = new MeetingSessionCredentials_1.default();
            this.credentials.attendeeId = createAttendeeResponse.attendeeid;
            this.credentials.externalUserId = createAttendeeResponse.externaluserid;
            this.credentials.joinToken = createAttendeeResponse.jointoken;
        }
        // simulcast feature flag will override the following policies when DefaultAudioVideoController is created
        this.videoDownlinkBandwidthPolicy = new AllHighestVideoBandwidthPolicy_1.default(this.credentials ? this.credentials.attendeeId : null);
        this.videoUplinkBandwidthPolicy = new NScaleVideoUplinkBandwidthPolicy_1.default(this.credentials ? this.credentials.attendeeId : null);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    toLowerCasePropertyNames(input) {
        if (input === null) {
            return null;
        }
        else if (typeof input !== 'object') {
            return input;
        }
        else if (Array.isArray(input)) {
            if (input.length) {
                return input.map(this.toLowerCasePropertyNames);
            } else {
                return input;
            }
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return Object.keys(input).reduce((result, key) => {
            const value = input[key];
            const newValue = typeof value === 'object' ? this.toLowerCasePropertyNames(value) : value;
            result[key.toLowerCase()] = newValue;
            return result;
        }, {});
    }
}
exports.default = MeetingSessionConfiguration;
//# sourceMappingURL=MeetingSessionConfiguration.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionCredentials.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionCredentials.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[MeetingSessionCredentials]] includes the credentials used to authenticate
 * the attendee on the meeting
 */
class MeetingSessionCredentials {
    constructor() {
        /**
         * The attendee id for these credentials.
         */
        this.attendeeId = null;
        /**
         * The external user id associated with the attendee.
         */
        this.externalUserId = null;
        /**
         * If set, the session will be authenticated with a join token.
         */
        this.joinToken = null;
    }
    /**
     * Overrides JSON serialization so that join token is redacted.
     */
    toJSON() {
        return {
            attendeeId: this.attendeeId,
            joinToken: this.joinToken === null ? null : '<redacted>',
        };
    }
}
exports.default = MeetingSessionCredentials;
//# sourceMappingURL=MeetingSessionCredentials.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionLifecycleEvent.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionLifecycleEvent.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MeetingSessionLifecycleEvent = void 0;
/**
 * [[MeetingSessionLifecycleEvent]] indicates the lifecycle status.
 * Add new enums to the bottom. We depend on these numbers for analytics.
 */
var MeetingSessionLifecycleEvent;
(function (MeetingSessionLifecycleEvent) {
    /**
     * The session is connecting, either to start a new call, or reconnect to an existing one.
     */
    MeetingSessionLifecycleEvent[MeetingSessionLifecycleEvent["Connecting"] = 0] = "Connecting";
    /**
     * The session successfully arrived in the started state either for the first time or
     * due to a change in connection type.
     */
    MeetingSessionLifecycleEvent[MeetingSessionLifecycleEvent["Started"] = 1] = "Started";
    /**
     * The session came to a stop, either from leaving or due to a failure.
     */
    MeetingSessionLifecycleEvent[MeetingSessionLifecycleEvent["Stopped"] = 2] = "Stopped";
})(MeetingSessionLifecycleEvent = exports.MeetingSessionLifecycleEvent || (exports.MeetingSessionLifecycleEvent = {}));
exports.default = MeetingSessionLifecycleEvent;
//# sourceMappingURL=MeetingSessionLifecycleEvent.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionLifecycleEventCondition.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionLifecycleEventCondition.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MeetingSessionLifecycleEventCondition = void 0;
/**
 * [[MeetingSessionLifecycleEventCondition]] indicates the lifecycle event condition.
 * Add new enums to the bottom. We depend on these numbers for analytics.
 */
var MeetingSessionLifecycleEventCondition;
(function (MeetingSessionLifecycleEventCondition) {
    /**
     * The session is connecting for the first time.
     */
    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition["ConnectingNew"] = 0] = "ConnectingNew";
    /**
     * The session was connected before and is now reconnecting.
     */
    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition["ReconnectingExisting"] = 1] = "ReconnectingExisting";
    /**
     * The session successfully arrived in the started state for the first time.
     */
    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition["StartedNew"] = 2] = "StartedNew";
    /**
     * The session successfully arrived in the started state but was connected before.
     * This can happen, for example, when the connection type changes.
     */
    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition["StartedExisting"] = 3] = "StartedExisting";
    /**
     * The session successfully arrived in the started state following a reconnect.
     */
    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition["StartedAfterReconnect"] = 4] = "StartedAfterReconnect";
    /**
     * The session stopped cleanly, probably due to leaving the call.
     */
    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition["StoppedCleanly"] = 5] = "StoppedCleanly";
    /**
     * The session stopped due to a failure. A status code will indicate the cause of
     * the failure.
     */
    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition["StoppedWithFailure"] = 6] = "StoppedWithFailure";
})(MeetingSessionLifecycleEventCondition = exports.MeetingSessionLifecycleEventCondition || (exports.MeetingSessionLifecycleEventCondition = {}));
exports.default = MeetingSessionLifecycleEventCondition;
//# sourceMappingURL=MeetingSessionLifecycleEventCondition.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatus.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatus.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const MeetingSessionStatusCode_1 = __webpack_require__(/*! ./MeetingSessionStatusCode */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js");
/**
 * [[MeetingSessionStatus]] indicates a status received regarding the session.
 */
class MeetingSessionStatus {
    constructor(_statusCode) {
        this._statusCode = _statusCode;
    }
    statusCode() {
        return this._statusCode;
    }
    isFailure() {
        switch (this._statusCode) {
            case MeetingSessionStatusCode_1.default.AudioAuthenticationRejected:
            case MeetingSessionStatusCode_1.default.AudioCallAtCapacity:
            case MeetingSessionStatusCode_1.default.AudioInternalServerError:
            case MeetingSessionStatusCode_1.default.AudioServiceUnavailable:
            case MeetingSessionStatusCode_1.default.AudioDisconnected:
            case MeetingSessionStatusCode_1.default.VideoCallAtSourceCapacity:
            case MeetingSessionStatusCode_1.default.SignalingBadRequest:
            case MeetingSessionStatusCode_1.default.SignalingInternalServerError:
            case MeetingSessionStatusCode_1.default.SignalingRequestFailed:
            case MeetingSessionStatusCode_1.default.StateMachineTransitionFailed:
            case MeetingSessionStatusCode_1.default.ICEGatheringTimeoutWorkaround:
            case MeetingSessionStatusCode_1.default.ConnectionHealthReconnect:
            case MeetingSessionStatusCode_1.default.RealtimeApiFailed:
            case MeetingSessionStatusCode_1.default.TaskFailed:
            case MeetingSessionStatusCode_1.default.NoAttendeePresent:
                return true;
            default:
                return false;
        }
    }
    isTerminal() {
        switch (this._statusCode) {
            case MeetingSessionStatusCode_1.default.Left:
            case MeetingSessionStatusCode_1.default.AudioJoinedFromAnotherDevice:
            case MeetingSessionStatusCode_1.default.AudioAuthenticationRejected:
            case MeetingSessionStatusCode_1.default.AudioCallAtCapacity:
            case MeetingSessionStatusCode_1.default.MeetingEnded:
            case MeetingSessionStatusCode_1.default.AudioDisconnected:
            case MeetingSessionStatusCode_1.default.TURNCredentialsForbidden:
            case MeetingSessionStatusCode_1.default.SignalingBadRequest:
            case MeetingSessionStatusCode_1.default.SignalingRequestFailed:
            case MeetingSessionStatusCode_1.default.VideoCallAtSourceCapacity:
            case MeetingSessionStatusCode_1.default.RealtimeApiFailed:
                return true;
            default:
                return false;
        }
    }
    isAudioConnectionFailure() {
        switch (this._statusCode) {
            case MeetingSessionStatusCode_1.default.AudioAuthenticationRejected:
            case MeetingSessionStatusCode_1.default.AudioInternalServerError:
            case MeetingSessionStatusCode_1.default.AudioServiceUnavailable:
            case MeetingSessionStatusCode_1.default.StateMachineTransitionFailed:
            case MeetingSessionStatusCode_1.default.ICEGatheringTimeoutWorkaround:
            case MeetingSessionStatusCode_1.default.SignalingBadRequest:
            case MeetingSessionStatusCode_1.default.SignalingInternalServerError:
            case MeetingSessionStatusCode_1.default.SignalingRequestFailed:
            case MeetingSessionStatusCode_1.default.RealtimeApiFailed:
            case MeetingSessionStatusCode_1.default.NoAttendeePresent:
                return true;
            default:
                return false;
        }
    }
    static fromSignalFrame(frame) {
        if (frame.error && frame.error.status) {
            return this.fromSignalingStatus(frame.error.status);
        }
        else if (frame.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_STATUS) {
            if (frame.audioStatus) {
                return this.fromAudioStatus(frame.audioStatus.audioStatus);
            }
            return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingRequestFailed);
        }
        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);
    }
    static fromAudioStatus(status) {
        // TODO: Add these numbers to proto definition and reference them here.
        switch (status) {
            case 200:
                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);
            case 301:
                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioJoinedFromAnotherDevice);
            case 302:
                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioDisconnectAudio);
            case 403:
                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioAuthenticationRejected);
            case 409:
                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioCallAtCapacity);
            case 410:
                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.MeetingEnded);
            case 500:
                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioInternalServerError);
            case 503:
                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioServiceUnavailable);
            default:
                switch (Math.floor(status / 100)) {
                    case 2:
                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);
                    default:
                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioDisconnected);
                }
        }
    }
    static fromSignalingStatus(status) {
        // TODO: Add these numbers to proto definition and reference them here.
        switch (status) {
            case 206:
                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.VideoCallSwitchToViewOnly);
            case 509:
                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.VideoCallAtSourceCapacity);
            default:
                switch (Math.floor(status / 100)) {
                    case 2:
                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);
                    case 4:
                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingBadRequest);
                    case 5:
                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingInternalServerError);
                    default:
                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingRequestFailed);
                }
        }
    }
}
exports.default = MeetingSessionStatus;
//# sourceMappingURL=MeetingSessionStatus.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MeetingSessionStatusCode = void 0;
var MeetingSessionStatusCode;
(function (MeetingSessionStatusCode) {
    /**
     * Everything is OK so far.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["OK"] = 0] = "OK";
    /**
     * The attendee left the meeting normally.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["Left"] = 1] = "Left";
    /**
     * The attendee joined from another device.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["AudioJoinedFromAnotherDevice"] = 2] = "AudioJoinedFromAnotherDevice";
    /**
     * The attendee should explicitly switch itself from joined with audio to
     * checked-in.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["AudioDisconnectAudio"] = 3] = "AudioDisconnectAudio";
    /**
     * Authentication was rejected. The client is not allowed on this meeting.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["AudioAuthenticationRejected"] = 4] = "AudioAuthenticationRejected";
    /**
     * The client can not join because the meeting is at capacity.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["AudioCallAtCapacity"] = 5] = "AudioCallAtCapacity";
    /**
     * Deprecated. The meeting has ended. This is a legacy alias for MeetingEnded and will
     * be removed in v2.0.0.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["AudioCallEnded"] = 6] = "AudioCallEnded";
    /**
     * Deprecated. The meeting has ended. This is a legacy alias for MeetingEnded and will
     * be removed in v2.0.0.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["TURNMeetingEnded"] = 6] = "TURNMeetingEnded";
    /**
     * The meeting has ended.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["MeetingEnded"] = 6] = "MeetingEnded";
    /**
     * There was an internal server error with the audio leg.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["AudioInternalServerError"] = 7] = "AudioInternalServerError";
    /**
     * Could not connect the audio leg due to the service being unavailable.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["AudioServiceUnavailable"] = 8] = "AudioServiceUnavailable";
    /**
     * The audio leg failed.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["AudioDisconnected"] = 9] = "AudioDisconnected";
    /**
     * The client has asked to send and receive video, but it is only possible to
     * continue in view-only mode (receiving video). This should be handled by
     * explicitly switching to view-only mode.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["VideoCallSwitchToViewOnly"] = 10] = "VideoCallSwitchToViewOnly";
    /** This can happen when you attempt to join a video meeting in "send only" mode
    (transmitting your camera, but not receiving anything -- this isn't something
    we ever do in practice, but it is supported on the server). It should be
    treated as "fatal" and probably should not be retried (despite the 5xx nature). */
    MeetingSessionStatusCode[MeetingSessionStatusCode["VideoCallAtSourceCapacity"] = 11] = "VideoCallAtSourceCapacity";
    /**
     * Bad request on JOIN or SUBSCRIBE
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["SignalingBadRequest"] = 12] = "SignalingBadRequest";
    /**
     * Internal server error on JOIN or SUBSCRIBE
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["SignalingInternalServerError"] = 13] = "SignalingInternalServerError";
    /**
     * Received unknown signaling error frame
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["SignalingRequestFailed"] = 14] = "SignalingRequestFailed";
    /**
     * Failed to transition between two states for some reason
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["StateMachineTransitionFailed"] = 15] = "StateMachineTransitionFailed";
    /**
     * Timed out gathering ICE candidates. If in Chrome, this could be an
     * indication that the browser is in a bad state due to a VPN reconnect and
     * the user should try quitting and relaunching the app. See:
     * https://bugs.chromium.org/p/webrtc/issues/detail?id=9097
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["ICEGatheringTimeoutWorkaround"] = 16] = "ICEGatheringTimeoutWorkaround";
    /**
     * Due to connection health, a reconnect has been triggered.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["ConnectionHealthReconnect"] = 17] = "ConnectionHealthReconnect";
    /**
     * The realtime API failed in some way. This indicates a fatal problem.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["RealtimeApiFailed"] = 18] = "RealtimeApiFailed";
    /**
     * A task failed for an unknown reason.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["TaskFailed"] = 19] = "TaskFailed";
    /**
     * Audio device has switched.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["AudioDeviceSwitched"] = 20] = "AudioDeviceSwitched";
    /**
     * Session update produces incompatible SDP.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["IncompatibleSDP"] = 21] = "IncompatibleSDP";
    /**
     * This can happen when you attempt to join a meeting which has ended or attendee got removed
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["TURNCredentialsForbidden"] = 22] = "TURNCredentialsForbidden";
    /**
     * The attendee is not present.
     */
    MeetingSessionStatusCode[MeetingSessionStatusCode["NoAttendeePresent"] = 23] = "NoAttendeePresent";
})(MeetingSessionStatusCode = exports.MeetingSessionStatusCode || (exports.MeetingSessionStatusCode = {}));
exports.default = MeetingSessionStatusCode;
//# sourceMappingURL=MeetingSessionStatusCode.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionTURNCredentials.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionTURNCredentials.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[MeetingSessionTURNCredentials]] contains TURN credentials from the TURN server.
 */
class MeetingSessionTURNCredentials {
    constructor() {
        this.username = null;
        this.password = null;
        this.ttl = null;
        this.uris = null;
    }
}
exports.default = MeetingSessionTURNCredentials;
//# sourceMappingURL=MeetingSessionTURNCredentials.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionURLs.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionURLs.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[MeetingSessionURLs]] contains the URLs that will be used to reach the
 * meeting service.
 */
class MeetingSessionURLs {
    constructor() {
        /**
         * The audio host URL of the session
         */
        this._audioHostURL = null;
        /**
         * The screen data URL of the session
         */
        this._screenDataURL = null;
        /**
         * The screen sharing URL of the session
         */
        this._screenSharingURL = null;
        /**
         * The screen viewing URL of the session
         */
        this._screenViewingURL = null;
        /**
         * The signaling URL of the session
         */
        this._signalingURL = null;
        /**
         * The TURN control URL of the session
         */
        this._turnControlURL = null;
        /**
         * Function to transform URLs. Use this to rewrite URLs to traverse proxies.
         * The default implementation returns the original URL unchanged.
         */
        this.urlRewriter = (url) => {
            return url;
        };
    }
    /**
     * Gets the audio host URL after applying the urlRewriter function.
     */
    get audioHostURL() {
        return this.urlRewriter(this._audioHostURL);
    }
    /**
     * Sets the raw audio host URL.
     */
    set audioHostURL(value) {
        this._audioHostURL = value;
    }
    /**
     * Gets the screen data URL after applying the urlRewriter function.
     */
    get screenDataURL() {
        return this.urlRewriter(this._screenDataURL);
    }
    /**
     * Sets the raw screen data URL.
     */
    set screenDataURL(value) {
        this._screenDataURL = value;
    }
    /**
     * Gets the screen sharing URL after applying the urlRewriter function.
     */
    get screenSharingURL() {
        return this.urlRewriter(this._screenSharingURL);
    }
    /**
     * Sets the raw screen sharing URL.
     */
    set screenSharingURL(value) {
        this._screenSharingURL = value;
    }
    /**
     * Gets the screen viewing URL after applying the urlRewriter function.
     */
    get screenViewingURL() {
        return this.urlRewriter(this._screenViewingURL);
    }
    /**
     * Sets the raw screen viewing URL.
     */
    set screenViewingURL(value) {
        this._screenViewingURL = value;
    }
    /**
     * Gets the signaling URL after applying the urlRewriter function.
     */
    get signalingURL() {
        return this.urlRewriter(this._signalingURL);
    }
    /**
     * Sets the raw signaling URL.
     */
    set signalingURL(value) {
        this._signalingURL = value;
    }
    /**
     * Gets the TURN control URL after applying the urlRewriter function.
     */
    get turnControlURL() {
        return this.urlRewriter(this._turnControlURL);
    }
    /**
     * Sets the raw TURN control URL.
     */
    set turnControlURL(value) {
        this._turnControlURL = value;
    }
}
exports.default = MeetingSessionURLs;
//# sourceMappingURL=MeetingSessionURLs.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionVideoAvailability.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionVideoAvailability.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[MeetingSessionVideoAvailability]] contains the video availability information.
 */
class MeetingSessionVideoAvailability {
    constructor() {
        /**
         * Indicates whether one or more remote video streams
         * are available for streaming. This can be used to decide whether or not to
         * switch the connection type to include video.
         */
        this.remoteVideoAvailable = false;
        /**
         * Indicates whether the server has a slot available for
         * this client's local video tile. If the client is already sending a local
         * video tile, then this will be true. This property can be used to decide
         * whether to offer the option to start the local video tile.
         */
        this.canStartLocalVideo = false;
    }
    /**
     * Returns whether the fields are the same as that of another availability object.
     */
    equal(other) {
        return (this.remoteVideoAvailable === other.remoteVideoAvailable &&
            this.canStartLocalVideo === other.canStartLocalVideo);
    }
    /**
     * Returns a deep copy of this object.
     */
    clone() {
        const cloned = new MeetingSessionVideoAvailability();
        cloned.remoteVideoAvailable = this.remoteVideoAvailable;
        cloned.canStartLocalVideo = this.canStartLocalVideo;
        return cloned;
    }
}
exports.default = MeetingSessionVideoAvailability;
//# sourceMappingURL=MeetingSessionVideoAvailability.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/message/Message.js":
/*!*******************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/message/Message.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class Message {
    constructor(type, // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    headers, payload) {
        this.type = type;
        this.headers = headers;
        this.payload = payload;
    }
}
exports.default = Message;
//# sourceMappingURL=Message.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/messagingsession/DefaultMessagingSession.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/messagingsession/DefaultMessagingSession.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const FullJitterBackoff_1 = __webpack_require__(/*! ../backoff/FullJitterBackoff */ "./node_modules/amazon-chime-sdk-js/build/backoff/FullJitterBackoff.js");
const Message_1 = __webpack_require__(/*! ../message/Message */ "./node_modules/amazon-chime-sdk-js/build/message/Message.js");
const DefaultReconnectController_1 = __webpack_require__(/*! ../reconnectcontroller/DefaultReconnectController */ "./node_modules/amazon-chime-sdk-js/build/reconnectcontroller/DefaultReconnectController.js");
const AsyncScheduler_1 = __webpack_require__(/*! ../scheduler/AsyncScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js");
const DefaultSigV4_1 = __webpack_require__(/*! ../sigv4/DefaultSigV4 */ "./node_modules/amazon-chime-sdk-js/build/sigv4/DefaultSigV4.js");
const DefaultWebSocketAdapter_1 = __webpack_require__(/*! ../websocketadapter/DefaultWebSocketAdapter */ "./node_modules/amazon-chime-sdk-js/build/websocketadapter/DefaultWebSocketAdapter.js");
const WebSocketReadyState_1 = __webpack_require__(/*! ../websocketadapter/WebSocketReadyState */ "./node_modules/amazon-chime-sdk-js/build/websocketadapter/WebSocketReadyState.js");
class DefaultMessagingSession {
    constructor(configuration, logger, webSocket, reconnectController, sigV4) {
        this.configuration = configuration;
        this.logger = logger;
        this.webSocket = webSocket;
        this.reconnectController = reconnectController;
        this.sigV4 = sigV4;
        this.observerQueue = new Set();
        if (!this.webSocket) {
            this.webSocket = new DefaultWebSocketAdapter_1.default(this.logger);
        }
        if (!this.reconnectController) {
            this.reconnectController = new DefaultReconnectController_1.default(configuration.reconnectTimeoutMs, new FullJitterBackoff_1.default(configuration.reconnectFixedWaitMs, configuration.reconnectShortBackoffMs, configuration.reconnectLongBackoffMs));
        }
        if (!this.sigV4) {
            this.sigV4 = new DefaultSigV4_1.default(this.configuration.chimeClient, this.configuration.awsClient);
        }
    }
    addObserver(observer) {
        this.logger.info('adding messaging observer');
        this.observerQueue.add(observer);
    }
    removeObserver(observer) {
        this.logger.info('removing messaging observer');
        this.observerQueue.delete(observer);
    }
    start() {
        if (this.isClosed()) {
            this.startConnecting(false);
        }
        else {
            this.logger.info('messaging session already started');
        }
    }
    stop() {
        if (!this.isClosed()) {
            this.isClosing = true;
            this.webSocket.close();
        }
        else {
            this.logger.info('no existing connection needs closing');
        }
    }
    forEachObserver(observerFunc) {
        for (const observer of this.observerQueue) {
            new AsyncScheduler_1.default().start(() => {
                if (this.observerQueue.has(observer)) {
                    observerFunc(observer);
                }
            });
        }
    }
    setUpEventListeners() {
        this.webSocket.addEventListener('open', () => {
            this.openEventHandler();
        });
        this.webSocket.addEventListener('message', (event) => {
            this.receiveMessageHandler(event.data);
        });
        this.webSocket.addEventListener('close', (event) => {
            this.closeEventHandler(event);
        });
        this.webSocket.addEventListener('error', () => {
            this.logger.error(`WebSocket error`);
        });
    }
    startConnecting(reconnecting) {
        const signedUrl = this.prepareWebSocketUrl();
        this.logger.info(`opening connection to ${signedUrl}`);
        if (!reconnecting) {
            this.reconnectController.reset();
        }
        if (this.reconnectController.hasStartedConnectionAttempt()) {
            this.reconnectController.startedConnectionAttempt(false);
        }
        else {
            this.reconnectController.startedConnectionAttempt(true);
        }
        this.webSocket.create(signedUrl, [], true);
        this.forEachObserver(observer => {
            if (observer.messagingSessionDidStartConnecting) {
                observer.messagingSessionDidStartConnecting(reconnecting);
            }
        });
        this.setUpEventListeners();
    }
    prepareWebSocketUrl() {
        const queryParams = new Map();
        queryParams.set('userArn', [this.configuration.userArn]);
        queryParams.set('sessionId', [this.configuration.messagingSessionId]);
        return this.sigV4.signURL('GET', 'wss', 'chime', this.configuration.endpointUrl, '/connect', '', queryParams);
    }
    isClosed() {
        return (this.webSocket.readyState() === WebSocketReadyState_1.default.None ||
            this.webSocket.readyState() === WebSocketReadyState_1.default.Closed);
    }
    openEventHandler() {
        this.reconnectController.reset();
        this.isFirstMessageReceived = false;
    }
    receiveMessageHandler(data) {
        try {
            const jsonData = JSON.parse(data);
            const messageType = jsonData.Headers['x-amz-chime-event-type'];
            const message = new Message_1.default(messageType, jsonData.Headers, jsonData.Payload || null);
            if (!this.isFirstMessageReceived) {
                // Since backend does authorization after the websocket open we cannot rely on open event for didStart
                // as the socket will close if authorization fail after it open. So we trigger didStart on first message event
                // instead
                this.forEachObserver(observer => {
                    if (observer.messagingSessionDidStart) {
                        observer.messagingSessionDidStart();
                    }
                });
                this.isFirstMessageReceived = true;
            }
            this.forEachObserver(observer => {
                if (observer.messagingSessionDidReceiveMessage) {
                    observer.messagingSessionDidReceiveMessage(message);
                }
            });
        }
        catch (error) {
            this.logger.error(`Messaging parsing failed: ${error}`);
        }
    }
    closeEventHandler(event) {
        this.logger.info(`WebSocket close: ${event.code} ${event.reason}`);
        this.webSocket.destroy();
        if (!this.isClosing &&
            this.canReconnect(event.code) &&
            this.reconnectController.retryWithBackoff(() => __awaiter(this, void 0, void 0, function* () {
                this.startConnecting(true);
            }), null)) {
            return;
        }
        this.isClosing = false;
        if (this.isFirstMessageReceived) {
            this.forEachObserver(observer => {
                if (observer.messagingSessionDidStop) {
                    observer.messagingSessionDidStop(event);
                }
            });
        }
    }
    canReconnect(closeCode) {
        // 4003 is Kicked closing event from the back end
        return (closeCode === 1001 ||
            closeCode === 1006 ||
            (closeCode >= 1011 && closeCode <= 1014) ||
            (closeCode > 4000 && closeCode !== 4002 && closeCode !== 4003 && closeCode !== 4401));
    }
}
exports.default = DefaultMessagingSession;
//# sourceMappingURL=DefaultMessagingSession.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/messagingsession/MessagingSessionConfiguration.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/messagingsession/MessagingSessionConfiguration.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[MessagingSessionConfiguration]] contains the information necessary to start
 * a messaging session.
 */
/* eslint  @typescript-eslint/no-explicit-any: 0, @typescript-eslint/explicit-module-boundary-types: 0 */
class MessagingSessionConfiguration {
    /**
     * Constructs a MessagingSessionConfiguration optionally with userArn, messaging session id, a messaging session
     * endpoint URL, the chimeClient, and the AWSClient.
     * The messaging session id is to uniquely identify this messaging session for the userArn.
     * If messaging session id is passed in as null, it will be automatically generated.
     */
    constructor(userArn, messagingSessionId, endpointUrl, chimeClient, awsClient) {
        this.userArn = userArn;
        this.messagingSessionId = messagingSessionId;
        this.endpointUrl = endpointUrl;
        this.chimeClient = chimeClient;
        this.awsClient = awsClient;
        /**
         * Maximum amount of time in milliseconds to allow for reconnecting.
         */
        this.reconnectTimeoutMs = 10 * 1000;
        /**
         * Fixed wait amount in milliseconds between reconnecting attempts.
         */
        this.reconnectFixedWaitMs = 0;
        /**
         * The short back off time in milliseconds between reconnecting attempts.
         */
        this.reconnectShortBackoffMs = 1 * 1000;
        /**
         * The short back off time in milliseconds between reconnecting attempts.
         */
        this.reconnectLongBackoffMs = 5 * 1000;
        if (!this.messagingSessionId) {
            this.messagingSessionId = this.generateSessionId();
        }
    }
    generateSessionId() {
        const num = new Uint32Array(1);
        const randomNum = window.crypto.getRandomValues(num);
        return randomNum[0].toString();
    }
}
exports.default = MessagingSessionConfiguration;
//# sourceMappingURL=MessagingSessionConfiguration.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/modality/DefaultModality.js":
/*!****************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/modality/DefaultModality.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ContentShareConstants_1 = __webpack_require__(/*! ../contentsharecontroller/ContentShareConstants */ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/ContentShareConstants.js");
class DefaultModality {
    constructor(_id) {
        this._id = _id;
    }
    id() {
        return this._id;
    }
    base() {
        if (!this._id) {
            return '';
        }
        return this._id.split(DefaultModality.MODALITY_SEPARATOR)[0];
    }
    modality() {
        if (!this._id) {
            return '';
        }
        const components = this._id.split(DefaultModality.MODALITY_SEPARATOR);
        if (components.length === 2) {
            return components[1];
        }
        return '';
    }
    hasModality(modality) {
        return modality !== '' && this.modality() === modality;
    }
    withModality(modality) {
        const m = new DefaultModality(this.base() + DefaultModality.MODALITY_SEPARATOR + modality);
        if (modality === '' ||
            this.base() === '' ||
            new DefaultModality(m._id).modality() !== modality) {
            return new DefaultModality(this.base());
        }
        return m;
    }
}
exports.default = DefaultModality;
DefaultModality.MODALITY_SEPARATOR = ContentShareConstants_1.default.Modality[0];
DefaultModality.MODALITY_CONTENT = ContentShareConstants_1.default.Modality.substr(1);
//# sourceMappingURL=DefaultModality.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/pingpong/DefaultPingPong.js":
/*!****************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/pingpong/DefaultPingPong.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Maybe_1 = __webpack_require__(/*! ../maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
const AsyncScheduler_1 = __webpack_require__(/*! ../scheduler/AsyncScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js");
const IntervalScheduler_1 = __webpack_require__(/*! ../scheduler/IntervalScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/IntervalScheduler.js");
const SignalingClientEventType_1 = __webpack_require__(/*! ../signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
/**
 * [[DefaultPingPong]] implements the PingPong and SignalingClientObserver interface.
 */
class DefaultPingPong {
    constructor(signalingClient, intervalMs, logger) {
        this.signalingClient = signalingClient;
        this.intervalMs = intervalMs;
        this.logger = logger;
        this.observerQueue = new Set();
        this.consecutivePongsUnaccountedFor = 0;
        this.intervalScheduler = new IntervalScheduler_1.default(this.intervalMs);
        this.pingId = 0;
    }
    addObserver(observer) {
        this.logger.info('adding a ping-pong observer');
        this.observerQueue.add(observer);
    }
    removeObserver(observer) {
        this.logger.info('removing a ping-pong observer');
        this.observerQueue.delete(observer);
    }
    forEachObserver(observerFunc) {
        for (const observer of this.observerQueue) {
            new AsyncScheduler_1.default().start(() => {
                if (this.observerQueue.has(observer)) {
                    observerFunc(observer);
                }
            });
        }
    }
    start() {
        this.stop();
        this.signalingClient.registerObserver(this);
        if (this.signalingClient.ready()) {
            this.startPingInterval();
        }
    }
    stop() {
        this.stopPingInterval();
        this.signalingClient.removeObserver(this);
    }
    startPingInterval() {
        this.intervalScheduler.start(() => {
            this.ping();
        });
        this.ping();
    }
    stopPingInterval() {
        this.intervalScheduler.stop();
        this.pingId = 0;
        this.consecutivePongsUnaccountedFor = 0;
    }
    ping() {
        if (this.consecutivePongsUnaccountedFor > 0) {
            this.logger.warn(`missed pong ${this.consecutivePongsUnaccountedFor} time(s)`);
            this.forEachObserver((observer) => {
                Maybe_1.default.of(observer.didMissPongs).map(f => f.bind(observer)(this.consecutivePongsUnaccountedFor));
            });
        }
        this.consecutivePongsUnaccountedFor += 1;
        this.pingId = (this.pingId + 1) & 0xffffffff;
        const ping = SignalingProtocol_js_1.SdkPingPongFrame.create();
        ping.pingId = this.pingId;
        ping.type = SignalingProtocol_js_1.SdkPingPongType.PING;
        this.pingTimestampLocalMs = this.signalingClient.pingPong(ping);
        this.logger.debug(() => {
            return `sent ping ${this.pingId}`;
        });
    }
    pong(pingId) {
        const pong = SignalingProtocol_js_1.SdkPingPongFrame.create();
        pong.pingId = pingId;
        pong.type = SignalingProtocol_js_1.SdkPingPongType.PONG;
        this.signalingClient.pingPong(pong);
    }
    handleSignalingClientEvent(event) {
        switch (event.type) {
            case SignalingClientEventType_1.default.WebSocketOpen:
                this.startPingInterval();
                break;
            case SignalingClientEventType_1.default.WebSocketFailed:
            case SignalingClientEventType_1.default.WebSocketError:
                this.logger.warn(`stopped pinging (${SignalingClientEventType_1.default[event.type]})`);
                this.stopPingInterval();
                break;
            case SignalingClientEventType_1.default.WebSocketClosing:
            case SignalingClientEventType_1.default.WebSocketClosed:
                this.logger.info(`stopped pinging (${SignalingClientEventType_1.default[event.type]})`);
                this.stopPingInterval();
                break;
            case SignalingClientEventType_1.default.ReceivedSignalFrame:
                if (event.message.type !== SignalingProtocol_js_1.SdkSignalFrame.Type.PING_PONG) {
                    break;
                }
                if (event.message.pingPong.type === SignalingProtocol_js_1.SdkPingPongType.PONG) {
                    const pingId = event.message.pingPong.pingId;
                    if (pingId !== this.pingId) {
                        this.logger.warn(`unexpected ping id ${pingId} (expected ${this.pingId})`);
                        break;
                    }
                    this.consecutivePongsUnaccountedFor = 0;
                    let pongTimestampRemoteMs;
                    if (typeof event.message.timestampMs === 'number') {
                        pongTimestampRemoteMs = event.message.timestampMs;
                    }
                    else {
                        break;
                    }
                    this.logger.debug(() => {
                        return `received pong ${pingId} with timestamp ${pongTimestampRemoteMs}`;
                    });
                    const pongTimestampLocalMs = event.timestampMs;
                    const pingPongLocalIntervalMs = pongTimestampLocalMs - this.pingTimestampLocalMs;
                    const estimatedPingTimestampRemoteMs = Math.round(pongTimestampRemoteMs - pingPongLocalIntervalMs / 2);
                    const estimatedClockSkewMs = this.pingTimestampLocalMs - estimatedPingTimestampRemoteMs;
                    this.logger.info(`local clock skew estimate=${estimatedClockSkewMs}ms from ping-pong time=${pingPongLocalIntervalMs}ms`);
                    this.forEachObserver((observer) => {
                        Maybe_1.default.of(observer.didReceivePong).map(f => f.bind(observer)(pingId, estimatedClockSkewMs, pingPongLocalIntervalMs));
                    });
                }
                else {
                    this.pong(event.message.pingPong.pingId);
                }
                break;
        }
    }
}
exports.default = DefaultPingPong;
//# sourceMappingURL=DefaultPingPong.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/DefaultRealtimeController.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/realtimecontroller/DefaultRealtimeController.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const RealtimeState_1 = __webpack_require__(/*! ./RealtimeState */ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeState.js");
const RealtimeVolumeIndicator_1 = __webpack_require__(/*! ./RealtimeVolumeIndicator */ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeVolumeIndicator.js");
/**
 * [[DefaultRealtimeController]] is written to adhere to the following tenets to
 * make privacy and performance bugs significantly less likely.
 *
 * 1. Any call to the object is guaranteed to succeed from the caller's
 *    perspective to the maximum extent that this can be ensured. However, all
 *    failures of the object are reported as fatal errors. For example, if local
 *    mute fails, then that is a privacy issue and we must tear down the
 *    connection and try starting over.
 *
 * 2. State is owned by the object and is considered authoritative at all times.
 *    For example, if [[realtimeIsLocalAudioMuted]] is true then the user *is*
 *    muted.
 *
 * 3. Callbacks are fired synchronously and do their work synchronously. Any
 *    unnecessary asynchronous implementation only invites latency and
 *    increases the surface error for potential errors.
 *
 * 4. Mutation only occurs when state changes. All state-changing functions are
 *    idempotent.
 *
 * 5. Every conditional branch gets its own if statement and test coverage is
 *    100% for this object.
 *
 * 6. Function parameters and returns use primitives only (no classes or enums).
 *    This minimizes the number of dependencies that consumers have to take on
 *    and allows the object to be more easily wrapped. Values are normalized
 *    where possible.
 *
 * 7. The object takes no other non-realtime dependencies.
 *
 * 8. Interface functions begin with `realtime` to make boundaries between the
 *    RealtimeController interface and the UI or business logic explicit and
 *    auditable.
 *
 * 9. Local state overrides remote state but not vice-versa. For example, if
 *    locally muted with an active audio input and a remote state indicates the
 *    same user is unmuted because the muted state has not yet propagated, then
 *    the volume indicator update for the user would show the remote mute state
 *    as muted. However, if locally muted without an active audio input and a
 *    remote state indicates the user is unmuted (since they are dialed in), the
 *    remote state persists but does not override the local state so
 *    [[realtimeIsLocalAudioMuted]] still returns true.
 */
class DefaultRealtimeController {
    constructor() {
        this.state = new RealtimeState_1.default();
    }
    realtimeSetLocalAttendeeId(attendeeId, externalUserId) {
        this.state.localAttendeeId = attendeeId;
        this.state.localExternalUserId = externalUserId;
    }
    realtimeSetAttendeeIdPresence(attendeeId, present, externalUserId, dropped, posInFrame) {
        try {
            if (present) {
                this.state.attendeeIdToExternalUserId[attendeeId] = externalUserId;
            }
            for (const fn of this.state.attendeeIdChangesCallbacks) {
                fn(attendeeId, present, externalUserId, dropped, posInFrame);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeSubscribeToAttendeeIdPresence(callback) {
        try {
            this.state.attendeeIdChangesCallbacks.push(callback);
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeUnsubscribeToAttendeeIdPresence(callback) {
        try {
            const index = this.state.attendeeIdChangesCallbacks.indexOf(callback);
            if (index !== -1) {
                this.state.attendeeIdChangesCallbacks.splice(index, 1);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    // Audio Input
    realtimeSetLocalAudioInput(audioInput) {
        try {
            if (this.state.audioInput === audioInput) {
                return;
            }
            this.setAudioInputEnabled(false);
            this.state.audioInput = audioInput;
            this.setAudioInputEnabled(!this.state.muted);
        }
        catch (e) {
            this.onError(e);
        }
    }
    // Muting
    realtimeSetCanUnmuteLocalAudio(canUnmute) {
        try {
            if (this.state.canUnmute === canUnmute) {
                return;
            }
            this.state.canUnmute = canUnmute;
            for (const fn of this.state.setCanUnmuteLocalAudioCallbacks) {
                fn(canUnmute);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeSubscribeToSetCanUnmuteLocalAudio(callback) {
        try {
            this.state.setCanUnmuteLocalAudioCallbacks.push(callback);
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeUnsubscribeToSetCanUnmuteLocalAudio(callback) {
        try {
            const index = this.state.setCanUnmuteLocalAudioCallbacks.indexOf(callback);
            if (index !== -1) {
                this.state.setCanUnmuteLocalAudioCallbacks.splice(index, 1);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeCanUnmuteLocalAudio() {
        return this.state.canUnmute;
    }
    realtimeMuteLocalAudio() {
        if (this.state.muted) {
            return;
        }
        try {
            this.setAudioInputEnabled(false);
            this.state.muted = true;
            this.realtimeUpdateVolumeIndicator(this.state.localAttendeeId, null, null, null, this.state.localExternalUserId);
            for (const fn of this.state.muteAndUnmuteLocalAudioCallbacks) {
                fn(true);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeUnmuteLocalAudio() {
        if (!this.state.muted) {
            return true;
        }
        if (!this.state.canUnmute) {
            return false;
        }
        try {
            this.setAudioInputEnabled(true);
            this.state.muted = false;
            this.realtimeUpdateVolumeIndicator(this.state.localAttendeeId, null, null, null, this.state.localExternalUserId);
            for (const fn of this.state.muteAndUnmuteLocalAudioCallbacks) {
                fn(false);
            }
            return true;
        }
        catch (e) {
            this.onError(e);
            return false;
        }
    }
    realtimeSubscribeToMuteAndUnmuteLocalAudio(callback) {
        try {
            this.state.muteAndUnmuteLocalAudioCallbacks.push(callback);
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeUnsubscribeToMuteAndUnmuteLocalAudio(callback) {
        try {
            const index = this.state.muteAndUnmuteLocalAudioCallbacks.indexOf(callback);
            if (index !== -1) {
                this.state.muteAndUnmuteLocalAudioCallbacks.splice(index, 1);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeIsLocalAudioMuted() {
        return this.state.muted;
    }
    // Volume Indicators
    realtimeSubscribeToVolumeIndicator(attendeeId, callback) {
        try {
            if (!this.state.volumeIndicatorCallbacks.hasOwnProperty(attendeeId)) {
                this.state.volumeIndicatorCallbacks[attendeeId] = [];
            }
            this.state.volumeIndicatorCallbacks[attendeeId].push(callback);
            this.sendVolumeIndicatorChange(attendeeId, true, true, true, this.state.attendeeIdToExternalUserId[attendeeId]);
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeUnsubscribeFromVolumeIndicator(attendeeId, callback) {
        try {
            if (callback) {
                const index = this.state.volumeIndicatorCallbacks[attendeeId].indexOf(callback);
                if (index !== -1) {
                    this.state.volumeIndicatorCallbacks[attendeeId].splice(index, 1);
                }
            }
            else {
                delete this.state.volumeIndicatorCallbacks[attendeeId];
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeUpdateVolumeIndicator(attendeeId, volume, muted, signalStrength, externalUserId) {
        try {
            muted = this.applyLocalMuteOverride(attendeeId, muted);
            const state = this.getVolumeIndicatorState(attendeeId);
            let volumeUpdated = false;
            let mutedUpdated = false;
            let signalStrengthUpdated = false;
            if (muted !== null) {
                if (state.muted !== muted) {
                    state.muted = muted;
                    mutedUpdated = true;
                    if (state.muted && state.volume !== 0.0) {
                        state.volume = 0.0;
                        volumeUpdated = true;
                    }
                }
            }
            if (!state.muted && volume !== null) {
                if (state.volume !== volume) {
                    state.volume = volume;
                    volumeUpdated = true;
                }
                if (state.muted === null) {
                    state.muted = false;
                    mutedUpdated = true;
                }
            }
            if (signalStrength !== null) {
                if (state.signalStrength !== signalStrength) {
                    state.signalStrength = signalStrength;
                    signalStrengthUpdated = true;
                }
            }
            this.sendVolumeIndicatorChange(attendeeId, volumeUpdated, mutedUpdated, signalStrengthUpdated, externalUserId);
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeSubscribeToLocalSignalStrengthChange(callback) {
        try {
            this.state.localSignalStrengthChangeCallbacks.push(callback);
            if (this.state.localAttendeeId === null) {
                return;
            }
            this.sendLocalSignalStrengthChange(this.state.localAttendeeId, true);
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeUnsubscribeToLocalSignalStrengthChange(callback) {
        try {
            const index = this.state.localSignalStrengthChangeCallbacks.indexOf(callback);
            if (index !== -1) {
                this.state.localSignalStrengthChangeCallbacks.splice(index, 1);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeSubscribeToSendDataMessage(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback) {
        try {
            this.state.sendDataMessageCallbacks.push(callback);
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeUnsubscribeFromSendDataMessage(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback) {
        try {
            const index = this.state.sendDataMessageCallbacks.indexOf(callback);
            if (index !== -1) {
                this.state.sendDataMessageCallbacks.splice(index, 1);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeSendDataMessage(topic, data, // eslint-disable-line @typescript-eslint/no-explicit-any
    lifetimeMs) {
        try {
            for (const fn of this.state.sendDataMessageCallbacks) {
                fn(topic, data, lifetimeMs);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeSubscribeToReceiveDataMessage(topic, callback) {
        try {
            if (this.state.receiveDataMessageCallbacks.has(topic)) {
                this.state.receiveDataMessageCallbacks.get(topic).push(callback);
            }
            else {
                this.state.receiveDataMessageCallbacks.set(topic, [callback]);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeUnsubscribeFromReceiveDataMessage(topic) {
        try {
            this.state.receiveDataMessageCallbacks.delete(topic);
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeReceiveDataMessage(dataMessage) {
        try {
            if (this.state.receiveDataMessageCallbacks.has(dataMessage.topic)) {
                for (const fn of this.state.receiveDataMessageCallbacks.get(dataMessage.topic)) {
                    fn(dataMessage);
                }
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    // Error Handling
    realtimeSubscribeToFatalError(callback) {
        try {
            this.state.fatalErrorCallbacks.push(callback);
        }
        catch (e) {
            this.onError(e);
        }
    }
    realtimeUnsubscribeToFatalError(callback) {
        try {
            const index = this.state.fatalErrorCallbacks.indexOf(callback);
            if (index !== -1) {
                this.state.fatalErrorCallbacks.splice(index, 1);
            }
        }
        catch (e) {
            this.onError(e);
        }
    }
    // Internals
    setAudioInputEnabled(enabled) {
        if (!this.state.audioInput) {
            return;
        }
        for (const track of this.state.audioInput.getTracks()) {
            if (track.enabled === enabled) {
                continue;
            }
            track.enabled = enabled;
        }
    }
    applyLocalMuteOverride(attendeeIdRemote, mutedRemote) {
        const attendeeIdLocal = this.state.localAttendeeId;
        const mutedLocal = this.state.muted;
        if (attendeeIdRemote !== attendeeIdLocal) {
            return mutedRemote;
        }
        if (this.state.audioInput === null) {
            return mutedRemote;
        }
        return mutedLocal;
    }
    sendVolumeIndicatorChange(attendeeId, volumeUpdated, mutedUpdated, signalStrengthUpdated, externalUserId) {
        this.sendLocalSignalStrengthChange(attendeeId, signalStrengthUpdated);
        if (!this.state.volumeIndicatorCallbacks.hasOwnProperty(attendeeId)) {
            return;
        }
        const state = this.getVolumeIndicatorState(attendeeId);
        const updateState = new RealtimeVolumeIndicator_1.default();
        if (volumeUpdated) {
            updateState.volume = state.volume;
        }
        if (mutedUpdated) {
            updateState.muted = state.muted;
        }
        if (signalStrengthUpdated) {
            updateState.signalStrength = state.signalStrength;
        }
        if (this.stateIsEmpty(updateState)) {
            return;
        }
        for (const fn of this.state.volumeIndicatorCallbacks[attendeeId]) {
            fn(attendeeId, updateState.volume, updateState.muted, updateState.signalStrength, externalUserId);
        }
    }
    sendLocalSignalStrengthChange(attendeeId, signalStrengthUpdated) {
        if (!signalStrengthUpdated) {
            return;
        }
        if (attendeeId !== this.state.localAttendeeId) {
            return;
        }
        const state = this.getVolumeIndicatorState(attendeeId);
        const signalStrength = state.signalStrength;
        if (signalStrength === null) {
            return;
        }
        for (const fn of this.state.localSignalStrengthChangeCallbacks) {
            fn(signalStrength);
        }
    }
    getVolumeIndicatorState(id) {
        if (!this.state.volumeIndicatorState.hasOwnProperty(id)) {
            this.state.volumeIndicatorState[id] = new RealtimeVolumeIndicator_1.default();
        }
        return this.state.volumeIndicatorState[id];
    }
    stateIsEmpty(state) {
        return state.volume === null && state.muted === null && state.signalStrength === null;
    }
    onError(error) {
        try {
            // 1) try the fatal error callbacks so that the issue is reported in
            //    logs and to give the handler a chance to clean up and reset.
            for (const callback of this.state.fatalErrorCallbacks) {
                callback(error);
            }
        }
        catch (eventError) {
            try {
                // 2) if the error event fails, fall back to console.error so that
                //    it at least prints out to the console before moving on.
                console.error(error);
                console.error(eventError);
            }
            catch (consoleError) {
                // 3) if all else fails, swallow the error and give up to guarantee
                //    that the API call returns cleanly.
            }
        }
    }
}
exports.default = DefaultRealtimeController;
//# sourceMappingURL=DefaultRealtimeController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeAttendeePositionInFrame.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeAttendeePositionInFrame.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[RealtimeAttendeePositionInFrame]] information about the attendee's place in the frame.
 */
class RealtimeAttendeePositionInFrame {
    constructor() {
        /**
         * Index of attendee update in the frame starting at zero
         */
        this.attendeeIndex = null;
        /**
         * Number of total attendee updates in the frame
         */
        this.attendeesInFrame = null;
    }
}
exports.default = RealtimeAttendeePositionInFrame;
//# sourceMappingURL=RealtimeAttendeePositionInFrame.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeState.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeState.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[RealtimeState]] stores all realtime persistent state.
 */
class RealtimeState {
    constructor() {
        /**
         * Stores the attendee id of the current user
         */
        this.localAttendeeId = null;
        /**
         * Stores the external user id of the current user
         */
        this.localExternalUserId = null;
        /**
         * Callbacks to listen for attendee id changes
         */
        this.attendeeIdChangesCallbacks = [];
        /**
         * Stores whether the user can transition from muted to unmuted
         */
        this.canUnmute = true;
        /**
         * Callbacks to listen for changes to can-unmute local audio state
         */
        this.setCanUnmuteLocalAudioCallbacks = [];
        /**
         * Stores whether the user is presently muted
         */
        this.muted = false;
        /**
         * Callbacks to listen for local audio mutes and unmutes
         */
        this.muteAndUnmuteLocalAudioCallbacks = [];
        /**
         * Stores the active audio input
         */
        this.audioInput = null;
        /**
         * Stores per-attendee id volume indicator state
         */
        this.volumeIndicatorState = {};
        /**
         * Stores attendee id to external user id mappings
         */
        this.attendeeIdToExternalUserId = {};
        /**
         * Stores per-attendee id callbacks called when volume indicators change
         */
        this.volumeIndicatorCallbacks = {};
        /**
         * Callbacks to listen for changes to local signal strength
         */
        this.localSignalStrengthChangeCallbacks = [];
        /**
         * Callbacks to listen for fatal errors
         */
        this.fatalErrorCallbacks = [];
        /**
         * Callbacks to trigger when sending message
         */
        this.sendDataMessageCallbacks = [];
        /**
         * Callbacks to listen for receiving message from data channel based on given topic
         */
        this.receiveDataMessageCallbacks = new Map();
    }
}
exports.default = RealtimeState;
//# sourceMappingURL=RealtimeState.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeVolumeIndicator.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/realtimecontroller/RealtimeVolumeIndicator.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[RealtimeVolumeIndicator]] stores the current volume, mute, and
 * signal strength for an attendee.
 */
class RealtimeVolumeIndicator {
    constructor() {
        this.volume = null;
        this.muted = null;
        this.signalStrength = null;
    }
}
exports.default = RealtimeVolumeIndicator;
//# sourceMappingURL=RealtimeVolumeIndicator.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/reconnectcontroller/DefaultReconnectController.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/reconnectcontroller/DefaultReconnectController.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const TimeoutScheduler_1 = __webpack_require__(/*! ../scheduler/TimeoutScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/TimeoutScheduler.js");
class DefaultReconnectController {
    constructor(reconnectTimeoutMs, backoffPolicy) {
        this.reconnectTimeoutMs = reconnectTimeoutMs;
        this.backoffPolicy = backoffPolicy;
        this.shouldReconnect = true;
        this.onlyRestartPeerConnection = false;
        this.firstConnectionAttempted = false;
        this.firstConnectionAttemptTimestampMs = 0;
        this.lastActiveTimestampMs = Infinity;
        this._isFirstConnection = true;
        this.backoffTimer = null;
        this.backoffCancel = null;
        this.reset();
    }
    timeSpentReconnectingMs() {
        if (!this.firstConnectionAttempted) {
            return 0;
        }
        return Date.now() - this.firstConnectionAttemptTimestampMs;
    }
    hasPastReconnectDeadline() {
        if (Date.now() - this.lastActiveTimestampMs >= this.reconnectTimeoutMs) {
            return true;
        }
        return this.timeSpentReconnectingMs() >= this.reconnectTimeoutMs;
    }
    reset() {
        this.cancel();
        this.shouldReconnect = true;
        this.onlyRestartPeerConnection = false;
        this.firstConnectionAttempted = false;
        this.firstConnectionAttemptTimestampMs = 0;
        this.lastActiveTimestampMs = Infinity;
        this.backoffPolicy.reset();
    }
    startedConnectionAttempt(isFirstConnection) {
        this._isFirstConnection = isFirstConnection;
        if (!this.firstConnectionAttempted) {
            this.firstConnectionAttempted = true;
            this.firstConnectionAttemptTimestampMs = Date.now();
        }
    }
    hasStartedConnectionAttempt() {
        return this.firstConnectionAttempted;
    }
    isFirstConnection() {
        return this._isFirstConnection;
    }
    disableReconnect() {
        this.shouldReconnect = false;
    }
    enableRestartPeerConnection() {
        this.onlyRestartPeerConnection = true;
    }
    cancel() {
        this.disableReconnect();
        if (this.backoffTimer) {
            this.backoffTimer.stop();
            if (this.backoffCancel) {
                this.backoffCancel();
                this.backoffCancel = null;
            }
        }
    }
    retryWithBackoff(retryFunc, cancelFunc) {
        const willRetry = this.shouldReconnect && !this.hasPastReconnectDeadline();
        if (willRetry) {
            this.backoffCancel = cancelFunc;
            this.backoffTimer = new TimeoutScheduler_1.default(this.backoffPolicy.nextBackoffAmountMs());
            this.backoffTimer.start(() => {
                this.backoffCancel = null;
                retryFunc();
            });
        }
        return willRetry;
    }
    shouldOnlyRestartPeerConnection() {
        return this.onlyRestartPeerConnection;
    }
    clone() {
        return new DefaultReconnectController(this.reconnectTimeoutMs, this.backoffPolicy);
    }
    setLastActiveTimestampMs(timestampMs) {
        this.lastActiveTimestampMs = timestampMs;
    }
}
exports.default = DefaultReconnectController;
//# sourceMappingURL=DefaultReconnectController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js":
/*!****************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const TimeoutScheduler_1 = __webpack_require__(/*! ./TimeoutScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/TimeoutScheduler.js");
/**
 * [[AsyncScheduler]] enqueues the callback for the soonest available run of the
 * event loop.
 */
class AsyncScheduler extends TimeoutScheduler_1.default {
    constructor() {
        super(0);
    }
}
exports.default = AsyncScheduler;
//# sourceMappingURL=AsyncScheduler.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/scheduler/IntervalScheduler.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/scheduler/IntervalScheduler.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[IntervalScheduler]] calls the callback every intervalMs milliseconds.
 */
class IntervalScheduler {
    constructor(intervalMs) {
        this.intervalMs = intervalMs;
        // eslint-disable-next-line
        this.timer = null;
    }
    start(callback) {
        this.stop();
        this.timer = setInterval(callback, this.intervalMs);
    }
    stop() {
        if (this.timer !== null) {
            clearInterval(this.timer);
        }
    }
}
exports.default = IntervalScheduler;
//# sourceMappingURL=IntervalScheduler.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/scheduler/TimeoutScheduler.js":
/*!******************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/scheduler/TimeoutScheduler.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[TimeoutScheduler]] calls the callback once after timeoutMs milliseconds.
 */
class TimeoutScheduler {
    constructor(timeoutMs) {
        this.timeoutMs = timeoutMs;
        // eslint-disable-next-line
        this.timer = null;
    }
    start(callback) {
        this.stop();
        this.timer = setTimeout(() => {
            clearTimeout(this.timer);
            callback();
        }, this.timeoutMs);
    }
    stop() {
        if (this.timer !== null) {
            clearTimeout(this.timer);
            this.timer = null;
        }
    }
}
exports.default = TimeoutScheduler;
//# sourceMappingURL=TimeoutScheduler.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/sdp/DefaultSDP.js":
/*!******************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/sdp/DefaultSDP.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SDPCandidateType_1 = __webpack_require__(/*! ./SDPCandidateType */ "./node_modules/amazon-chime-sdk-js/build/sdp/SDPCandidateType.js");
/**
 * Implements [[SDP]]. [[SDP]] also includes a few helper functions for parsing string.
 */
class DefaultSDP {
    constructor(sdp) {
        this.sdp = sdp;
    }
    clone() {
        return new DefaultSDP(this.sdp);
    }
    static isRTPCandidate(candidate) {
        const match = /candidate[:](\S+) (\d+)/g.exec(candidate);
        if (match === null || match[2] !== '1') {
            return false;
        }
        return true;
    }
    static linesToSDP(lines) {
        return new DefaultSDP(lines.join(DefaultSDP.CRLF));
    }
    static candidateTypeFromString(candidateType) {
        switch (candidateType) {
            case SDPCandidateType_1.default.Host:
                return SDPCandidateType_1.default.Host;
            case SDPCandidateType_1.default.ServerReflexive:
                return SDPCandidateType_1.default.ServerReflexive;
            case SDPCandidateType_1.default.PeerReflexive:
                return SDPCandidateType_1.default.PeerReflexive;
            case SDPCandidateType_1.default.Relay:
                return SDPCandidateType_1.default.Relay;
        }
        return null;
    }
    static candidateType(sdpLine) {
        const match = /a[=]candidate[:].* typ ([a-z]+) /g.exec(sdpLine);
        if (match === null) {
            return null;
        }
        return DefaultSDP.candidateTypeFromString(match[1]);
    }
    static splitLines(blob) {
        return blob
            .trim()
            .split('\n')
            .map((line) => {
            return line.trim();
        });
    }
    static splitSections(sdp) {
        // each section starts with "m="
        const sections = sdp.split('\nm=');
        return sections.map((section, index) => {
            return (index > 0 ? 'm=' + section : section).trim() + DefaultSDP.CRLF;
        });
    }
    static findActiveCameraSection(sections) {
        let cameraLineIndex = 0;
        let hasCamera = false;
        for (const sec of sections) {
            if (/^m=video/.test(sec)) {
                if (sec.indexOf('sendrecv') > -1) {
                    hasCamera = true;
                    break;
                }
            }
            cameraLineIndex++;
        }
        if (hasCamera === false) {
            cameraLineIndex = -1;
        }
        return cameraLineIndex;
    }
    static parseSSRCMedia(ssrcMediaAttributeLine) {
        const separator = ssrcMediaAttributeLine.indexOf(' ');
        let ssrc = 0;
        let attribute = '';
        let value = '';
        ssrc = DefaultSDP.extractSSRCFromAttributeLine(ssrcMediaAttributeLine);
        const secondColon = ssrcMediaAttributeLine.indexOf(':', separator);
        if (secondColon > -1) {
            attribute = ssrcMediaAttributeLine.substr(separator + 1, secondColon - separator - 1);
            value = ssrcMediaAttributeLine.substr(secondColon + 1);
        }
        else {
            attribute = ssrcMediaAttributeLine.substr(separator + 1);
        }
        return [ssrc, attribute, value];
    }
    // a=ssrc-group:<semantics> <ssrc-id> ...
    static extractSSRCsFromFIDGroupLine(figGroupLine) {
        const ssrcStringMatch = /^a=ssrc-group:FID\s(.+)/.exec(figGroupLine);
        return ssrcStringMatch[1];
    }
    // a=ssrc:<ssrc-id> <attribute> or a=ssrc:<ssrc-id> <attribute>:<value>, ssrc-id is a 32bit integer
    static extractSSRCFromAttributeLine(ssrcMediaAttributeLine) {
        const ssrcStringMatch = /^a=ssrc:([0-9]+)\s/.exec(ssrcMediaAttributeLine);
        if (ssrcStringMatch === null) {
            return 0;
        }
        return parseInt(ssrcStringMatch[1], 10);
    }
    static matchPrefix(blob, prefix) {
        return DefaultSDP.splitLines(blob).filter((line) => {
            return line.indexOf(prefix) === 0;
        });
    }
    lines() {
        return this.sdp.split(DefaultSDP.CRLF);
    }
    hasVideo() {
        return /^m=video/gm.exec(this.sdp) !== null;
    }
    hasCandidates() {
        const match = /a[=]candidate[:]/g.exec(this.sdp);
        if (match === null) {
            return false;
        }
        return true;
    }
    hasCandidatesForAllMLines() {
        const isAnyCLineUsingLocalHost = this.sdp.indexOf('c=IN IP4 0.0.0.0') > -1;
        const mLinesHaveCandidates = !isAnyCLineUsingLocalHost;
        return mLinesHaveCandidates;
    }
    withBundleAudioVideo() {
        const srcLines = this.lines();
        const dstLines = [];
        for (const line of srcLines) {
            const mod = line.replace(/^a=group:BUNDLE audio$/, 'a=group:BUNDLE audio video');
            if (mod !== line) {
                dstLines.push(mod);
                continue;
            }
            dstLines.push(line);
        }
        return DefaultSDP.linesToSDP(dstLines);
    }
    copyVideo(otherSDP) {
        const otherLines = otherSDP.split(DefaultSDP.CRLF);
        const dstLines = DefaultSDP.splitLines(this.sdp);
        let inVideoMedia = false;
        for (const line of otherLines) {
            if (/^m=video/.test(line)) {
                inVideoMedia = true;
            }
            else if (/^m=/.test(line)) {
                inVideoMedia = false;
            }
            if (inVideoMedia) {
                dstLines.push(line);
            }
        }
        return DefaultSDP.linesToSDP(dstLines);
    }
    withoutCandidateType(candidateTypeToExclude) {
        return DefaultSDP.linesToSDP(this.lines().filter(line => DefaultSDP.candidateType(line) !== candidateTypeToExclude));
    }
    withoutServerReflexiveCandidates() {
        return this.withoutCandidateType(SDPCandidateType_1.default.ServerReflexive);
    }
    withBandwidthRestriction(maxBitrateKbps, isUnifiedPlan) {
        const srcLines = this.lines();
        const dstLines = [];
        for (const line of srcLines) {
            dstLines.push(line);
            if (/^m=video/.test(line)) {
                if (isUnifiedPlan) {
                    dstLines.push(`b=TIAS:${maxBitrateKbps * 1000}`);
                }
                else {
                    dstLines.push(`b=AS:${maxBitrateKbps}`);
                }
            }
        }
        return DefaultSDP.linesToSDP(dstLines);
    }
    withAudioMaxAverageBitrate(maxAverageBitrate) {
        if (!maxAverageBitrate) {
            return this.clone();
        }
        maxAverageBitrate = Math.trunc(Math.min(Math.max(maxAverageBitrate, DefaultSDP.rfc7587LowestBitrate), DefaultSDP.rfc7587HighestBitrate));
        const srcLines = this.lines();
        const dstLines = [];
        const opusRtpMapRegex = /^a=rtpmap:\s*(\d+)\s+opus\/48000/;
        let lookingForOpusRtpMap = false;
        let fmtpAttribute = null;
        for (const line of srcLines) {
            if (line.startsWith('m=audio')) {
                lookingForOpusRtpMap = true;
                fmtpAttribute = null;
            }
            if (line.startsWith('m=video')) {
                lookingForOpusRtpMap = false;
                fmtpAttribute = null;
            }
            if (lookingForOpusRtpMap) {
                const match = opusRtpMapRegex.exec(line);
                if (match !== null) {
                    fmtpAttribute = `a=fmtp:${match[1]} `;
                    lookingForOpusRtpMap = false;
                }
            }
            if (fmtpAttribute && line.startsWith(fmtpAttribute)) {
                const oldParameters = line.slice(fmtpAttribute.length).split(';');
                const newParameters = [];
                for (const parameter of oldParameters) {
                    if (!parameter.startsWith('maxaveragebitrate=')) {
                        newParameters.push(parameter);
                    }
                }
                newParameters.push(`maxaveragebitrate=${maxAverageBitrate}`);
                dstLines.push(fmtpAttribute + newParameters.join(';'));
            }
            else {
                dstLines.push(line);
            }
        }
        return DefaultSDP.linesToSDP(dstLines);
    }
    // TODO: will remove this soon.
    withUnifiedPlanFormat() {
        let originalSdp = this.sdp;
        if (originalSdp.includes('mozilla')) {
            return this.clone();
        }
        else {
            originalSdp = originalSdp.replace('o=-', 'o=mozilla-chrome');
        }
        return new DefaultSDP(originalSdp);
    }
    preferH264IfExists() {
        const srcSDP = this.sdp;
        const sections = DefaultSDP.splitSections(srcSDP);
        if (sections.length < 2) {
            return new DefaultSDP(this.sdp);
        }
        const newSections = [];
        for (let i = 0; i < sections.length; i++) {
            if (/^m=video/.test(sections[i])) {
                const lines = DefaultSDP.splitLines(sections[i]);
                let payloadTypeForVP8 = 0;
                let payloadTypeForH264 = 0;
                lines.forEach(attribute => {
                    if (/^a=rtpmap:/.test(attribute)) {
                        const payloadMatch = /^a=rtpmap:([0-9]+)\s/.exec(attribute);
                        if (attribute.toLowerCase().includes('vp8')) {
                            payloadTypeForVP8 = parseInt(payloadMatch[1], 10);
                        }
                        else if (attribute.toLowerCase().includes('h264')) {
                            payloadTypeForH264 = parseInt(payloadMatch[1], 10);
                        }
                    }
                });
                // m=video 9 UDP/+++ <payload>
                if (payloadTypeForVP8 !== 0 && payloadTypeForH264 !== 0) {
                    const mline = lines[0].split(' ');
                    let indexForVP8 = -1;
                    let indexForH264 = -1;
                    for (let i = 3; i < mline.length; i++) {
                        const payload = parseInt(mline[i], 10);
                        if (payload === payloadTypeForVP8) {
                            indexForVP8 = i;
                        }
                        else if (payload === payloadTypeForH264) {
                            indexForH264 = i;
                        }
                    }
                    if (indexForVP8 < indexForH264) {
                        mline[indexForVP8] = payloadTypeForH264.toString();
                        mline[indexForH264] = payloadTypeForVP8.toString();
                    }
                    lines[0] = mline.join(' ');
                }
                sections[i] = lines.join(DefaultSDP.CRLF) + DefaultSDP.CRLF;
                // since there is only H264 or VP8, we don't switch payload places
            }
            newSections.push(sections[i]);
        }
        const newSdp = newSections.join('');
        return new DefaultSDP(newSdp);
    }
    withOldFashionedMungingSimulcast(videoSimulcastLayerCount) {
        if (videoSimulcastLayerCount < 2) {
            return this.clone();
        }
        const srcSDP = this.sdp;
        const sections = DefaultSDP.splitSections(srcSDP);
        if (sections.length < 2) {
            return new DefaultSDP(this.sdp);
        }
        const cameraLineIndex = DefaultSDP.findActiveCameraSection(sections);
        if (cameraLineIndex === -1) {
            return new DefaultSDP(this.sdp);
        }
        let cname = '';
        let msid = '';
        DefaultSDP.matchPrefix(sections[cameraLineIndex], 'a=ssrc:').forEach((line) => {
            const ssrcAttrTuple = DefaultSDP.parseSSRCMedia(line);
            if (ssrcAttrTuple[1] === 'cname') {
                cname = ssrcAttrTuple[2];
            }
            else if (ssrcAttrTuple[1] === 'msid') {
                msid = ssrcAttrTuple[2];
            }
        });
        const fidGroupMatch = DefaultSDP.matchPrefix(sections[cameraLineIndex], 'a=ssrc-group:FID ');
        if (cname === '' || msid === '' || fidGroupMatch.length < 1) {
            return new DefaultSDP(this.sdp);
        }
        const fidGroup = DefaultSDP.extractSSRCsFromFIDGroupLine(fidGroupMatch[0]);
        const cameraSectionLines = sections[cameraLineIndex]
            .trim()
            .split(DefaultSDP.CRLF)
            .filter((line) => {
            return line.indexOf('a=ssrc:') !== 0 && line.indexOf('a=ssrc-group:') !== 0;
        });
        const simulcastSSRCs = [];
        const [videoSSRC1, rtxSSRC1] = fidGroup.split(' ').map(ssrc => parseInt(ssrc, 10));
        let videoSSRC = videoSSRC1;
        let rtxSSRC = rtxSSRC1;
        for (let i = 0; i < videoSimulcastLayerCount; i++) {
            cameraSectionLines.push('a=ssrc:' + videoSSRC + ' cname:' + cname);
            cameraSectionLines.push('a=ssrc:' + videoSSRC + ' msid:' + msid);
            cameraSectionLines.push('a=ssrc:' + rtxSSRC + ' cname:' + cname);
            cameraSectionLines.push('a=ssrc:' + rtxSSRC + ' msid:' + msid);
            cameraSectionLines.push('a=ssrc-group:FID ' + videoSSRC + ' ' + rtxSSRC);
            simulcastSSRCs.push(videoSSRC);
            videoSSRC = videoSSRC + 1;
            rtxSSRC = videoSSRC + 1;
        }
        cameraSectionLines.push('a=ssrc-group:SIM ' + simulcastSSRCs.join(' '));
        sections[cameraLineIndex] = cameraSectionLines.join(DefaultSDP.CRLF) + DefaultSDP.CRLF;
        const newSDP = sections.join('');
        return new DefaultSDP(newSDP);
    }
    ssrcForVideoSendingSection() {
        const srcSDP = this.sdp;
        const sections = DefaultSDP.splitSections(srcSDP);
        if (sections.length < 2) {
            return '';
        }
        const cameraLineIndex = DefaultSDP.findActiveCameraSection(sections);
        if (cameraLineIndex === -1) {
            return '';
        }
        // TODO: match for Firefox. Currently all failures are not Firefox induced.
        const fidGroupMatch = DefaultSDP.matchPrefix(sections[cameraLineIndex], 'a=ssrc-group:FID ');
        if (fidGroupMatch.length < 1) {
            return '';
        }
        const fidGroup = DefaultSDP.extractSSRCsFromFIDGroupLine(fidGroupMatch[0]);
        const [videoSSRC1] = fidGroup.split(' ').map(ssrc => parseInt(ssrc, 10));
        return videoSSRC1.toString();
    }
    videoSendSectionHasDifferentSSRC(prevSdp) {
        const ssrc1 = this.ssrcForVideoSendingSection();
        const ssrc2 = prevSdp.ssrcForVideoSendingSection();
        if (ssrc1 === '' || ssrc2 === '') {
            return false;
        }
        const ssrc1InNumber = parseInt(ssrc1, 10);
        const ssrc2InNumber = parseInt(ssrc2, 10);
        if (ssrc1InNumber === ssrc2InNumber) {
            return false;
        }
        return true;
    }
}
exports.default = DefaultSDP;
DefaultSDP.CRLF = '\r\n';
DefaultSDP.rfc7587LowestBitrate = 6000;
DefaultSDP.rfc7587HighestBitrate = 510000;
//# sourceMappingURL=DefaultSDP.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/sdp/SDPCandidateType.js":
/*!************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/sdp/SDPCandidateType.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SDPCandidateType = void 0;
var SDPCandidateType;
(function (SDPCandidateType) {
    SDPCandidateType["Host"] = "host";
    SDPCandidateType["ServerReflexive"] = "srflx";
    SDPCandidateType["PeerReflexive"] = "prflx";
    SDPCandidateType["Relay"] = "relay";
})(SDPCandidateType = exports.SDPCandidateType || (exports.SDPCandidateType = {}));
exports.default = SDPCandidateType;
//# sourceMappingURL=SDPCandidateType.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/DefaultSessionStateController.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/DefaultSessionStateController.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SessionStateControllerAction_1 = __webpack_require__(/*! ./SessionStateControllerAction */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerAction.js");
const SessionStateControllerDeferPriority_1 = __webpack_require__(/*! ./SessionStateControllerDeferPriority */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerDeferPriority.js");
const SessionStateControllerState_1 = __webpack_require__(/*! ./SessionStateControllerState */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerState.js");
const SessionStateControllerTransitionResult_1 = __webpack_require__(/*! ./SessionStateControllerTransitionResult */ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerTransitionResult.js");
class DefaultSessionStateController {
    constructor(logger) {
        this.logger = logger;
        this.currentState = SessionStateControllerState_1.SessionStateControllerState.NotConnected;
        this.deferredAction = null;
        this.deferredWork = null;
    }
    perform(action, work) {
        const state = this.currentState;
        if (state === SessionStateControllerState_1.SessionStateControllerState.NotConnected &&
            action === SessionStateControllerAction_1.SessionStateControllerAction.Connect) {
            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);
        }
        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting &&
            action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {
            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);
        }
        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting &&
            action === SessionStateControllerAction_1.SessionStateControllerAction.FinishConnecting) {
            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);
        }
        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&
            action === SessionStateControllerAction_1.SessionStateControllerAction.Disconnect) {
            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);
        }
        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&
            action === SessionStateControllerAction_1.SessionStateControllerAction.Reconnect) {
            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);
        }
        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&
            action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {
            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);
        }
        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&
            action === SessionStateControllerAction_1.SessionStateControllerAction.Update) {
            this.transition(SessionStateControllerState_1.SessionStateControllerState.Updating, action);
        }
        else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating &&
            action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {
            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);
        }
        else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating &&
            action === SessionStateControllerAction_1.SessionStateControllerAction.FinishUpdating) {
            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);
        }
        else if (state === SessionStateControllerState_1.SessionStateControllerState.Disconnecting &&
            action === SessionStateControllerAction_1.SessionStateControllerAction.FinishDisconnecting) {
            this.transition(SessionStateControllerState_1.SessionStateControllerState.NotConnected, action);
        }
        else if (this.canDefer(action)) {
            this.logger.info(`deferring transition from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);
            this.deferAction(action, work);
            return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.DeferredTransition;
        }
        else {
            this.logger.warn(`no transition found from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);
            return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.NoTransitionAvailable;
        }
        try {
            work();
        }
        catch (e) {
            this.logger.error(`error during state ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with action ${SessionStateControllerAction_1.SessionStateControllerAction[action]}: ${e}`);
            this.logger.info(`rolling back transition to ${SessionStateControllerState_1.SessionStateControllerState[state]}`);
            this.currentState = state;
            return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.TransitionFailed;
        }
        this.performDeferredAction();
        return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned;
    }
    state() {
        return this.currentState;
    }
    transition(newState, action) {
        this.logger.info(`transitioning from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} to ${SessionStateControllerState_1.SessionStateControllerState[newState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);
        this.currentState = newState;
    }
    deferPriority(action) {
        switch (action) {
            case SessionStateControllerAction_1.SessionStateControllerAction.Disconnect:
                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.VeryHigh;
            case SessionStateControllerAction_1.SessionStateControllerAction.Fail:
                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.High;
            case SessionStateControllerAction_1.SessionStateControllerAction.Reconnect:
                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Medium;
            case SessionStateControllerAction_1.SessionStateControllerAction.Update:
                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Low;
            default:
                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer;
        }
    }
    deferAction(action, work) {
        if (this.deferredAction !== null &&
            this.deferPriority(this.deferredAction) > this.deferPriority(action)) {
            return;
        }
        this.deferredAction = action;
        this.deferredWork = work;
    }
    canDefer(action) {
        return (this.deferPriority(action) !== SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer &&
            (this.currentState === SessionStateControllerState_1.SessionStateControllerState.Connecting ||
                this.currentState === SessionStateControllerState_1.SessionStateControllerState.Updating));
    }
    performDeferredAction() {
        if (!this.deferredAction) {
            return;
        }
        const deferredAction = this.deferredAction;
        const deferredWork = this.deferredWork;
        this.deferredAction = null;
        this.deferredWork = null;
        this.logger.info(`performing deferred action ${SessionStateControllerAction_1.SessionStateControllerAction[deferredAction]}`);
        if (this.perform(deferredAction, deferredWork) !==
            SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned) {
            this.logger.info(`unable to perform deferred action ${SessionStateControllerAction_1.SessionStateControllerAction[deferredAction]} in state ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]}`);
        }
    }
}
exports.default = DefaultSessionStateController;
//# sourceMappingURL=DefaultSessionStateController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerAction.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerAction.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SessionStateControllerAction = void 0;
/**
 * [[SessionStateControllerAction]] is a state-changing action to perform.
 */
var SessionStateControllerAction;
(function (SessionStateControllerAction) {
    SessionStateControllerAction[SessionStateControllerAction["Connect"] = 0] = "Connect";
    SessionStateControllerAction[SessionStateControllerAction["FinishConnecting"] = 1] = "FinishConnecting";
    SessionStateControllerAction[SessionStateControllerAction["Update"] = 2] = "Update";
    SessionStateControllerAction[SessionStateControllerAction["FinishUpdating"] = 3] = "FinishUpdating";
    SessionStateControllerAction[SessionStateControllerAction["Reconnect"] = 4] = "Reconnect";
    SessionStateControllerAction[SessionStateControllerAction["Disconnect"] = 5] = "Disconnect";
    SessionStateControllerAction[SessionStateControllerAction["Fail"] = 6] = "Fail";
    SessionStateControllerAction[SessionStateControllerAction["FinishDisconnecting"] = 7] = "FinishDisconnecting";
})(SessionStateControllerAction = exports.SessionStateControllerAction || (exports.SessionStateControllerAction = {}));
exports.default = SessionStateControllerAction;
//# sourceMappingURL=SessionStateControllerAction.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerDeferPriority.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerDeferPriority.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SessionStateControllerDeferPriority = void 0;
/**
 * [[SessionStateControllerDeferPriority]] indicates the priority level of the action
 * being deferred. For example, stop is more important than update so if forced
 * to pick between the two stop should be chosen.
 */
var SessionStateControllerDeferPriority;
(function (SessionStateControllerDeferPriority) {
    SessionStateControllerDeferPriority[SessionStateControllerDeferPriority["DoNotDefer"] = 0] = "DoNotDefer";
    SessionStateControllerDeferPriority[SessionStateControllerDeferPriority["Low"] = 1] = "Low";
    SessionStateControllerDeferPriority[SessionStateControllerDeferPriority["Medium"] = 2] = "Medium";
    SessionStateControllerDeferPriority[SessionStateControllerDeferPriority["High"] = 3] = "High";
    SessionStateControllerDeferPriority[SessionStateControllerDeferPriority["VeryHigh"] = 4] = "VeryHigh";
})(SessionStateControllerDeferPriority = exports.SessionStateControllerDeferPriority || (exports.SessionStateControllerDeferPriority = {}));
exports.default = SessionStateControllerDeferPriority;
//# sourceMappingURL=SessionStateControllerDeferPriority.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerState.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerState.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SessionStateControllerState = void 0;
/**
 * [[SessionStateControllerState]] reflects the current connection state of the session.
 */
var SessionStateControllerState;
(function (SessionStateControllerState) {
    SessionStateControllerState[SessionStateControllerState["NotConnected"] = 0] = "NotConnected";
    SessionStateControllerState[SessionStateControllerState["Connecting"] = 1] = "Connecting";
    SessionStateControllerState[SessionStateControllerState["Connected"] = 2] = "Connected";
    SessionStateControllerState[SessionStateControllerState["Updating"] = 3] = "Updating";
    SessionStateControllerState[SessionStateControllerState["Disconnecting"] = 4] = "Disconnecting";
})(SessionStateControllerState = exports.SessionStateControllerState || (exports.SessionStateControllerState = {}));
exports.default = SessionStateControllerState;
//# sourceMappingURL=SessionStateControllerState.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerTransitionResult.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/sessionstatecontroller/SessionStateControllerTransitionResult.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SessionStateControllerTransitionResult = void 0;
/**
 * Indicates the result of an attempted state transition.
 */
var SessionStateControllerTransitionResult;
(function (SessionStateControllerTransitionResult) {
    /**
     * The transition was successful.
     */
    SessionStateControllerTransitionResult[SessionStateControllerTransitionResult["Transitioned"] = 0] = "Transitioned";
    /**
     * No transition is available from the current state using that action.
     */
    SessionStateControllerTransitionResult[SessionStateControllerTransitionResult["NoTransitionAvailable"] = 1] = "NoTransitionAvailable";
    /**
     * The transition will be tried on the next state.
     */
    SessionStateControllerTransitionResult[SessionStateControllerTransitionResult["DeferredTransition"] = 2] = "DeferredTransition";
    /**
     * An unexpected error occurred while transitioning to the next state.
     */
    SessionStateControllerTransitionResult[SessionStateControllerTransitionResult["TransitionFailed"] = 3] = "TransitionFailed";
})(SessionStateControllerTransitionResult = exports.SessionStateControllerTransitionResult || (exports.SessionStateControllerTransitionResult = {}));
exports.default = SessionStateControllerTransitionResult;
//# sourceMappingURL=SessionStateControllerTransitionResult.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/signalingclient/DefaultSignalingClient.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/signalingclient/DefaultSignalingClient.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const Versioning_1 = __webpack_require__(/*! ../versioning/Versioning */ "./node_modules/amazon-chime-sdk-js/build/versioning/Versioning.js");
const WebSocketReadyState_1 = __webpack_require__(/*! ../websocketadapter/WebSocketReadyState */ "./node_modules/amazon-chime-sdk-js/build/websocketadapter/WebSocketReadyState.js");
const SignalingClientEvent_1 = __webpack_require__(/*! ./SignalingClientEvent */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEvent.js");
const SignalingClientEventType_1 = __webpack_require__(/*! ./SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
/**
 * [[DefaultSignalingClient]] implements the SignalingClient interface.
 */
class DefaultSignalingClient {
    constructor(webSocket, logger) {
        this.webSocket = webSocket;
        this.logger = logger;
        this.unloadHandler = null;
        this.observerQueue = new Set();
        this.connectionRequestQueue = [];
        this.resetConnection();
        this.logger.debug(() => 'signaling client init');
        this.audioSessionId = this.generateNewAudioSessionId();
    }
    registerObserver(observer) {
        this.logger.debug(() => 'registering signaling client observer');
        this.observerQueue.add(observer);
    }
    removeObserver(observer) {
        this.logger.debug(() => 'removing signaling client observer');
        this.observerQueue.delete(observer);
    }
    openConnection(request) {
        this.logger.info('adding connection request to queue: ' + request.url());
        this.connectionRequestQueue.push(request);
        this.closeConnection();
    }
    pingPong(pingPongFrame) {
        this.logger.debug(() => 'sending ping');
        const message = SignalingProtocol_js_1.SdkSignalFrame.create();
        message.type = SignalingProtocol_js_1.SdkSignalFrame.Type.PING_PONG;
        message.pingPong = pingPongFrame;
        this.sendMessage(message);
        return message.timestampMs;
    }
    join(settings) {
        this.logger.info('sending join');
        const joinFrame = SignalingProtocol_js_1.SdkJoinFrame.create();
        joinFrame.protocolVersion = 2;
        joinFrame.maxNumOfVideos = settings.maxVideos;
        joinFrame.flags = SignalingProtocol_js_1.SdkJoinFlags.HAS_STREAM_UPDATE;
        // Only Chrome currently supports the new send side bandwidth estimation
        const browserBehavior = new DefaultBrowserBehavior_1.default();
        if (browserBehavior.hasChromiumWebRTC()) {
            joinFrame.flags |= SignalingProtocol_js_1.SdkJoinFlags.USE_SEND_SIDE_BWE;
        }
        joinFrame.flags |= settings.sendBitrates ? SignalingProtocol_js_1.SdkJoinFlags.SEND_BITRATES : 0;
        joinFrame.clientDetails = SignalingProtocol_js_1.SdkClientDetails.create({
            platformName: browserBehavior.name(),
            platformVersion: browserBehavior.version(),
            clientSource: Versioning_1.default.sdkName,
            chimeSdkVersion: Versioning_1.default.sdkVersion,
        });
        joinFrame.audioSessionId = this.audioSessionId;
        const message = SignalingProtocol_js_1.SdkSignalFrame.create();
        message.type = SignalingProtocol_js_1.SdkSignalFrame.Type.JOIN;
        message.join = joinFrame;
        this.sendMessage(message);
    }
    subscribe(settings) {
        const subscribeFrame = SignalingProtocol_js_1.SdkSubscribeFrame.create();
        subscribeFrame.sendStreams = [];
        subscribeFrame.sdpOffer = settings.sdpOffer;
        subscribeFrame.audioCheckin = settings.audioCheckin;
        subscribeFrame.audioHost = settings.audioHost;
        subscribeFrame.audioMuted = settings.audioMuted;
        if (settings.connectionTypeHasVideo) {
            subscribeFrame.receiveStreamIds = settings.receiveStreamIds;
        }
        subscribeFrame.duplex = SignalingProtocol_js_1.SdkStreamServiceType.RX;
        if (!settings.audioCheckin) {
            const audioStream = SignalingProtocol_js_1.SdkStreamDescriptor.create();
            audioStream.mediaType = SignalingProtocol_js_1.SdkStreamMediaType.AUDIO;
            audioStream.trackLabel = 'AmazonChimeExpressAudio';
            audioStream.attendeeId = settings.attendeeId;
            audioStream.streamId = 1;
            audioStream.groupId = 1;
            audioStream.framerate = 15;
            audioStream.maxBitrateKbps = 600;
            audioStream.avgBitrateBps = 400000;
            subscribeFrame.sendStreams.push(audioStream);
        }
        if (settings.localVideoEnabled) {
            subscribeFrame.duplex = SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX;
            for (let i = 0; i < settings.videoStreamDescriptions.length; i++) {
                // Non-simulcast use DefaultVideoStreamIndex.localStreamDescriptions
                // which is the exact old behavior
                const streamDescription = settings.videoStreamDescriptions[i].clone();
                streamDescription.attendeeId = settings.attendeeId;
                subscribeFrame.sendStreams.push(streamDescription.toStreamDescriptor());
            }
        }
        const message = SignalingProtocol_js_1.SdkSignalFrame.create();
        message.type = SignalingProtocol_js_1.SdkSignalFrame.Type.SUBSCRIBE;
        message.sub = subscribeFrame;
        this.sendMessage(message);
    }
    leave() {
        const message = SignalingProtocol_js_1.SdkSignalFrame.create();
        message.type = SignalingProtocol_js_1.SdkSignalFrame.Type.LEAVE;
        message.leave = SignalingProtocol_js_1.SdkLeaveFrame.create();
        this.sendMessage(message);
        this.logger.debug(() => {
            return 'sent leave';
        });
    }
    sendClientMetrics(clientMetricFrame) {
        const message = SignalingProtocol_js_1.SdkSignalFrame.create();
        message.type = SignalingProtocol_js_1.SdkSignalFrame.Type.CLIENT_METRIC;
        message.clientMetric = clientMetricFrame;
        this.sendMessage(message);
    }
    sendDataMessage(messageFrame) {
        const message = SignalingProtocol_js_1.SdkSignalFrame.create();
        message.type = SignalingProtocol_js_1.SdkSignalFrame.Type.DATA_MESSAGE;
        message.dataMessage = messageFrame;
        this.sendMessage(message);
    }
    closeConnection() {
        if (this.webSocket.readyState() !== WebSocketReadyState_1.default.None &&
            this.webSocket.readyState() !== WebSocketReadyState_1.default.Closed) {
            this.isClosing = true;
            this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.WebSocketClosing, null));
            this.webSocket.close();
            this.deactivatePageUnloadHandler();
        }
        else {
            this.logger.info('no existing connection needs closing');
            this.serviceConnectionRequestQueue();
        }
    }
    ready() {
        return (this.webSocket.readyState() === WebSocketReadyState_1.default.Open && !this.isClosing && this.wasOpened);
    }
    mute(muted) {
        const message = SignalingProtocol_js_1.SdkSignalFrame.create();
        message.type = SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_CONTROL;
        const audioControl = SignalingProtocol_js_1.SdkAudioControlFrame.create();
        audioControl.muted = muted;
        message.audioControl = audioControl;
        this.sendMessage(message);
    }
    pause(streamIds) {
        const message = SignalingProtocol_js_1.SdkSignalFrame.create();
        message.type = SignalingProtocol_js_1.SdkSignalFrame.Type.PAUSE;
        message.pause = SignalingProtocol_js_1.SdkPauseResumeFrame.create();
        message.pause.streamIds = streamIds;
        this.sendMessage(message);
    }
    resume(streamIds) {
        const message = SignalingProtocol_js_1.SdkSignalFrame.create();
        message.type = SignalingProtocol_js_1.SdkSignalFrame.Type.RESUME;
        message.pause = SignalingProtocol_js_1.SdkPauseResumeFrame.create();
        message.pause.streamIds = streamIds;
        this.sendMessage(message);
    }
    resetConnection() {
        this.webSocket.destroy();
        this.wasOpened = false;
    }
    sendMessage(message) {
        message.timestampMs = Date.now();
        this.logger.debug(() => `sending: ${JSON.stringify(message)}`);
        const buffer = this.prependWithFrameTypeRTC(SignalingProtocol_js_1.SdkSignalFrame.encode(message).finish());
        if (this.ready()) {
            if (!this.webSocket.send(buffer)) {
                this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.WebSocketSendMessageFailure, null));
                return;
            }
            this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.WebSocketSentMessage, null));
        }
        else {
            this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.WebSocketSkippedMessage, null));
        }
    }
    receiveMessage(inBuffer) {
        let message;
        try {
            message = SignalingProtocol_js_1.SdkSignalFrame.decode(inBuffer);
        }
        catch (e) {
            this.logger.info(`failed to decode: ${inBuffer}`);
            this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.ProtocolDecodeFailure, null));
            return;
        }
        this.logger.debug(() => `received: ${JSON.stringify(message)}`);
        if (this.webSocket.readyState() === WebSocketReadyState_1.default.Open) {
            this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.ReceivedSignalFrame, message));
        }
        else {
            this.logger.info(`skipping notification of message since WebSocket is not open: ${JSON.stringify(message)}`);
        }
    }
    stripFrameTypeRTC(inBuffer) {
        const frameType = inBuffer[0];
        // TODO: change server frame type to send 0x05
        if (frameType !== DefaultSignalingClient.FRAME_TYPE_RTC && frameType !== 0x02) {
            this.logger.warn(`expected FrameTypeRTC for message but got ${frameType}`);
        }
        return inBuffer.slice(1);
    }
    prependWithFrameTypeRTC(inBuffer) {
        const outBuffer = new Uint8Array(inBuffer.length + 1);
        outBuffer[0] = DefaultSignalingClient.FRAME_TYPE_RTC;
        outBuffer.set(inBuffer, 1);
        return outBuffer;
    }
    serviceConnectionRequestQueue() {
        if (this.connectionRequestQueue.length === 0) {
            this.logger.info('no connection requests to service');
            return;
        }
        const request = this.connectionRequestQueue.shift();
        this.logger.info(`opening connection to ${request.url()}`);
        this.isClosing = false;
        this.webSocket.create(request.url(), request.protocols());
        this.setUpEventListeners();
        this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.WebSocketConnecting, null));
    }
    sendEvent(event) {
        switch (event.type) {
            case SignalingClientEventType_1.default.WebSocketMessage:
            case SignalingClientEventType_1.default.ReceivedSignalFrame:
            case SignalingClientEventType_1.default.WebSocketSentMessage:
                this.logger.debug(() => `notifying event: ${SignalingClientEventType_1.default[event.type]}`);
                break;
            case SignalingClientEventType_1.default.WebSocketSkippedMessage:
                this.logger.debug(() => `notifying event: ${SignalingClientEventType_1.default[event.type]}, websocket state=${WebSocketReadyState_1.default[this.webSocket.readyState()]}`);
                break;
            default:
                this.logger.info(`notifying event: ${SignalingClientEventType_1.default[event.type]}`);
                break;
        }
        for (const observer of this.observerQueue) {
            observer.handleSignalingClientEvent(event);
        }
    }
    setUpEventListeners() {
        this.webSocket.addEventListener('open', () => {
            this.activatePageUnloadHandler();
            this.wasOpened = true;
            this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.WebSocketOpen, null));
        });
        this.webSocket.addEventListener('message', (event) => {
            this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.WebSocketMessage, null));
            this.receiveMessage(this.stripFrameTypeRTC(new Uint8Array(event.data)));
        });
        this.webSocket.addEventListener('close', (event) => {
            this.deactivatePageUnloadHandler();
            this.resetConnection();
            this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.WebSocketClosed, null, event.code, event.reason));
            this.serviceConnectionRequestQueue();
        });
        this.webSocket.addEventListener('error', () => {
            if (this.isClosing && !this.wasOpened) {
                this.logger.info('ignoring error closing signaling while connecting');
                return;
            }
            if (this.wasOpened) {
                this.logger.error('received error while connected');
                this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.WebSocketError, null));
            }
            else {
                this.logger.error('failed to connect');
                this.sendEvent(new SignalingClientEvent_1.default(this, SignalingClientEventType_1.default.WebSocketFailed, null));
            }
        });
    }
    activatePageUnloadHandler() {
        this.unloadHandler = () => {
            this.leave();
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const GlobalAny = __webpack_require__.g;
        GlobalAny['window'] &&
            GlobalAny['window']['addEventListener'] &&
            window.addEventListener('unload', this.unloadHandler);
    }
    deactivatePageUnloadHandler() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const GlobalAny = __webpack_require__.g;
        GlobalAny['window'] &&
            GlobalAny['window']['addEventListener'] &&
            window.removeEventListener('unload', this.unloadHandler);
        this.unloadHandler = null;
    }
    generateNewAudioSessionId() {
        const num = new Uint32Array(1);
        const randomNum = window.crypto.getRandomValues(num);
        return randomNum[0];
    }
}
exports.default = DefaultSignalingClient;
DefaultSignalingClient.FRAME_TYPE_RTC = 0x5;
//# sourceMappingURL=DefaultSignalingClient.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientConnectionRequest.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientConnectionRequest.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/*
 * [[SignalingClientConnectionRequest]] represents an connection request.
 */
class SignalingClientConnectionRequest {
    /** Creates a request with the given URL, conference id, and join token.
     *
     * @param {string} signalingURL The URL of the signaling proxy.
     * @param {string} joinToken The join token that will authenticate the connection.
     */
    constructor(signalingURL, joinToken) {
        this.signalingURL = signalingURL;
        this.joinToken = joinToken;
    }
    /** Gets the signaling URL representing this request.*/
    url() {
        return (this.signalingURL + '?X-Chime-Control-Protocol-Version=3&X-Amzn-Chime-Send-Close-On-Error=1');
    }
    /** Gets the protocols associated with this request.*/
    protocols() {
        return ['_aws_wt_session', this.joinToken];
    }
}
exports.default = SignalingClientConnectionRequest;
//# sourceMappingURL=SignalingClientConnectionRequest.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEvent.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEvent.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingClientEventType_1 = __webpack_require__(/*! ./SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
/*
 * [[SignalingClientEvent]] stores an event that can be sent to observers of the SignalingClient.
 */
class SignalingClientEvent {
    /** Initializes a SignalingClientEvent with the given SignalingClientEventType.
     *
     * @param {SignalingClient} client Indicates the SignalingClient associated with the event.
     * @param {SignalingClientEventType} type Indicates the kind of event.
     * @param {SdkSignalFrame} message SdkSignalFrame if type is ReceivedSignalFrame
     */
    constructor(client, type, message, closeCode, closeReason) {
        this.client = client;
        this.type = type;
        this.message = message;
        this.closeCode = closeCode;
        this.closeReason = closeReason;
        this.timestampMs = Date.now();
    }
    isConnectionTerminated() {
        switch (this.type) {
            case SignalingClientEventType_1.default.WebSocketFailed:
            case SignalingClientEventType_1.default.WebSocketError:
            case SignalingClientEventType_1.default.WebSocketClosing:
            case SignalingClientEventType_1.default.WebSocketClosed:
                return true;
            default:
                return false;
        }
    }
}
exports.default = SignalingClientEvent;
//# sourceMappingURL=SignalingClientEvent.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SignalingClientEventType = void 0;
/** Defines the event types generated by SignalingClient and the underlying WebSocket connection. */
var SignalingClientEventType;
(function (SignalingClientEventType) {
    SignalingClientEventType[SignalingClientEventType["WebSocketConnecting"] = 0] = "WebSocketConnecting";
    SignalingClientEventType[SignalingClientEventType["WebSocketOpen"] = 1] = "WebSocketOpen";
    SignalingClientEventType[SignalingClientEventType["WebSocketError"] = 2] = "WebSocketError";
    SignalingClientEventType[SignalingClientEventType["WebSocketClosing"] = 3] = "WebSocketClosing";
    SignalingClientEventType[SignalingClientEventType["WebSocketClosed"] = 4] = "WebSocketClosed";
    SignalingClientEventType[SignalingClientEventType["WebSocketFailed"] = 5] = "WebSocketFailed";
    SignalingClientEventType[SignalingClientEventType["WebSocketMessage"] = 6] = "WebSocketMessage";
    SignalingClientEventType[SignalingClientEventType["WebSocketSendMessageFailure"] = 7] = "WebSocketSendMessageFailure";
    SignalingClientEventType[SignalingClientEventType["WebSocketSentMessage"] = 8] = "WebSocketSentMessage";
    SignalingClientEventType[SignalingClientEventType["ProtocolDecodeFailure"] = 9] = "ProtocolDecodeFailure";
    SignalingClientEventType[SignalingClientEventType["ReceivedSignalFrame"] = 10] = "ReceivedSignalFrame";
    SignalingClientEventType[SignalingClientEventType["WebSocketSkippedMessage"] = 11] = "WebSocketSkippedMessage";
})(SignalingClientEventType = exports.SignalingClientEventType || (exports.SignalingClientEventType = {}));
exports.default = SignalingClientEventType;
//# sourceMappingURL=SignalingClientEventType.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientJoin.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientJoin.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[SignalingClientJoin]] contains settings for the Join SignalFrame.
 */
class SignalingClientJoin {
    /** Initializes a SignalingClientJoin with the given properties.
     *
     * @param {number} maxVideos The maximum number of video tiles to send.
     * @param {boolean} sendBitrates Whether the server should send Bitrates messages.
     */
    constructor(maxVideos, sendBitrates) {
        this.maxVideos = maxVideos;
        this.sendBitrates = sendBitrates;
    }
}
exports.default = SignalingClientJoin;
//# sourceMappingURL=SignalingClientJoin.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientSubscribe.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientSubscribe.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[SignalingClientSubscribe]] contains settings for the Subscribe SignalFrame.
 */
class SignalingClientSubscribe {
    /** Initializes a SignalingClientSubscribe with the given properties.
     *
     * @param{string} attendeeId Attendee ID of the client
     * @param{string} sdpOffer SDP offer created by WebRTC
     * @param{string} audioHost host
     * @param{boolean} audioMuted Whether audio from client is muted
     * @param{boolean} audioCheckin Whether audio is in checked-in state
     * @param{Array<number>} receiveStreamIds Which video streams to receive
     * @param{boolean} localVideoEnabled Whether to send a video stream for the local camera
     * @param{Array<VideoStreamDescription>} array of local video stream description
     * @param{boolean} connectionTypeHasVideo Whether connection type has video
     */
    constructor(attendeeId, sdpOffer, audioHost, audioMuted, audioCheckin, receiveStreamIds, localVideoEnabled, videoStreamDescriptions, connectionTypeHasVideo) {
        this.attendeeId = attendeeId;
        this.sdpOffer = sdpOffer;
        this.audioHost = audioHost;
        this.audioMuted = audioMuted;
        this.audioCheckin = audioCheckin;
        this.receiveStreamIds = receiveStreamIds;
        this.localVideoEnabled = localVideoEnabled;
        this.videoStreamDescriptions = videoStreamDescriptions;
        this.connectionTypeHasVideo = connectionTypeHasVideo;
    }
}
exports.default = SignalingClientSubscribe;
//# sourceMappingURL=SignalingClientSubscribe.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/


var $protobuf = __webpack_require__(/*! protobufjs/minimal */ "./node_modules/protobufjs/minimal.js");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.SdkSignalFrame = (function() {

    /**
     * Properties of a SdkSignalFrame.
     * @exports ISdkSignalFrame
     * @interface ISdkSignalFrame
     * @property {number|Long} timestampMs SdkSignalFrame timestampMs
     * @property {SdkSignalFrame.Type} type SdkSignalFrame type
     * @property {ISdkErrorFrame|null} [error] SdkSignalFrame error
     * @property {ISdkJoinFrame|null} [join] SdkSignalFrame join
     * @property {ISdkJoinAckFrame|null} [joinack] SdkSignalFrame joinack
     * @property {ISdkSubscribeFrame|null} [sub] SdkSignalFrame sub
     * @property {ISdkSubscribeAckFrame|null} [suback] SdkSignalFrame suback
     * @property {ISdkIndexFrame|null} [index] SdkSignalFrame index
     * @property {ISdkPauseResumeFrame|null} [pause] SdkSignalFrame pause
     * @property {ISdkLeaveFrame|null} [leave] SdkSignalFrame leave
     * @property {ISdkLeaveAckFrame|null} [leaveAck] SdkSignalFrame leaveAck
     * @property {ISdkBitrateFrame|null} [bitrates] SdkSignalFrame bitrates
     * @property {ISdkAudioControlFrame|null} [audioControl] SdkSignalFrame audioControl
     * @property {ISdkAudioMetadataFrame|null} [audioMetadata] SdkSignalFrame audioMetadata
     * @property {ISdkAudioStreamIdInfoFrame|null} [audioStreamIdInfo] SdkSignalFrame audioStreamIdInfo
     * @property {ISdkPingPongFrame|null} [pingPong] SdkSignalFrame pingPong
     * @property {ISdkAudioStatusFrame|null} [audioStatus] SdkSignalFrame audioStatus
     * @property {ISdkClientMetricFrame|null} [clientMetric] SdkSignalFrame clientMetric
     * @property {ISdkDataMessageFrame|null} [dataMessage] SdkSignalFrame dataMessage
     */

    /**
     * Constructs a new SdkSignalFrame.
     * @exports SdkSignalFrame
     * @classdesc Represents a SdkSignalFrame.
     * @implements ISdkSignalFrame
     * @constructor
     * @param {ISdkSignalFrame=} [properties] Properties to set
     */
    function SdkSignalFrame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkSignalFrame timestampMs.
     * @member {number|Long} timestampMs
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.timestampMs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * SdkSignalFrame type.
     * @member {SdkSignalFrame.Type} type
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.type = 1;

    /**
     * SdkSignalFrame error.
     * @member {ISdkErrorFrame|null|undefined} error
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.error = null;

    /**
     * SdkSignalFrame join.
     * @member {ISdkJoinFrame|null|undefined} join
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.join = null;

    /**
     * SdkSignalFrame joinack.
     * @member {ISdkJoinAckFrame|null|undefined} joinack
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.joinack = null;

    /**
     * SdkSignalFrame sub.
     * @member {ISdkSubscribeFrame|null|undefined} sub
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.sub = null;

    /**
     * SdkSignalFrame suback.
     * @member {ISdkSubscribeAckFrame|null|undefined} suback
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.suback = null;

    /**
     * SdkSignalFrame index.
     * @member {ISdkIndexFrame|null|undefined} index
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.index = null;

    /**
     * SdkSignalFrame pause.
     * @member {ISdkPauseResumeFrame|null|undefined} pause
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.pause = null;

    /**
     * SdkSignalFrame leave.
     * @member {ISdkLeaveFrame|null|undefined} leave
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.leave = null;

    /**
     * SdkSignalFrame leaveAck.
     * @member {ISdkLeaveAckFrame|null|undefined} leaveAck
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.leaveAck = null;

    /**
     * SdkSignalFrame bitrates.
     * @member {ISdkBitrateFrame|null|undefined} bitrates
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.bitrates = null;

    /**
     * SdkSignalFrame audioControl.
     * @member {ISdkAudioControlFrame|null|undefined} audioControl
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.audioControl = null;

    /**
     * SdkSignalFrame audioMetadata.
     * @member {ISdkAudioMetadataFrame|null|undefined} audioMetadata
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.audioMetadata = null;

    /**
     * SdkSignalFrame audioStreamIdInfo.
     * @member {ISdkAudioStreamIdInfoFrame|null|undefined} audioStreamIdInfo
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.audioStreamIdInfo = null;

    /**
     * SdkSignalFrame pingPong.
     * @member {ISdkPingPongFrame|null|undefined} pingPong
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.pingPong = null;

    /**
     * SdkSignalFrame audioStatus.
     * @member {ISdkAudioStatusFrame|null|undefined} audioStatus
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.audioStatus = null;

    /**
     * SdkSignalFrame clientMetric.
     * @member {ISdkClientMetricFrame|null|undefined} clientMetric
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.clientMetric = null;

    /**
     * SdkSignalFrame dataMessage.
     * @member {ISdkDataMessageFrame|null|undefined} dataMessage
     * @memberof SdkSignalFrame
     * @instance
     */
    SdkSignalFrame.prototype.dataMessage = null;

    /**
     * Creates a new SdkSignalFrame instance using the specified properties.
     * @function create
     * @memberof SdkSignalFrame
     * @static
     * @param {ISdkSignalFrame=} [properties] Properties to set
     * @returns {SdkSignalFrame} SdkSignalFrame instance
     */
    SdkSignalFrame.create = function create(properties) {
        return new SdkSignalFrame(properties);
    };

    /**
     * Encodes the specified SdkSignalFrame message. Does not implicitly {@link SdkSignalFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkSignalFrame
     * @static
     * @param {ISdkSignalFrame} message SdkSignalFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkSignalFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.timestampMs);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.error != null && message.hasOwnProperty("error"))
            $root.SdkErrorFrame.encode(message.error, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.join != null && message.hasOwnProperty("join"))
            $root.SdkJoinFrame.encode(message.join, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.joinack != null && message.hasOwnProperty("joinack"))
            $root.SdkJoinAckFrame.encode(message.joinack, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.sub != null && message.hasOwnProperty("sub"))
            $root.SdkSubscribeFrame.encode(message.sub, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.suback != null && message.hasOwnProperty("suback"))
            $root.SdkSubscribeAckFrame.encode(message.suback, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.index != null && message.hasOwnProperty("index"))
            $root.SdkIndexFrame.encode(message.index, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.pause != null && message.hasOwnProperty("pause"))
            $root.SdkPauseResumeFrame.encode(message.pause, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.leave != null && message.hasOwnProperty("leave"))
            $root.SdkLeaveFrame.encode(message.leave, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.leaveAck != null && message.hasOwnProperty("leaveAck"))
            $root.SdkLeaveAckFrame.encode(message.leaveAck, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.bitrates != null && message.hasOwnProperty("bitrates"))
            $root.SdkBitrateFrame.encode(message.bitrates, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.audioControl != null && message.hasOwnProperty("audioControl"))
            $root.SdkAudioControlFrame.encode(message.audioControl, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
        if (message.audioMetadata != null && message.hasOwnProperty("audioMetadata"))
            $root.SdkAudioMetadataFrame.encode(message.audioMetadata, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
        if (message.audioStreamIdInfo != null && message.hasOwnProperty("audioStreamIdInfo"))
            $root.SdkAudioStreamIdInfoFrame.encode(message.audioStreamIdInfo, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
        if (message.pingPong != null && message.hasOwnProperty("pingPong"))
            $root.SdkPingPongFrame.encode(message.pingPong, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.audioStatus != null && message.hasOwnProperty("audioStatus"))
            $root.SdkAudioStatusFrame.encode(message.audioStatus, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
        if (message.clientMetric != null && message.hasOwnProperty("clientMetric"))
            $root.SdkClientMetricFrame.encode(message.clientMetric, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        if (message.dataMessage != null && message.hasOwnProperty("dataMessage"))
            $root.SdkDataMessageFrame.encode(message.dataMessage, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SdkSignalFrame message, length delimited. Does not implicitly {@link SdkSignalFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkSignalFrame
     * @static
     * @param {ISdkSignalFrame} message SdkSignalFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkSignalFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkSignalFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkSignalFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkSignalFrame} SdkSignalFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkSignalFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkSignalFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.timestampMs = reader.uint64();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.error = $root.SdkErrorFrame.decode(reader, reader.uint32());
                break;
            case 4:
                message.join = $root.SdkJoinFrame.decode(reader, reader.uint32());
                break;
            case 5:
                message.joinack = $root.SdkJoinAckFrame.decode(reader, reader.uint32());
                break;
            case 6:
                message.sub = $root.SdkSubscribeFrame.decode(reader, reader.uint32());
                break;
            case 7:
                message.suback = $root.SdkSubscribeAckFrame.decode(reader, reader.uint32());
                break;
            case 8:
                message.index = $root.SdkIndexFrame.decode(reader, reader.uint32());
                break;
            case 10:
                message.pause = $root.SdkPauseResumeFrame.decode(reader, reader.uint32());
                break;
            case 11:
                message.leave = $root.SdkLeaveFrame.decode(reader, reader.uint32());
                break;
            case 12:
                message.leaveAck = $root.SdkLeaveAckFrame.decode(reader, reader.uint32());
                break;
            case 14:
                message.bitrates = $root.SdkBitrateFrame.decode(reader, reader.uint32());
                break;
            case 17:
                message.audioControl = $root.SdkAudioControlFrame.decode(reader, reader.uint32());
                break;
            case 18:
                message.audioMetadata = $root.SdkAudioMetadataFrame.decode(reader, reader.uint32());
                break;
            case 19:
                message.audioStreamIdInfo = $root.SdkAudioStreamIdInfoFrame.decode(reader, reader.uint32());
                break;
            case 20:
                message.pingPong = $root.SdkPingPongFrame.decode(reader, reader.uint32());
                break;
            case 21:
                message.audioStatus = $root.SdkAudioStatusFrame.decode(reader, reader.uint32());
                break;
            case 22:
                message.clientMetric = $root.SdkClientMetricFrame.decode(reader, reader.uint32());
                break;
            case 23:
                message.dataMessage = $root.SdkDataMessageFrame.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("timestampMs"))
            throw $util.ProtocolError("missing required 'timestampMs'", { instance: message });
        if (!message.hasOwnProperty("type"))
            throw $util.ProtocolError("missing required 'type'", { instance: message });
        return message;
    };

    /**
     * Decodes a SdkSignalFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkSignalFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkSignalFrame} SdkSignalFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkSignalFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkSignalFrame message.
     * @function verify
     * @memberof SdkSignalFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkSignalFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.timestampMs) && !(message.timestampMs && $util.isInteger(message.timestampMs.low) && $util.isInteger(message.timestampMs.high)))
            return "timestampMs: integer|Long expected";
        switch (message.type) {
        default:
            return "type: enum value expected";
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
        case 10:
        case 13:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
            break;
        }
        if (message.error != null && message.hasOwnProperty("error")) {
            var error = $root.SdkErrorFrame.verify(message.error);
            if (error)
                return "error." + error;
        }
        if (message.join != null && message.hasOwnProperty("join")) {
            var error = $root.SdkJoinFrame.verify(message.join);
            if (error)
                return "join." + error;
        }
        if (message.joinack != null && message.hasOwnProperty("joinack")) {
            var error = $root.SdkJoinAckFrame.verify(message.joinack);
            if (error)
                return "joinack." + error;
        }
        if (message.sub != null && message.hasOwnProperty("sub")) {
            var error = $root.SdkSubscribeFrame.verify(message.sub);
            if (error)
                return "sub." + error;
        }
        if (message.suback != null && message.hasOwnProperty("suback")) {
            var error = $root.SdkSubscribeAckFrame.verify(message.suback);
            if (error)
                return "suback." + error;
        }
        if (message.index != null && message.hasOwnProperty("index")) {
            var error = $root.SdkIndexFrame.verify(message.index);
            if (error)
                return "index." + error;
        }
        if (message.pause != null && message.hasOwnProperty("pause")) {
            var error = $root.SdkPauseResumeFrame.verify(message.pause);
            if (error)
                return "pause." + error;
        }
        if (message.leave != null && message.hasOwnProperty("leave")) {
            var error = $root.SdkLeaveFrame.verify(message.leave);
            if (error)
                return "leave." + error;
        }
        if (message.leaveAck != null && message.hasOwnProperty("leaveAck")) {
            var error = $root.SdkLeaveAckFrame.verify(message.leaveAck);
            if (error)
                return "leaveAck." + error;
        }
        if (message.bitrates != null && message.hasOwnProperty("bitrates")) {
            var error = $root.SdkBitrateFrame.verify(message.bitrates);
            if (error)
                return "bitrates." + error;
        }
        if (message.audioControl != null && message.hasOwnProperty("audioControl")) {
            var error = $root.SdkAudioControlFrame.verify(message.audioControl);
            if (error)
                return "audioControl." + error;
        }
        if (message.audioMetadata != null && message.hasOwnProperty("audioMetadata")) {
            var error = $root.SdkAudioMetadataFrame.verify(message.audioMetadata);
            if (error)
                return "audioMetadata." + error;
        }
        if (message.audioStreamIdInfo != null && message.hasOwnProperty("audioStreamIdInfo")) {
            var error = $root.SdkAudioStreamIdInfoFrame.verify(message.audioStreamIdInfo);
            if (error)
                return "audioStreamIdInfo." + error;
        }
        if (message.pingPong != null && message.hasOwnProperty("pingPong")) {
            var error = $root.SdkPingPongFrame.verify(message.pingPong);
            if (error)
                return "pingPong." + error;
        }
        if (message.audioStatus != null && message.hasOwnProperty("audioStatus")) {
            var error = $root.SdkAudioStatusFrame.verify(message.audioStatus);
            if (error)
                return "audioStatus." + error;
        }
        if (message.clientMetric != null && message.hasOwnProperty("clientMetric")) {
            var error = $root.SdkClientMetricFrame.verify(message.clientMetric);
            if (error)
                return "clientMetric." + error;
        }
        if (message.dataMessage != null && message.hasOwnProperty("dataMessage")) {
            var error = $root.SdkDataMessageFrame.verify(message.dataMessage);
            if (error)
                return "dataMessage." + error;
        }
        return null;
    };

    /**
     * Creates a SdkSignalFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkSignalFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkSignalFrame} SdkSignalFrame
     */
    SdkSignalFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkSignalFrame)
            return object;
        var message = new $root.SdkSignalFrame();
        if (object.timestampMs != null)
            if ($util.Long)
                (message.timestampMs = $util.Long.fromValue(object.timestampMs)).unsigned = true;
            else if (typeof object.timestampMs === "string")
                message.timestampMs = parseInt(object.timestampMs, 10);
            else if (typeof object.timestampMs === "number")
                message.timestampMs = object.timestampMs;
            else if (typeof object.timestampMs === "object")
                message.timestampMs = new $util.LongBits(object.timestampMs.low >>> 0, object.timestampMs.high >>> 0).toNumber(true);
        switch (object.type) {
        case "JOIN":
        case 1:
            message.type = 1;
            break;
        case "JOIN_ACK":
        case 2:
            message.type = 2;
            break;
        case "SUBSCRIBE":
        case 3:
            message.type = 3;
            break;
        case "SUBSCRIBE_ACK":
        case 4:
            message.type = 4;
            break;
        case "INDEX":
        case 5:
            message.type = 5;
            break;
        case "PAUSE":
        case 7:
            message.type = 7;
            break;
        case "RESUME":
        case 8:
            message.type = 8;
            break;
        case "LEAVE":
        case 9:
            message.type = 9;
            break;
        case "LEAVE_ACK":
        case 10:
            message.type = 10;
            break;
        case "BITRATES":
        case 13:
            message.type = 13;
            break;
        case "AUDIO_CONTROL":
        case 16:
            message.type = 16;
            break;
        case "AUDIO_METADATA":
        case 17:
            message.type = 17;
            break;
        case "AUDIO_STREAM_ID_INFO":
        case 18:
            message.type = 18;
            break;
        case "PING_PONG":
        case 19:
            message.type = 19;
            break;
        case "AUDIO_STATUS":
        case 20:
            message.type = 20;
            break;
        case "CLIENT_METRIC":
        case 21:
            message.type = 21;
            break;
        case "DATA_MESSAGE":
        case 22:
            message.type = 22;
            break;
        }
        if (object.error != null) {
            if (typeof object.error !== "object")
                throw TypeError(".SdkSignalFrame.error: object expected");
            message.error = $root.SdkErrorFrame.fromObject(object.error);
        }
        if (object.join != null) {
            if (typeof object.join !== "object")
                throw TypeError(".SdkSignalFrame.join: object expected");
            message.join = $root.SdkJoinFrame.fromObject(object.join);
        }
        if (object.joinack != null) {
            if (typeof object.joinack !== "object")
                throw TypeError(".SdkSignalFrame.joinack: object expected");
            message.joinack = $root.SdkJoinAckFrame.fromObject(object.joinack);
        }
        if (object.sub != null) {
            if (typeof object.sub !== "object")
                throw TypeError(".SdkSignalFrame.sub: object expected");
            message.sub = $root.SdkSubscribeFrame.fromObject(object.sub);
        }
        if (object.suback != null) {
            if (typeof object.suback !== "object")
                throw TypeError(".SdkSignalFrame.suback: object expected");
            message.suback = $root.SdkSubscribeAckFrame.fromObject(object.suback);
        }
        if (object.index != null) {
            if (typeof object.index !== "object")
                throw TypeError(".SdkSignalFrame.index: object expected");
            message.index = $root.SdkIndexFrame.fromObject(object.index);
        }
        if (object.pause != null) {
            if (typeof object.pause !== "object")
                throw TypeError(".SdkSignalFrame.pause: object expected");
            message.pause = $root.SdkPauseResumeFrame.fromObject(object.pause);
        }
        if (object.leave != null) {
            if (typeof object.leave !== "object")
                throw TypeError(".SdkSignalFrame.leave: object expected");
            message.leave = $root.SdkLeaveFrame.fromObject(object.leave);
        }
        if (object.leaveAck != null) {
            if (typeof object.leaveAck !== "object")
                throw TypeError(".SdkSignalFrame.leaveAck: object expected");
            message.leaveAck = $root.SdkLeaveAckFrame.fromObject(object.leaveAck);
        }
        if (object.bitrates != null) {
            if (typeof object.bitrates !== "object")
                throw TypeError(".SdkSignalFrame.bitrates: object expected");
            message.bitrates = $root.SdkBitrateFrame.fromObject(object.bitrates);
        }
        if (object.audioControl != null) {
            if (typeof object.audioControl !== "object")
                throw TypeError(".SdkSignalFrame.audioControl: object expected");
            message.audioControl = $root.SdkAudioControlFrame.fromObject(object.audioControl);
        }
        if (object.audioMetadata != null) {
            if (typeof object.audioMetadata !== "object")
                throw TypeError(".SdkSignalFrame.audioMetadata: object expected");
            message.audioMetadata = $root.SdkAudioMetadataFrame.fromObject(object.audioMetadata);
        }
        if (object.audioStreamIdInfo != null) {
            if (typeof object.audioStreamIdInfo !== "object")
                throw TypeError(".SdkSignalFrame.audioStreamIdInfo: object expected");
            message.audioStreamIdInfo = $root.SdkAudioStreamIdInfoFrame.fromObject(object.audioStreamIdInfo);
        }
        if (object.pingPong != null) {
            if (typeof object.pingPong !== "object")
                throw TypeError(".SdkSignalFrame.pingPong: object expected");
            message.pingPong = $root.SdkPingPongFrame.fromObject(object.pingPong);
        }
        if (object.audioStatus != null) {
            if (typeof object.audioStatus !== "object")
                throw TypeError(".SdkSignalFrame.audioStatus: object expected");
            message.audioStatus = $root.SdkAudioStatusFrame.fromObject(object.audioStatus);
        }
        if (object.clientMetric != null) {
            if (typeof object.clientMetric !== "object")
                throw TypeError(".SdkSignalFrame.clientMetric: object expected");
            message.clientMetric = $root.SdkClientMetricFrame.fromObject(object.clientMetric);
        }
        if (object.dataMessage != null) {
            if (typeof object.dataMessage !== "object")
                throw TypeError(".SdkSignalFrame.dataMessage: object expected");
            message.dataMessage = $root.SdkDataMessageFrame.fromObject(object.dataMessage);
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkSignalFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkSignalFrame
     * @static
     * @param {SdkSignalFrame} message SdkSignalFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkSignalFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.timestampMs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timestampMs = options.longs === String ? "0" : 0;
            object.type = options.enums === String ? "JOIN" : 1;
            object.error = null;
            object.join = null;
            object.joinack = null;
            object.sub = null;
            object.suback = null;
            object.index = null;
            object.pause = null;
            object.leave = null;
            object.leaveAck = null;
            object.bitrates = null;
            object.audioControl = null;
            object.audioMetadata = null;
            object.audioStreamIdInfo = null;
            object.pingPong = null;
            object.audioStatus = null;
            object.clientMetric = null;
            object.dataMessage = null;
        }
        if (message.timestampMs != null && message.hasOwnProperty("timestampMs"))
            if (typeof message.timestampMs === "number")
                object.timestampMs = options.longs === String ? String(message.timestampMs) : message.timestampMs;
            else
                object.timestampMs = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMs) : options.longs === Number ? new $util.LongBits(message.timestampMs.low >>> 0, message.timestampMs.high >>> 0).toNumber(true) : message.timestampMs;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.SdkSignalFrame.Type[message.type] : message.type;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = $root.SdkErrorFrame.toObject(message.error, options);
        if (message.join != null && message.hasOwnProperty("join"))
            object.join = $root.SdkJoinFrame.toObject(message.join, options);
        if (message.joinack != null && message.hasOwnProperty("joinack"))
            object.joinack = $root.SdkJoinAckFrame.toObject(message.joinack, options);
        if (message.sub != null && message.hasOwnProperty("sub"))
            object.sub = $root.SdkSubscribeFrame.toObject(message.sub, options);
        if (message.suback != null && message.hasOwnProperty("suback"))
            object.suback = $root.SdkSubscribeAckFrame.toObject(message.suback, options);
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = $root.SdkIndexFrame.toObject(message.index, options);
        if (message.pause != null && message.hasOwnProperty("pause"))
            object.pause = $root.SdkPauseResumeFrame.toObject(message.pause, options);
        if (message.leave != null && message.hasOwnProperty("leave"))
            object.leave = $root.SdkLeaveFrame.toObject(message.leave, options);
        if (message.leaveAck != null && message.hasOwnProperty("leaveAck"))
            object.leaveAck = $root.SdkLeaveAckFrame.toObject(message.leaveAck, options);
        if (message.bitrates != null && message.hasOwnProperty("bitrates"))
            object.bitrates = $root.SdkBitrateFrame.toObject(message.bitrates, options);
        if (message.audioControl != null && message.hasOwnProperty("audioControl"))
            object.audioControl = $root.SdkAudioControlFrame.toObject(message.audioControl, options);
        if (message.audioMetadata != null && message.hasOwnProperty("audioMetadata"))
            object.audioMetadata = $root.SdkAudioMetadataFrame.toObject(message.audioMetadata, options);
        if (message.audioStreamIdInfo != null && message.hasOwnProperty("audioStreamIdInfo"))
            object.audioStreamIdInfo = $root.SdkAudioStreamIdInfoFrame.toObject(message.audioStreamIdInfo, options);
        if (message.pingPong != null && message.hasOwnProperty("pingPong"))
            object.pingPong = $root.SdkPingPongFrame.toObject(message.pingPong, options);
        if (message.audioStatus != null && message.hasOwnProperty("audioStatus"))
            object.audioStatus = $root.SdkAudioStatusFrame.toObject(message.audioStatus, options);
        if (message.clientMetric != null && message.hasOwnProperty("clientMetric"))
            object.clientMetric = $root.SdkClientMetricFrame.toObject(message.clientMetric, options);
        if (message.dataMessage != null && message.hasOwnProperty("dataMessage"))
            object.dataMessage = $root.SdkDataMessageFrame.toObject(message.dataMessage, options);
        return object;
    };

    /**
     * Converts this SdkSignalFrame to JSON.
     * @function toJSON
     * @memberof SdkSignalFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkSignalFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Type enum.
     * @name SdkSignalFrame.Type
     * @enum {string}
     * @property {number} JOIN=1 JOIN value
     * @property {number} JOIN_ACK=2 JOIN_ACK value
     * @property {number} SUBSCRIBE=3 SUBSCRIBE value
     * @property {number} SUBSCRIBE_ACK=4 SUBSCRIBE_ACK value
     * @property {number} INDEX=5 INDEX value
     * @property {number} PAUSE=7 PAUSE value
     * @property {number} RESUME=8 RESUME value
     * @property {number} LEAVE=9 LEAVE value
     * @property {number} LEAVE_ACK=10 LEAVE_ACK value
     * @property {number} BITRATES=13 BITRATES value
     * @property {number} AUDIO_CONTROL=16 AUDIO_CONTROL value
     * @property {number} AUDIO_METADATA=17 AUDIO_METADATA value
     * @property {number} AUDIO_STREAM_ID_INFO=18 AUDIO_STREAM_ID_INFO value
     * @property {number} PING_PONG=19 PING_PONG value
     * @property {number} AUDIO_STATUS=20 AUDIO_STATUS value
     * @property {number} CLIENT_METRIC=21 CLIENT_METRIC value
     * @property {number} DATA_MESSAGE=22 DATA_MESSAGE value
     */
    SdkSignalFrame.Type = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "JOIN"] = 1;
        values[valuesById[2] = "JOIN_ACK"] = 2;
        values[valuesById[3] = "SUBSCRIBE"] = 3;
        values[valuesById[4] = "SUBSCRIBE_ACK"] = 4;
        values[valuesById[5] = "INDEX"] = 5;
        values[valuesById[7] = "PAUSE"] = 7;
        values[valuesById[8] = "RESUME"] = 8;
        values[valuesById[9] = "LEAVE"] = 9;
        values[valuesById[10] = "LEAVE_ACK"] = 10;
        values[valuesById[13] = "BITRATES"] = 13;
        values[valuesById[16] = "AUDIO_CONTROL"] = 16;
        values[valuesById[17] = "AUDIO_METADATA"] = 17;
        values[valuesById[18] = "AUDIO_STREAM_ID_INFO"] = 18;
        values[valuesById[19] = "PING_PONG"] = 19;
        values[valuesById[20] = "AUDIO_STATUS"] = 20;
        values[valuesById[21] = "CLIENT_METRIC"] = 21;
        values[valuesById[22] = "DATA_MESSAGE"] = 22;
        return values;
    })();

    return SdkSignalFrame;
})();

$root.SdkErrorFrame = (function() {

    /**
     * Properties of a SdkErrorFrame.
     * @exports ISdkErrorFrame
     * @interface ISdkErrorFrame
     * @property {number|null} [status] SdkErrorFrame status
     * @property {string|null} [description] SdkErrorFrame description
     */

    /**
     * Constructs a new SdkErrorFrame.
     * @exports SdkErrorFrame
     * @classdesc Represents a SdkErrorFrame.
     * @implements ISdkErrorFrame
     * @constructor
     * @param {ISdkErrorFrame=} [properties] Properties to set
     */
    function SdkErrorFrame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkErrorFrame status.
     * @member {number} status
     * @memberof SdkErrorFrame
     * @instance
     */
    SdkErrorFrame.prototype.status = 0;

    /**
     * SdkErrorFrame description.
     * @member {string} description
     * @memberof SdkErrorFrame
     * @instance
     */
    SdkErrorFrame.prototype.description = "";

    /**
     * Creates a new SdkErrorFrame instance using the specified properties.
     * @function create
     * @memberof SdkErrorFrame
     * @static
     * @param {ISdkErrorFrame=} [properties] Properties to set
     * @returns {SdkErrorFrame} SdkErrorFrame instance
     */
    SdkErrorFrame.create = function create(properties) {
        return new SdkErrorFrame(properties);
    };

    /**
     * Encodes the specified SdkErrorFrame message. Does not implicitly {@link SdkErrorFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkErrorFrame
     * @static
     * @param {ISdkErrorFrame} message SdkErrorFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkErrorFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.status != null && message.hasOwnProperty("status"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.status);
        if (message.description != null && message.hasOwnProperty("description"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
        return writer;
    };

    /**
     * Encodes the specified SdkErrorFrame message, length delimited. Does not implicitly {@link SdkErrorFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkErrorFrame
     * @static
     * @param {ISdkErrorFrame} message SdkErrorFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkErrorFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkErrorFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkErrorFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkErrorFrame} SdkErrorFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkErrorFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkErrorFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.status = reader.uint32();
                break;
            case 2:
                message.description = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkErrorFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkErrorFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkErrorFrame} SdkErrorFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkErrorFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkErrorFrame message.
     * @function verify
     * @memberof SdkErrorFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkErrorFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.status != null && message.hasOwnProperty("status"))
            if (!$util.isInteger(message.status))
                return "status: integer expected";
        if (message.description != null && message.hasOwnProperty("description"))
            if (!$util.isString(message.description))
                return "description: string expected";
        return null;
    };

    /**
     * Creates a SdkErrorFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkErrorFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkErrorFrame} SdkErrorFrame
     */
    SdkErrorFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkErrorFrame)
            return object;
        var message = new $root.SdkErrorFrame();
        if (object.status != null)
            message.status = object.status >>> 0;
        if (object.description != null)
            message.description = String(object.description);
        return message;
    };

    /**
     * Creates a plain object from a SdkErrorFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkErrorFrame
     * @static
     * @param {SdkErrorFrame} message SdkErrorFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkErrorFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.status = 0;
            object.description = "";
        }
        if (message.status != null && message.hasOwnProperty("status"))
            object.status = message.status;
        if (message.description != null && message.hasOwnProperty("description"))
            object.description = message.description;
        return object;
    };

    /**
     * Converts this SdkErrorFrame to JSON.
     * @function toJSON
     * @memberof SdkErrorFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkErrorFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkErrorFrame;
})();

/**
 * SdkJoinFlags enum.
 * @exports SdkJoinFlags
 * @enum {string}
 * @property {number} SEND_BITRATES=1 SEND_BITRATES value
 * @property {number} HAS_STREAM_UPDATE=2 HAS_STREAM_UPDATE value
 * @property {number} USE_SEND_SIDE_BWE=8 USE_SEND_SIDE_BWE value
 */
$root.SdkJoinFlags = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "SEND_BITRATES"] = 1;
    values[valuesById[2] = "HAS_STREAM_UPDATE"] = 2;
    values[valuesById[8] = "USE_SEND_SIDE_BWE"] = 8;
    return values;
})();

$root.SdkClientDetails = (function() {

    /**
     * Properties of a SdkClientDetails.
     * @exports ISdkClientDetails
     * @interface ISdkClientDetails
     * @property {string|null} [appVersionName] SdkClientDetails appVersionName
     * @property {string|null} [appVersionCode] SdkClientDetails appVersionCode
     * @property {string|null} [deviceModel] SdkClientDetails deviceModel
     * @property {string|null} [deviceMake] SdkClientDetails deviceMake
     * @property {string|null} [platformName] SdkClientDetails platformName
     * @property {string|null} [platformVersion] SdkClientDetails platformVersion
     * @property {string|null} [clientSource] SdkClientDetails clientSource
     * @property {string|null} [chimeSdkVersion] SdkClientDetails chimeSdkVersion
     */

    /**
     * Constructs a new SdkClientDetails.
     * @exports SdkClientDetails
     * @classdesc Represents a SdkClientDetails.
     * @implements ISdkClientDetails
     * @constructor
     * @param {ISdkClientDetails=} [properties] Properties to set
     */
    function SdkClientDetails(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkClientDetails appVersionName.
     * @member {string} appVersionName
     * @memberof SdkClientDetails
     * @instance
     */
    SdkClientDetails.prototype.appVersionName = "";

    /**
     * SdkClientDetails appVersionCode.
     * @member {string} appVersionCode
     * @memberof SdkClientDetails
     * @instance
     */
    SdkClientDetails.prototype.appVersionCode = "";

    /**
     * SdkClientDetails deviceModel.
     * @member {string} deviceModel
     * @memberof SdkClientDetails
     * @instance
     */
    SdkClientDetails.prototype.deviceModel = "";

    /**
     * SdkClientDetails deviceMake.
     * @member {string} deviceMake
     * @memberof SdkClientDetails
     * @instance
     */
    SdkClientDetails.prototype.deviceMake = "";

    /**
     * SdkClientDetails platformName.
     * @member {string} platformName
     * @memberof SdkClientDetails
     * @instance
     */
    SdkClientDetails.prototype.platformName = "";

    /**
     * SdkClientDetails platformVersion.
     * @member {string} platformVersion
     * @memberof SdkClientDetails
     * @instance
     */
    SdkClientDetails.prototype.platformVersion = "";

    /**
     * SdkClientDetails clientSource.
     * @member {string} clientSource
     * @memberof SdkClientDetails
     * @instance
     */
    SdkClientDetails.prototype.clientSource = "";

    /**
     * SdkClientDetails chimeSdkVersion.
     * @member {string} chimeSdkVersion
     * @memberof SdkClientDetails
     * @instance
     */
    SdkClientDetails.prototype.chimeSdkVersion = "";

    /**
     * Creates a new SdkClientDetails instance using the specified properties.
     * @function create
     * @memberof SdkClientDetails
     * @static
     * @param {ISdkClientDetails=} [properties] Properties to set
     * @returns {SdkClientDetails} SdkClientDetails instance
     */
    SdkClientDetails.create = function create(properties) {
        return new SdkClientDetails(properties);
    };

    /**
     * Encodes the specified SdkClientDetails message. Does not implicitly {@link SdkClientDetails.verify|verify} messages.
     * @function encode
     * @memberof SdkClientDetails
     * @static
     * @param {ISdkClientDetails} message SdkClientDetails message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkClientDetails.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.appVersionName != null && message.hasOwnProperty("appVersionName"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.appVersionName);
        if (message.appVersionCode != null && message.hasOwnProperty("appVersionCode"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.appVersionCode);
        if (message.deviceModel != null && message.hasOwnProperty("deviceModel"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.deviceModel);
        if (message.deviceMake != null && message.hasOwnProperty("deviceMake"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.deviceMake);
        if (message.platformName != null && message.hasOwnProperty("platformName"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.platformName);
        if (message.platformVersion != null && message.hasOwnProperty("platformVersion"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.platformVersion);
        if (message.clientSource != null && message.hasOwnProperty("clientSource"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.clientSource);
        if (message.chimeSdkVersion != null && message.hasOwnProperty("chimeSdkVersion"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.chimeSdkVersion);
        return writer;
    };

    /**
     * Encodes the specified SdkClientDetails message, length delimited. Does not implicitly {@link SdkClientDetails.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkClientDetails
     * @static
     * @param {ISdkClientDetails} message SdkClientDetails message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkClientDetails.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkClientDetails message from the specified reader or buffer.
     * @function decode
     * @memberof SdkClientDetails
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkClientDetails} SdkClientDetails
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkClientDetails.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkClientDetails();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.appVersionName = reader.string();
                break;
            case 2:
                message.appVersionCode = reader.string();
                break;
            case 3:
                message.deviceModel = reader.string();
                break;
            case 4:
                message.deviceMake = reader.string();
                break;
            case 5:
                message.platformName = reader.string();
                break;
            case 6:
                message.platformVersion = reader.string();
                break;
            case 7:
                message.clientSource = reader.string();
                break;
            case 8:
                message.chimeSdkVersion = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkClientDetails message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkClientDetails
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkClientDetails} SdkClientDetails
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkClientDetails.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkClientDetails message.
     * @function verify
     * @memberof SdkClientDetails
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkClientDetails.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.appVersionName != null && message.hasOwnProperty("appVersionName"))
            if (!$util.isString(message.appVersionName))
                return "appVersionName: string expected";
        if (message.appVersionCode != null && message.hasOwnProperty("appVersionCode"))
            if (!$util.isString(message.appVersionCode))
                return "appVersionCode: string expected";
        if (message.deviceModel != null && message.hasOwnProperty("deviceModel"))
            if (!$util.isString(message.deviceModel))
                return "deviceModel: string expected";
        if (message.deviceMake != null && message.hasOwnProperty("deviceMake"))
            if (!$util.isString(message.deviceMake))
                return "deviceMake: string expected";
        if (message.platformName != null && message.hasOwnProperty("platformName"))
            if (!$util.isString(message.platformName))
                return "platformName: string expected";
        if (message.platformVersion != null && message.hasOwnProperty("platformVersion"))
            if (!$util.isString(message.platformVersion))
                return "platformVersion: string expected";
        if (message.clientSource != null && message.hasOwnProperty("clientSource"))
            if (!$util.isString(message.clientSource))
                return "clientSource: string expected";
        if (message.chimeSdkVersion != null && message.hasOwnProperty("chimeSdkVersion"))
            if (!$util.isString(message.chimeSdkVersion))
                return "chimeSdkVersion: string expected";
        return null;
    };

    /**
     * Creates a SdkClientDetails message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkClientDetails
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkClientDetails} SdkClientDetails
     */
    SdkClientDetails.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkClientDetails)
            return object;
        var message = new $root.SdkClientDetails();
        if (object.appVersionName != null)
            message.appVersionName = String(object.appVersionName);
        if (object.appVersionCode != null)
            message.appVersionCode = String(object.appVersionCode);
        if (object.deviceModel != null)
            message.deviceModel = String(object.deviceModel);
        if (object.deviceMake != null)
            message.deviceMake = String(object.deviceMake);
        if (object.platformName != null)
            message.platformName = String(object.platformName);
        if (object.platformVersion != null)
            message.platformVersion = String(object.platformVersion);
        if (object.clientSource != null)
            message.clientSource = String(object.clientSource);
        if (object.chimeSdkVersion != null)
            message.chimeSdkVersion = String(object.chimeSdkVersion);
        return message;
    };

    /**
     * Creates a plain object from a SdkClientDetails message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkClientDetails
     * @static
     * @param {SdkClientDetails} message SdkClientDetails
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkClientDetails.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.appVersionName = "";
            object.appVersionCode = "";
            object.deviceModel = "";
            object.deviceMake = "";
            object.platformName = "";
            object.platformVersion = "";
            object.clientSource = "";
            object.chimeSdkVersion = "";
        }
        if (message.appVersionName != null && message.hasOwnProperty("appVersionName"))
            object.appVersionName = message.appVersionName;
        if (message.appVersionCode != null && message.hasOwnProperty("appVersionCode"))
            object.appVersionCode = message.appVersionCode;
        if (message.deviceModel != null && message.hasOwnProperty("deviceModel"))
            object.deviceModel = message.deviceModel;
        if (message.deviceMake != null && message.hasOwnProperty("deviceMake"))
            object.deviceMake = message.deviceMake;
        if (message.platformName != null && message.hasOwnProperty("platformName"))
            object.platformName = message.platformName;
        if (message.platformVersion != null && message.hasOwnProperty("platformVersion"))
            object.platformVersion = message.platformVersion;
        if (message.clientSource != null && message.hasOwnProperty("clientSource"))
            object.clientSource = message.clientSource;
        if (message.chimeSdkVersion != null && message.hasOwnProperty("chimeSdkVersion"))
            object.chimeSdkVersion = message.chimeSdkVersion;
        return object;
    };

    /**
     * Converts this SdkClientDetails to JSON.
     * @function toJSON
     * @memberof SdkClientDetails
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkClientDetails.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkClientDetails;
})();

$root.SdkJoinFrame = (function() {

    /**
     * Properties of a SdkJoinFrame.
     * @exports ISdkJoinFrame
     * @interface ISdkJoinFrame
     * @property {number|null} [protocolVersion] SdkJoinFrame protocolVersion
     * @property {number|null} [maxNumOfVideos] SdkJoinFrame maxNumOfVideos
     * @property {number|null} [flags] SdkJoinFrame flags
     * @property {ISdkClientDetails|null} [clientDetails] SdkJoinFrame clientDetails
     * @property {number|Long|null} [audioSessionId] SdkJoinFrame audioSessionId
     */

    /**
     * Constructs a new SdkJoinFrame.
     * @exports SdkJoinFrame
     * @classdesc Represents a SdkJoinFrame.
     * @implements ISdkJoinFrame
     * @constructor
     * @param {ISdkJoinFrame=} [properties] Properties to set
     */
    function SdkJoinFrame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkJoinFrame protocolVersion.
     * @member {number} protocolVersion
     * @memberof SdkJoinFrame
     * @instance
     */
    SdkJoinFrame.prototype.protocolVersion = 2;

    /**
     * SdkJoinFrame maxNumOfVideos.
     * @member {number} maxNumOfVideos
     * @memberof SdkJoinFrame
     * @instance
     */
    SdkJoinFrame.prototype.maxNumOfVideos = 8;

    /**
     * SdkJoinFrame flags.
     * @member {number} flags
     * @memberof SdkJoinFrame
     * @instance
     */
    SdkJoinFrame.prototype.flags = 0;

    /**
     * SdkJoinFrame clientDetails.
     * @member {ISdkClientDetails|null|undefined} clientDetails
     * @memberof SdkJoinFrame
     * @instance
     */
    SdkJoinFrame.prototype.clientDetails = null;

    /**
     * SdkJoinFrame audioSessionId.
     * @member {number|Long} audioSessionId
     * @memberof SdkJoinFrame
     * @instance
     */
    SdkJoinFrame.prototype.audioSessionId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new SdkJoinFrame instance using the specified properties.
     * @function create
     * @memberof SdkJoinFrame
     * @static
     * @param {ISdkJoinFrame=} [properties] Properties to set
     * @returns {SdkJoinFrame} SdkJoinFrame instance
     */
    SdkJoinFrame.create = function create(properties) {
        return new SdkJoinFrame(properties);
    };

    /**
     * Encodes the specified SdkJoinFrame message. Does not implicitly {@link SdkJoinFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkJoinFrame
     * @static
     * @param {ISdkJoinFrame} message SdkJoinFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkJoinFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.protocolVersion);
        if (message.maxNumOfVideos != null && message.hasOwnProperty("maxNumOfVideos"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.maxNumOfVideos);
        if (message.flags != null && message.hasOwnProperty("flags"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.flags);
        if (message.clientDetails != null && message.hasOwnProperty("clientDetails"))
            $root.SdkClientDetails.encode(message.clientDetails, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.audioSessionId != null && message.hasOwnProperty("audioSessionId"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.audioSessionId);
        return writer;
    };

    /**
     * Encodes the specified SdkJoinFrame message, length delimited. Does not implicitly {@link SdkJoinFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkJoinFrame
     * @static
     * @param {ISdkJoinFrame} message SdkJoinFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkJoinFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkJoinFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkJoinFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkJoinFrame} SdkJoinFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkJoinFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkJoinFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.protocolVersion = reader.uint32();
                break;
            case 2:
                message.maxNumOfVideos = reader.uint32();
                break;
            case 3:
                message.flags = reader.uint32();
                break;
            case 4:
                message.clientDetails = $root.SdkClientDetails.decode(reader, reader.uint32());
                break;
            case 6:
                message.audioSessionId = reader.uint64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkJoinFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkJoinFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkJoinFrame} SdkJoinFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkJoinFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkJoinFrame message.
     * @function verify
     * @memberof SdkJoinFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkJoinFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
            if (!$util.isInteger(message.protocolVersion))
                return "protocolVersion: integer expected";
        if (message.maxNumOfVideos != null && message.hasOwnProperty("maxNumOfVideos"))
            if (!$util.isInteger(message.maxNumOfVideos))
                return "maxNumOfVideos: integer expected";
        if (message.flags != null && message.hasOwnProperty("flags"))
            if (!$util.isInteger(message.flags))
                return "flags: integer expected";
        if (message.clientDetails != null && message.hasOwnProperty("clientDetails")) {
            var error = $root.SdkClientDetails.verify(message.clientDetails);
            if (error)
                return "clientDetails." + error;
        }
        if (message.audioSessionId != null && message.hasOwnProperty("audioSessionId"))
            if (!$util.isInteger(message.audioSessionId) && !(message.audioSessionId && $util.isInteger(message.audioSessionId.low) && $util.isInteger(message.audioSessionId.high)))
                return "audioSessionId: integer|Long expected";
        return null;
    };

    /**
     * Creates a SdkJoinFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkJoinFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkJoinFrame} SdkJoinFrame
     */
    SdkJoinFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkJoinFrame)
            return object;
        var message = new $root.SdkJoinFrame();
        if (object.protocolVersion != null)
            message.protocolVersion = object.protocolVersion >>> 0;
        if (object.maxNumOfVideos != null)
            message.maxNumOfVideos = object.maxNumOfVideos >>> 0;
        if (object.flags != null)
            message.flags = object.flags >>> 0;
        if (object.clientDetails != null) {
            if (typeof object.clientDetails !== "object")
                throw TypeError(".SdkJoinFrame.clientDetails: object expected");
            message.clientDetails = $root.SdkClientDetails.fromObject(object.clientDetails);
        }
        if (object.audioSessionId != null)
            if ($util.Long)
                (message.audioSessionId = $util.Long.fromValue(object.audioSessionId)).unsigned = true;
            else if (typeof object.audioSessionId === "string")
                message.audioSessionId = parseInt(object.audioSessionId, 10);
            else if (typeof object.audioSessionId === "number")
                message.audioSessionId = object.audioSessionId;
            else if (typeof object.audioSessionId === "object")
                message.audioSessionId = new $util.LongBits(object.audioSessionId.low >>> 0, object.audioSessionId.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a SdkJoinFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkJoinFrame
     * @static
     * @param {SdkJoinFrame} message SdkJoinFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkJoinFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.protocolVersion = 2;
            object.maxNumOfVideos = 8;
            object.flags = 0;
            object.clientDetails = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.audioSessionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.audioSessionId = options.longs === String ? "0" : 0;
        }
        if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
            object.protocolVersion = message.protocolVersion;
        if (message.maxNumOfVideos != null && message.hasOwnProperty("maxNumOfVideos"))
            object.maxNumOfVideos = message.maxNumOfVideos;
        if (message.flags != null && message.hasOwnProperty("flags"))
            object.flags = message.flags;
        if (message.clientDetails != null && message.hasOwnProperty("clientDetails"))
            object.clientDetails = $root.SdkClientDetails.toObject(message.clientDetails, options);
        if (message.audioSessionId != null && message.hasOwnProperty("audioSessionId"))
            if (typeof message.audioSessionId === "number")
                object.audioSessionId = options.longs === String ? String(message.audioSessionId) : message.audioSessionId;
            else
                object.audioSessionId = options.longs === String ? $util.Long.prototype.toString.call(message.audioSessionId) : options.longs === Number ? new $util.LongBits(message.audioSessionId.low >>> 0, message.audioSessionId.high >>> 0).toNumber(true) : message.audioSessionId;
        return object;
    };

    /**
     * Converts this SdkJoinFrame to JSON.
     * @function toJSON
     * @memberof SdkJoinFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkJoinFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkJoinFrame;
})();

$root.SdkJoinAckFrame = (function() {

    /**
     * Properties of a SdkJoinAckFrame.
     * @exports ISdkJoinAckFrame
     * @interface ISdkJoinAckFrame
     * @property {ISdkTurnCredentials|null} [turnCredentials] SdkJoinAckFrame turnCredentials
     */

    /**
     * Constructs a new SdkJoinAckFrame.
     * @exports SdkJoinAckFrame
     * @classdesc Represents a SdkJoinAckFrame.
     * @implements ISdkJoinAckFrame
     * @constructor
     * @param {ISdkJoinAckFrame=} [properties] Properties to set
     */
    function SdkJoinAckFrame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkJoinAckFrame turnCredentials.
     * @member {ISdkTurnCredentials|null|undefined} turnCredentials
     * @memberof SdkJoinAckFrame
     * @instance
     */
    SdkJoinAckFrame.prototype.turnCredentials = null;

    /**
     * Creates a new SdkJoinAckFrame instance using the specified properties.
     * @function create
     * @memberof SdkJoinAckFrame
     * @static
     * @param {ISdkJoinAckFrame=} [properties] Properties to set
     * @returns {SdkJoinAckFrame} SdkJoinAckFrame instance
     */
    SdkJoinAckFrame.create = function create(properties) {
        return new SdkJoinAckFrame(properties);
    };

    /**
     * Encodes the specified SdkJoinAckFrame message. Does not implicitly {@link SdkJoinAckFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkJoinAckFrame
     * @static
     * @param {ISdkJoinAckFrame} message SdkJoinAckFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkJoinAckFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.turnCredentials != null && message.hasOwnProperty("turnCredentials"))
            $root.SdkTurnCredentials.encode(message.turnCredentials, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SdkJoinAckFrame message, length delimited. Does not implicitly {@link SdkJoinAckFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkJoinAckFrame
     * @static
     * @param {ISdkJoinAckFrame} message SdkJoinAckFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkJoinAckFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkJoinAckFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkJoinAckFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkJoinAckFrame} SdkJoinAckFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkJoinAckFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkJoinAckFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.turnCredentials = $root.SdkTurnCredentials.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkJoinAckFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkJoinAckFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkJoinAckFrame} SdkJoinAckFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkJoinAckFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkJoinAckFrame message.
     * @function verify
     * @memberof SdkJoinAckFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkJoinAckFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.turnCredentials != null && message.hasOwnProperty("turnCredentials")) {
            var error = $root.SdkTurnCredentials.verify(message.turnCredentials);
            if (error)
                return "turnCredentials." + error;
        }
        return null;
    };

    /**
     * Creates a SdkJoinAckFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkJoinAckFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkJoinAckFrame} SdkJoinAckFrame
     */
    SdkJoinAckFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkJoinAckFrame)
            return object;
        var message = new $root.SdkJoinAckFrame();
        if (object.turnCredentials != null) {
            if (typeof object.turnCredentials !== "object")
                throw TypeError(".SdkJoinAckFrame.turnCredentials: object expected");
            message.turnCredentials = $root.SdkTurnCredentials.fromObject(object.turnCredentials);
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkJoinAckFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkJoinAckFrame
     * @static
     * @param {SdkJoinAckFrame} message SdkJoinAckFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkJoinAckFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.turnCredentials = null;
        if (message.turnCredentials != null && message.hasOwnProperty("turnCredentials"))
            object.turnCredentials = $root.SdkTurnCredentials.toObject(message.turnCredentials, options);
        return object;
    };

    /**
     * Converts this SdkJoinAckFrame to JSON.
     * @function toJSON
     * @memberof SdkJoinAckFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkJoinAckFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkJoinAckFrame;
})();

$root.SdkLeaveFrame = (function() {

    /**
     * Properties of a SdkLeaveFrame.
     * @exports ISdkLeaveFrame
     * @interface ISdkLeaveFrame
     */

    /**
     * Constructs a new SdkLeaveFrame.
     * @exports SdkLeaveFrame
     * @classdesc Represents a SdkLeaveFrame.
     * @implements ISdkLeaveFrame
     * @constructor
     * @param {ISdkLeaveFrame=} [properties] Properties to set
     */
    function SdkLeaveFrame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new SdkLeaveFrame instance using the specified properties.
     * @function create
     * @memberof SdkLeaveFrame
     * @static
     * @param {ISdkLeaveFrame=} [properties] Properties to set
     * @returns {SdkLeaveFrame} SdkLeaveFrame instance
     */
    SdkLeaveFrame.create = function create(properties) {
        return new SdkLeaveFrame(properties);
    };

    /**
     * Encodes the specified SdkLeaveFrame message. Does not implicitly {@link SdkLeaveFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkLeaveFrame
     * @static
     * @param {ISdkLeaveFrame} message SdkLeaveFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkLeaveFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified SdkLeaveFrame message, length delimited. Does not implicitly {@link SdkLeaveFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkLeaveFrame
     * @static
     * @param {ISdkLeaveFrame} message SdkLeaveFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkLeaveFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkLeaveFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkLeaveFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkLeaveFrame} SdkLeaveFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkLeaveFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkLeaveFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkLeaveFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkLeaveFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkLeaveFrame} SdkLeaveFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkLeaveFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkLeaveFrame message.
     * @function verify
     * @memberof SdkLeaveFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkLeaveFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a SdkLeaveFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkLeaveFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkLeaveFrame} SdkLeaveFrame
     */
    SdkLeaveFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkLeaveFrame)
            return object;
        return new $root.SdkLeaveFrame();
    };

    /**
     * Creates a plain object from a SdkLeaveFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkLeaveFrame
     * @static
     * @param {SdkLeaveFrame} message SdkLeaveFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkLeaveFrame.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this SdkLeaveFrame to JSON.
     * @function toJSON
     * @memberof SdkLeaveFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkLeaveFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkLeaveFrame;
})();

$root.SdkLeaveAckFrame = (function() {

    /**
     * Properties of a SdkLeaveAckFrame.
     * @exports ISdkLeaveAckFrame
     * @interface ISdkLeaveAckFrame
     */

    /**
     * Constructs a new SdkLeaveAckFrame.
     * @exports SdkLeaveAckFrame
     * @classdesc Represents a SdkLeaveAckFrame.
     * @implements ISdkLeaveAckFrame
     * @constructor
     * @param {ISdkLeaveAckFrame=} [properties] Properties to set
     */
    function SdkLeaveAckFrame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new SdkLeaveAckFrame instance using the specified properties.
     * @function create
     * @memberof SdkLeaveAckFrame
     * @static
     * @param {ISdkLeaveAckFrame=} [properties] Properties to set
     * @returns {SdkLeaveAckFrame} SdkLeaveAckFrame instance
     */
    SdkLeaveAckFrame.create = function create(properties) {
        return new SdkLeaveAckFrame(properties);
    };

    /**
     * Encodes the specified SdkLeaveAckFrame message. Does not implicitly {@link SdkLeaveAckFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkLeaveAckFrame
     * @static
     * @param {ISdkLeaveAckFrame} message SdkLeaveAckFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkLeaveAckFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified SdkLeaveAckFrame message, length delimited. Does not implicitly {@link SdkLeaveAckFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkLeaveAckFrame
     * @static
     * @param {ISdkLeaveAckFrame} message SdkLeaveAckFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkLeaveAckFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkLeaveAckFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkLeaveAckFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkLeaveAckFrame} SdkLeaveAckFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkLeaveAckFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkLeaveAckFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkLeaveAckFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkLeaveAckFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkLeaveAckFrame} SdkLeaveAckFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkLeaveAckFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkLeaveAckFrame message.
     * @function verify
     * @memberof SdkLeaveAckFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkLeaveAckFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a SdkLeaveAckFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkLeaveAckFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkLeaveAckFrame} SdkLeaveAckFrame
     */
    SdkLeaveAckFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkLeaveAckFrame)
            return object;
        return new $root.SdkLeaveAckFrame();
    };

    /**
     * Creates a plain object from a SdkLeaveAckFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkLeaveAckFrame
     * @static
     * @param {SdkLeaveAckFrame} message SdkLeaveAckFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkLeaveAckFrame.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this SdkLeaveAckFrame to JSON.
     * @function toJSON
     * @memberof SdkLeaveAckFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkLeaveAckFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkLeaveAckFrame;
})();

/**
 * SdkStreamServiceType enum.
 * @exports SdkStreamServiceType
 * @enum {string}
 * @property {number} RX=1 RX value
 * @property {number} TX=2 TX value
 * @property {number} DUPLEX=3 DUPLEX value
 */
$root.SdkStreamServiceType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "RX"] = 1;
    values[valuesById[2] = "TX"] = 2;
    values[valuesById[3] = "DUPLEX"] = 3;
    return values;
})();

/**
 * SdkStreamMediaType enum.
 * @exports SdkStreamMediaType
 * @enum {string}
 * @property {number} AUDIO=1 AUDIO value
 * @property {number} VIDEO=2 VIDEO value
 */
$root.SdkStreamMediaType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "AUDIO"] = 1;
    values[valuesById[2] = "VIDEO"] = 2;
    return values;
})();

$root.SdkSubscribeFrame = (function() {

    /**
     * Properties of a SdkSubscribeFrame.
     * @exports ISdkSubscribeFrame
     * @interface ISdkSubscribeFrame
     * @property {SdkStreamServiceType|null} [duplex] SdkSubscribeFrame duplex
     * @property {Array.<ISdkStreamDescriptor>|null} [sendStreams] SdkSubscribeFrame sendStreams
     * @property {Array.<number>|null} [receiveStreamIds] SdkSubscribeFrame receiveStreamIds
     * @property {string|null} [sdpOffer] SdkSubscribeFrame sdpOffer
     * @property {string|null} [audioHost] SdkSubscribeFrame audioHost
     * @property {boolean|null} [audioCheckin] SdkSubscribeFrame audioCheckin
     * @property {boolean|null} [audioMuted] SdkSubscribeFrame audioMuted
     */

    /**
     * Constructs a new SdkSubscribeFrame.
     * @exports SdkSubscribeFrame
     * @classdesc Represents a SdkSubscribeFrame.
     * @implements ISdkSubscribeFrame
     * @constructor
     * @param {ISdkSubscribeFrame=} [properties] Properties to set
     */
    function SdkSubscribeFrame(properties) {
        this.sendStreams = [];
        this.receiveStreamIds = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkSubscribeFrame duplex.
     * @member {SdkStreamServiceType} duplex
     * @memberof SdkSubscribeFrame
     * @instance
     */
    SdkSubscribeFrame.prototype.duplex = 1;

    /**
     * SdkSubscribeFrame sendStreams.
     * @member {Array.<ISdkStreamDescriptor>} sendStreams
     * @memberof SdkSubscribeFrame
     * @instance
     */
    SdkSubscribeFrame.prototype.sendStreams = $util.emptyArray;

    /**
     * SdkSubscribeFrame receiveStreamIds.
     * @member {Array.<number>} receiveStreamIds
     * @memberof SdkSubscribeFrame
     * @instance
     */
    SdkSubscribeFrame.prototype.receiveStreamIds = $util.emptyArray;

    /**
     * SdkSubscribeFrame sdpOffer.
     * @member {string} sdpOffer
     * @memberof SdkSubscribeFrame
     * @instance
     */
    SdkSubscribeFrame.prototype.sdpOffer = "";

    /**
     * SdkSubscribeFrame audioHost.
     * @member {string} audioHost
     * @memberof SdkSubscribeFrame
     * @instance
     */
    SdkSubscribeFrame.prototype.audioHost = "";

    /**
     * SdkSubscribeFrame audioCheckin.
     * @member {boolean} audioCheckin
     * @memberof SdkSubscribeFrame
     * @instance
     */
    SdkSubscribeFrame.prototype.audioCheckin = false;

    /**
     * SdkSubscribeFrame audioMuted.
     * @member {boolean} audioMuted
     * @memberof SdkSubscribeFrame
     * @instance
     */
    SdkSubscribeFrame.prototype.audioMuted = false;

    /**
     * Creates a new SdkSubscribeFrame instance using the specified properties.
     * @function create
     * @memberof SdkSubscribeFrame
     * @static
     * @param {ISdkSubscribeFrame=} [properties] Properties to set
     * @returns {SdkSubscribeFrame} SdkSubscribeFrame instance
     */
    SdkSubscribeFrame.create = function create(properties) {
        return new SdkSubscribeFrame(properties);
    };

    /**
     * Encodes the specified SdkSubscribeFrame message. Does not implicitly {@link SdkSubscribeFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkSubscribeFrame
     * @static
     * @param {ISdkSubscribeFrame} message SdkSubscribeFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkSubscribeFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.duplex != null && message.hasOwnProperty("duplex"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.duplex);
        if (message.sendStreams != null && message.sendStreams.length)
            for (var i = 0; i < message.sendStreams.length; ++i)
                $root.SdkStreamDescriptor.encode(message.sendStreams[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.receiveStreamIds != null && message.receiveStreamIds.length)
            for (var i = 0; i < message.receiveStreamIds.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.receiveStreamIds[i]);
        if (message.sdpOffer != null && message.hasOwnProperty("sdpOffer"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.sdpOffer);
        if (message.audioHost != null && message.hasOwnProperty("audioHost"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.audioHost);
        if (message.audioCheckin != null && message.hasOwnProperty("audioCheckin"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.audioCheckin);
        if (message.audioMuted != null && message.hasOwnProperty("audioMuted"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.audioMuted);
        return writer;
    };

    /**
     * Encodes the specified SdkSubscribeFrame message, length delimited. Does not implicitly {@link SdkSubscribeFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkSubscribeFrame
     * @static
     * @param {ISdkSubscribeFrame} message SdkSubscribeFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkSubscribeFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkSubscribeFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkSubscribeFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkSubscribeFrame} SdkSubscribeFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkSubscribeFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkSubscribeFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.duplex = reader.int32();
                break;
            case 2:
                if (!(message.sendStreams && message.sendStreams.length))
                    message.sendStreams = [];
                message.sendStreams.push($root.SdkStreamDescriptor.decode(reader, reader.uint32()));
                break;
            case 3:
                if (!(message.receiveStreamIds && message.receiveStreamIds.length))
                    message.receiveStreamIds = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.receiveStreamIds.push(reader.uint32());
                } else
                    message.receiveStreamIds.push(reader.uint32());
                break;
            case 4:
                message.sdpOffer = reader.string();
                break;
            case 5:
                message.audioHost = reader.string();
                break;
            case 6:
                message.audioCheckin = reader.bool();
                break;
            case 7:
                message.audioMuted = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkSubscribeFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkSubscribeFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkSubscribeFrame} SdkSubscribeFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkSubscribeFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkSubscribeFrame message.
     * @function verify
     * @memberof SdkSubscribeFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkSubscribeFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.duplex != null && message.hasOwnProperty("duplex"))
            switch (message.duplex) {
            default:
                return "duplex: enum value expected";
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.sendStreams != null && message.hasOwnProperty("sendStreams")) {
            if (!Array.isArray(message.sendStreams))
                return "sendStreams: array expected";
            for (var i = 0; i < message.sendStreams.length; ++i) {
                var error = $root.SdkStreamDescriptor.verify(message.sendStreams[i]);
                if (error)
                    return "sendStreams." + error;
            }
        }
        if (message.receiveStreamIds != null && message.hasOwnProperty("receiveStreamIds")) {
            if (!Array.isArray(message.receiveStreamIds))
                return "receiveStreamIds: array expected";
            for (var i = 0; i < message.receiveStreamIds.length; ++i)
                if (!$util.isInteger(message.receiveStreamIds[i]))
                    return "receiveStreamIds: integer[] expected";
        }
        if (message.sdpOffer != null && message.hasOwnProperty("sdpOffer"))
            if (!$util.isString(message.sdpOffer))
                return "sdpOffer: string expected";
        if (message.audioHost != null && message.hasOwnProperty("audioHost"))
            if (!$util.isString(message.audioHost))
                return "audioHost: string expected";
        if (message.audioCheckin != null && message.hasOwnProperty("audioCheckin"))
            if (typeof message.audioCheckin !== "boolean")
                return "audioCheckin: boolean expected";
        if (message.audioMuted != null && message.hasOwnProperty("audioMuted"))
            if (typeof message.audioMuted !== "boolean")
                return "audioMuted: boolean expected";
        return null;
    };

    /**
     * Creates a SdkSubscribeFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkSubscribeFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkSubscribeFrame} SdkSubscribeFrame
     */
    SdkSubscribeFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkSubscribeFrame)
            return object;
        var message = new $root.SdkSubscribeFrame();
        switch (object.duplex) {
        case "RX":
        case 1:
            message.duplex = 1;
            break;
        case "TX":
        case 2:
            message.duplex = 2;
            break;
        case "DUPLEX":
        case 3:
            message.duplex = 3;
            break;
        }
        if (object.sendStreams) {
            if (!Array.isArray(object.sendStreams))
                throw TypeError(".SdkSubscribeFrame.sendStreams: array expected");
            message.sendStreams = [];
            for (var i = 0; i < object.sendStreams.length; ++i) {
                if (typeof object.sendStreams[i] !== "object")
                    throw TypeError(".SdkSubscribeFrame.sendStreams: object expected");
                message.sendStreams[i] = $root.SdkStreamDescriptor.fromObject(object.sendStreams[i]);
            }
        }
        if (object.receiveStreamIds) {
            if (!Array.isArray(object.receiveStreamIds))
                throw TypeError(".SdkSubscribeFrame.receiveStreamIds: array expected");
            message.receiveStreamIds = [];
            for (var i = 0; i < object.receiveStreamIds.length; ++i)
                message.receiveStreamIds[i] = object.receiveStreamIds[i] >>> 0;
        }
        if (object.sdpOffer != null)
            message.sdpOffer = String(object.sdpOffer);
        if (object.audioHost != null)
            message.audioHost = String(object.audioHost);
        if (object.audioCheckin != null)
            message.audioCheckin = Boolean(object.audioCheckin);
        if (object.audioMuted != null)
            message.audioMuted = Boolean(object.audioMuted);
        return message;
    };

    /**
     * Creates a plain object from a SdkSubscribeFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkSubscribeFrame
     * @static
     * @param {SdkSubscribeFrame} message SdkSubscribeFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkSubscribeFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.sendStreams = [];
            object.receiveStreamIds = [];
        }
        if (options.defaults) {
            object.duplex = options.enums === String ? "RX" : 1;
            object.sdpOffer = "";
            object.audioHost = "";
            object.audioCheckin = false;
            object.audioMuted = false;
        }
        if (message.duplex != null && message.hasOwnProperty("duplex"))
            object.duplex = options.enums === String ? $root.SdkStreamServiceType[message.duplex] : message.duplex;
        if (message.sendStreams && message.sendStreams.length) {
            object.sendStreams = [];
            for (var j = 0; j < message.sendStreams.length; ++j)
                object.sendStreams[j] = $root.SdkStreamDescriptor.toObject(message.sendStreams[j], options);
        }
        if (message.receiveStreamIds && message.receiveStreamIds.length) {
            object.receiveStreamIds = [];
            for (var j = 0; j < message.receiveStreamIds.length; ++j)
                object.receiveStreamIds[j] = message.receiveStreamIds[j];
        }
        if (message.sdpOffer != null && message.hasOwnProperty("sdpOffer"))
            object.sdpOffer = message.sdpOffer;
        if (message.audioHost != null && message.hasOwnProperty("audioHost"))
            object.audioHost = message.audioHost;
        if (message.audioCheckin != null && message.hasOwnProperty("audioCheckin"))
            object.audioCheckin = message.audioCheckin;
        if (message.audioMuted != null && message.hasOwnProperty("audioMuted"))
            object.audioMuted = message.audioMuted;
        return object;
    };

    /**
     * Converts this SdkSubscribeFrame to JSON.
     * @function toJSON
     * @memberof SdkSubscribeFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkSubscribeFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkSubscribeFrame;
})();

$root.SdkSubscribeAckFrame = (function() {

    /**
     * Properties of a SdkSubscribeAckFrame.
     * @exports ISdkSubscribeAckFrame
     * @interface ISdkSubscribeAckFrame
     * @property {SdkStreamServiceType|null} [duplex] SdkSubscribeAckFrame duplex
     * @property {Array.<ISdkStreamAllocation>|null} [allocations] SdkSubscribeAckFrame allocations
     * @property {string|null} [sdpAnswer] SdkSubscribeAckFrame sdpAnswer
     * @property {Array.<ISdkTrackMapping>|null} [tracks] SdkSubscribeAckFrame tracks
     */

    /**
     * Constructs a new SdkSubscribeAckFrame.
     * @exports SdkSubscribeAckFrame
     * @classdesc Represents a SdkSubscribeAckFrame.
     * @implements ISdkSubscribeAckFrame
     * @constructor
     * @param {ISdkSubscribeAckFrame=} [properties] Properties to set
     */
    function SdkSubscribeAckFrame(properties) {
        this.allocations = [];
        this.tracks = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkSubscribeAckFrame duplex.
     * @member {SdkStreamServiceType} duplex
     * @memberof SdkSubscribeAckFrame
     * @instance
     */
    SdkSubscribeAckFrame.prototype.duplex = 1;

    /**
     * SdkSubscribeAckFrame allocations.
     * @member {Array.<ISdkStreamAllocation>} allocations
     * @memberof SdkSubscribeAckFrame
     * @instance
     */
    SdkSubscribeAckFrame.prototype.allocations = $util.emptyArray;

    /**
     * SdkSubscribeAckFrame sdpAnswer.
     * @member {string} sdpAnswer
     * @memberof SdkSubscribeAckFrame
     * @instance
     */
    SdkSubscribeAckFrame.prototype.sdpAnswer = "";

    /**
     * SdkSubscribeAckFrame tracks.
     * @member {Array.<ISdkTrackMapping>} tracks
     * @memberof SdkSubscribeAckFrame
     * @instance
     */
    SdkSubscribeAckFrame.prototype.tracks = $util.emptyArray;

    /**
     * Creates a new SdkSubscribeAckFrame instance using the specified properties.
     * @function create
     * @memberof SdkSubscribeAckFrame
     * @static
     * @param {ISdkSubscribeAckFrame=} [properties] Properties to set
     * @returns {SdkSubscribeAckFrame} SdkSubscribeAckFrame instance
     */
    SdkSubscribeAckFrame.create = function create(properties) {
        return new SdkSubscribeAckFrame(properties);
    };

    /**
     * Encodes the specified SdkSubscribeAckFrame message. Does not implicitly {@link SdkSubscribeAckFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkSubscribeAckFrame
     * @static
     * @param {ISdkSubscribeAckFrame} message SdkSubscribeAckFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkSubscribeAckFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.duplex != null && message.hasOwnProperty("duplex"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.duplex);
        if (message.allocations != null && message.allocations.length)
            for (var i = 0; i < message.allocations.length; ++i)
                $root.SdkStreamAllocation.encode(message.allocations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.sdpAnswer != null && message.hasOwnProperty("sdpAnswer"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.sdpAnswer);
        if (message.tracks != null && message.tracks.length)
            for (var i = 0; i < message.tracks.length; ++i)
                $root.SdkTrackMapping.encode(message.tracks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SdkSubscribeAckFrame message, length delimited. Does not implicitly {@link SdkSubscribeAckFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkSubscribeAckFrame
     * @static
     * @param {ISdkSubscribeAckFrame} message SdkSubscribeAckFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkSubscribeAckFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkSubscribeAckFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkSubscribeAckFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkSubscribeAckFrame} SdkSubscribeAckFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkSubscribeAckFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkSubscribeAckFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.duplex = reader.int32();
                break;
            case 2:
                if (!(message.allocations && message.allocations.length))
                    message.allocations = [];
                message.allocations.push($root.SdkStreamAllocation.decode(reader, reader.uint32()));
                break;
            case 3:
                message.sdpAnswer = reader.string();
                break;
            case 4:
                if (!(message.tracks && message.tracks.length))
                    message.tracks = [];
                message.tracks.push($root.SdkTrackMapping.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkSubscribeAckFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkSubscribeAckFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkSubscribeAckFrame} SdkSubscribeAckFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkSubscribeAckFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkSubscribeAckFrame message.
     * @function verify
     * @memberof SdkSubscribeAckFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkSubscribeAckFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.duplex != null && message.hasOwnProperty("duplex"))
            switch (message.duplex) {
            default:
                return "duplex: enum value expected";
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.allocations != null && message.hasOwnProperty("allocations")) {
            if (!Array.isArray(message.allocations))
                return "allocations: array expected";
            for (var i = 0; i < message.allocations.length; ++i) {
                var error = $root.SdkStreamAllocation.verify(message.allocations[i]);
                if (error)
                    return "allocations." + error;
            }
        }
        if (message.sdpAnswer != null && message.hasOwnProperty("sdpAnswer"))
            if (!$util.isString(message.sdpAnswer))
                return "sdpAnswer: string expected";
        if (message.tracks != null && message.hasOwnProperty("tracks")) {
            if (!Array.isArray(message.tracks))
                return "tracks: array expected";
            for (var i = 0; i < message.tracks.length; ++i) {
                var error = $root.SdkTrackMapping.verify(message.tracks[i]);
                if (error)
                    return "tracks." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SdkSubscribeAckFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkSubscribeAckFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkSubscribeAckFrame} SdkSubscribeAckFrame
     */
    SdkSubscribeAckFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkSubscribeAckFrame)
            return object;
        var message = new $root.SdkSubscribeAckFrame();
        switch (object.duplex) {
        case "RX":
        case 1:
            message.duplex = 1;
            break;
        case "TX":
        case 2:
            message.duplex = 2;
            break;
        case "DUPLEX":
        case 3:
            message.duplex = 3;
            break;
        }
        if (object.allocations) {
            if (!Array.isArray(object.allocations))
                throw TypeError(".SdkSubscribeAckFrame.allocations: array expected");
            message.allocations = [];
            for (var i = 0; i < object.allocations.length; ++i) {
                if (typeof object.allocations[i] !== "object")
                    throw TypeError(".SdkSubscribeAckFrame.allocations: object expected");
                message.allocations[i] = $root.SdkStreamAllocation.fromObject(object.allocations[i]);
            }
        }
        if (object.sdpAnswer != null)
            message.sdpAnswer = String(object.sdpAnswer);
        if (object.tracks) {
            if (!Array.isArray(object.tracks))
                throw TypeError(".SdkSubscribeAckFrame.tracks: array expected");
            message.tracks = [];
            for (var i = 0; i < object.tracks.length; ++i) {
                if (typeof object.tracks[i] !== "object")
                    throw TypeError(".SdkSubscribeAckFrame.tracks: object expected");
                message.tracks[i] = $root.SdkTrackMapping.fromObject(object.tracks[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkSubscribeAckFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkSubscribeAckFrame
     * @static
     * @param {SdkSubscribeAckFrame} message SdkSubscribeAckFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkSubscribeAckFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.allocations = [];
            object.tracks = [];
        }
        if (options.defaults) {
            object.duplex = options.enums === String ? "RX" : 1;
            object.sdpAnswer = "";
        }
        if (message.duplex != null && message.hasOwnProperty("duplex"))
            object.duplex = options.enums === String ? $root.SdkStreamServiceType[message.duplex] : message.duplex;
        if (message.allocations && message.allocations.length) {
            object.allocations = [];
            for (var j = 0; j < message.allocations.length; ++j)
                object.allocations[j] = $root.SdkStreamAllocation.toObject(message.allocations[j], options);
        }
        if (message.sdpAnswer != null && message.hasOwnProperty("sdpAnswer"))
            object.sdpAnswer = message.sdpAnswer;
        if (message.tracks && message.tracks.length) {
            object.tracks = [];
            for (var j = 0; j < message.tracks.length; ++j)
                object.tracks[j] = $root.SdkTrackMapping.toObject(message.tracks[j], options);
        }
        return object;
    };

    /**
     * Converts this SdkSubscribeAckFrame to JSON.
     * @function toJSON
     * @memberof SdkSubscribeAckFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkSubscribeAckFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkSubscribeAckFrame;
})();

$root.SdkIndexFrame = (function() {

    /**
     * Properties of a SdkIndexFrame.
     * @exports ISdkIndexFrame
     * @interface ISdkIndexFrame
     * @property {boolean|null} [atCapacity] SdkIndexFrame atCapacity
     * @property {Array.<ISdkStreamDescriptor>|null} [sources] SdkIndexFrame sources
     * @property {Array.<number>|null} [pausedAtSourceIds] SdkIndexFrame pausedAtSourceIds
     * @property {number|null} [numParticipants] SdkIndexFrame numParticipants
     */

    /**
     * Constructs a new SdkIndexFrame.
     * @exports SdkIndexFrame
     * @classdesc Represents a SdkIndexFrame.
     * @implements ISdkIndexFrame
     * @constructor
     * @param {ISdkIndexFrame=} [properties] Properties to set
     */
    function SdkIndexFrame(properties) {
        this.sources = [];
        this.pausedAtSourceIds = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkIndexFrame atCapacity.
     * @member {boolean} atCapacity
     * @memberof SdkIndexFrame
     * @instance
     */
    SdkIndexFrame.prototype.atCapacity = false;

    /**
     * SdkIndexFrame sources.
     * @member {Array.<ISdkStreamDescriptor>} sources
     * @memberof SdkIndexFrame
     * @instance
     */
    SdkIndexFrame.prototype.sources = $util.emptyArray;

    /**
     * SdkIndexFrame pausedAtSourceIds.
     * @member {Array.<number>} pausedAtSourceIds
     * @memberof SdkIndexFrame
     * @instance
     */
    SdkIndexFrame.prototype.pausedAtSourceIds = $util.emptyArray;

    /**
     * SdkIndexFrame numParticipants.
     * @member {number} numParticipants
     * @memberof SdkIndexFrame
     * @instance
     */
    SdkIndexFrame.prototype.numParticipants = 0;

    /**
     * Creates a new SdkIndexFrame instance using the specified properties.
     * @function create
     * @memberof SdkIndexFrame
     * @static
     * @param {ISdkIndexFrame=} [properties] Properties to set
     * @returns {SdkIndexFrame} SdkIndexFrame instance
     */
    SdkIndexFrame.create = function create(properties) {
        return new SdkIndexFrame(properties);
    };

    /**
     * Encodes the specified SdkIndexFrame message. Does not implicitly {@link SdkIndexFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkIndexFrame
     * @static
     * @param {ISdkIndexFrame} message SdkIndexFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkIndexFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.atCapacity != null && message.hasOwnProperty("atCapacity"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.atCapacity);
        if (message.sources != null && message.sources.length)
            for (var i = 0; i < message.sources.length; ++i)
                $root.SdkStreamDescriptor.encode(message.sources[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.pausedAtSourceIds != null && message.pausedAtSourceIds.length)
            for (var i = 0; i < message.pausedAtSourceIds.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.pausedAtSourceIds[i]);
        if (message.numParticipants != null && message.hasOwnProperty("numParticipants"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.numParticipants);
        return writer;
    };

    /**
     * Encodes the specified SdkIndexFrame message, length delimited. Does not implicitly {@link SdkIndexFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkIndexFrame
     * @static
     * @param {ISdkIndexFrame} message SdkIndexFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkIndexFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkIndexFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkIndexFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkIndexFrame} SdkIndexFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkIndexFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkIndexFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.atCapacity = reader.bool();
                break;
            case 2:
                if (!(message.sources && message.sources.length))
                    message.sources = [];
                message.sources.push($root.SdkStreamDescriptor.decode(reader, reader.uint32()));
                break;
            case 3:
                if (!(message.pausedAtSourceIds && message.pausedAtSourceIds.length))
                    message.pausedAtSourceIds = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.pausedAtSourceIds.push(reader.uint32());
                } else
                    message.pausedAtSourceIds.push(reader.uint32());
                break;
            case 4:
                message.numParticipants = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkIndexFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkIndexFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkIndexFrame} SdkIndexFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkIndexFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkIndexFrame message.
     * @function verify
     * @memberof SdkIndexFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkIndexFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.atCapacity != null && message.hasOwnProperty("atCapacity"))
            if (typeof message.atCapacity !== "boolean")
                return "atCapacity: boolean expected";
        if (message.sources != null && message.hasOwnProperty("sources")) {
            if (!Array.isArray(message.sources))
                return "sources: array expected";
            for (var i = 0; i < message.sources.length; ++i) {
                var error = $root.SdkStreamDescriptor.verify(message.sources[i]);
                if (error)
                    return "sources." + error;
            }
        }
        if (message.pausedAtSourceIds != null && message.hasOwnProperty("pausedAtSourceIds")) {
            if (!Array.isArray(message.pausedAtSourceIds))
                return "pausedAtSourceIds: array expected";
            for (var i = 0; i < message.pausedAtSourceIds.length; ++i)
                if (!$util.isInteger(message.pausedAtSourceIds[i]))
                    return "pausedAtSourceIds: integer[] expected";
        }
        if (message.numParticipants != null && message.hasOwnProperty("numParticipants"))
            if (!$util.isInteger(message.numParticipants))
                return "numParticipants: integer expected";
        return null;
    };

    /**
     * Creates a SdkIndexFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkIndexFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkIndexFrame} SdkIndexFrame
     */
    SdkIndexFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkIndexFrame)
            return object;
        var message = new $root.SdkIndexFrame();
        if (object.atCapacity != null)
            message.atCapacity = Boolean(object.atCapacity);
        if (object.sources) {
            if (!Array.isArray(object.sources))
                throw TypeError(".SdkIndexFrame.sources: array expected");
            message.sources = [];
            for (var i = 0; i < object.sources.length; ++i) {
                if (typeof object.sources[i] !== "object")
                    throw TypeError(".SdkIndexFrame.sources: object expected");
                message.sources[i] = $root.SdkStreamDescriptor.fromObject(object.sources[i]);
            }
        }
        if (object.pausedAtSourceIds) {
            if (!Array.isArray(object.pausedAtSourceIds))
                throw TypeError(".SdkIndexFrame.pausedAtSourceIds: array expected");
            message.pausedAtSourceIds = [];
            for (var i = 0; i < object.pausedAtSourceIds.length; ++i)
                message.pausedAtSourceIds[i] = object.pausedAtSourceIds[i] >>> 0;
        }
        if (object.numParticipants != null)
            message.numParticipants = object.numParticipants >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SdkIndexFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkIndexFrame
     * @static
     * @param {SdkIndexFrame} message SdkIndexFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkIndexFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.sources = [];
            object.pausedAtSourceIds = [];
        }
        if (options.defaults) {
            object.atCapacity = false;
            object.numParticipants = 0;
        }
        if (message.atCapacity != null && message.hasOwnProperty("atCapacity"))
            object.atCapacity = message.atCapacity;
        if (message.sources && message.sources.length) {
            object.sources = [];
            for (var j = 0; j < message.sources.length; ++j)
                object.sources[j] = $root.SdkStreamDescriptor.toObject(message.sources[j], options);
        }
        if (message.pausedAtSourceIds && message.pausedAtSourceIds.length) {
            object.pausedAtSourceIds = [];
            for (var j = 0; j < message.pausedAtSourceIds.length; ++j)
                object.pausedAtSourceIds[j] = message.pausedAtSourceIds[j];
        }
        if (message.numParticipants != null && message.hasOwnProperty("numParticipants"))
            object.numParticipants = message.numParticipants;
        return object;
    };

    /**
     * Converts this SdkIndexFrame to JSON.
     * @function toJSON
     * @memberof SdkIndexFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkIndexFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkIndexFrame;
})();

$root.SdkPauseResumeFrame = (function() {

    /**
     * Properties of a SdkPauseResumeFrame.
     * @exports ISdkPauseResumeFrame
     * @interface ISdkPauseResumeFrame
     * @property {Array.<number>|null} [streamIds] SdkPauseResumeFrame streamIds
     */

    /**
     * Constructs a new SdkPauseResumeFrame.
     * @exports SdkPauseResumeFrame
     * @classdesc Represents a SdkPauseResumeFrame.
     * @implements ISdkPauseResumeFrame
     * @constructor
     * @param {ISdkPauseResumeFrame=} [properties] Properties to set
     */
    function SdkPauseResumeFrame(properties) {
        this.streamIds = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkPauseResumeFrame streamIds.
     * @member {Array.<number>} streamIds
     * @memberof SdkPauseResumeFrame
     * @instance
     */
    SdkPauseResumeFrame.prototype.streamIds = $util.emptyArray;

    /**
     * Creates a new SdkPauseResumeFrame instance using the specified properties.
     * @function create
     * @memberof SdkPauseResumeFrame
     * @static
     * @param {ISdkPauseResumeFrame=} [properties] Properties to set
     * @returns {SdkPauseResumeFrame} SdkPauseResumeFrame instance
     */
    SdkPauseResumeFrame.create = function create(properties) {
        return new SdkPauseResumeFrame(properties);
    };

    /**
     * Encodes the specified SdkPauseResumeFrame message. Does not implicitly {@link SdkPauseResumeFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkPauseResumeFrame
     * @static
     * @param {ISdkPauseResumeFrame} message SdkPauseResumeFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkPauseResumeFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.streamIds != null && message.streamIds.length)
            for (var i = 0; i < message.streamIds.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.streamIds[i]);
        return writer;
    };

    /**
     * Encodes the specified SdkPauseResumeFrame message, length delimited. Does not implicitly {@link SdkPauseResumeFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkPauseResumeFrame
     * @static
     * @param {ISdkPauseResumeFrame} message SdkPauseResumeFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkPauseResumeFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkPauseResumeFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkPauseResumeFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkPauseResumeFrame} SdkPauseResumeFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkPauseResumeFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkPauseResumeFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.streamIds && message.streamIds.length))
                    message.streamIds = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.streamIds.push(reader.uint32());
                } else
                    message.streamIds.push(reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkPauseResumeFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkPauseResumeFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkPauseResumeFrame} SdkPauseResumeFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkPauseResumeFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkPauseResumeFrame message.
     * @function verify
     * @memberof SdkPauseResumeFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkPauseResumeFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.streamIds != null && message.hasOwnProperty("streamIds")) {
            if (!Array.isArray(message.streamIds))
                return "streamIds: array expected";
            for (var i = 0; i < message.streamIds.length; ++i)
                if (!$util.isInteger(message.streamIds[i]))
                    return "streamIds: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a SdkPauseResumeFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkPauseResumeFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkPauseResumeFrame} SdkPauseResumeFrame
     */
    SdkPauseResumeFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkPauseResumeFrame)
            return object;
        var message = new $root.SdkPauseResumeFrame();
        if (object.streamIds) {
            if (!Array.isArray(object.streamIds))
                throw TypeError(".SdkPauseResumeFrame.streamIds: array expected");
            message.streamIds = [];
            for (var i = 0; i < object.streamIds.length; ++i)
                message.streamIds[i] = object.streamIds[i] >>> 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkPauseResumeFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkPauseResumeFrame
     * @static
     * @param {SdkPauseResumeFrame} message SdkPauseResumeFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkPauseResumeFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.streamIds = [];
        if (message.streamIds && message.streamIds.length) {
            object.streamIds = [];
            for (var j = 0; j < message.streamIds.length; ++j)
                object.streamIds[j] = message.streamIds[j];
        }
        return object;
    };

    /**
     * Converts this SdkPauseResumeFrame to JSON.
     * @function toJSON
     * @memberof SdkPauseResumeFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkPauseResumeFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkPauseResumeFrame;
})();

$root.SdkBitrateFrame = (function() {

    /**
     * Properties of a SdkBitrateFrame.
     * @exports ISdkBitrateFrame
     * @interface ISdkBitrateFrame
     * @property {Array.<ISdkBitrate>|null} [bitrates] SdkBitrateFrame bitrates
     */

    /**
     * Constructs a new SdkBitrateFrame.
     * @exports SdkBitrateFrame
     * @classdesc Represents a SdkBitrateFrame.
     * @implements ISdkBitrateFrame
     * @constructor
     * @param {ISdkBitrateFrame=} [properties] Properties to set
     */
    function SdkBitrateFrame(properties) {
        this.bitrates = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkBitrateFrame bitrates.
     * @member {Array.<ISdkBitrate>} bitrates
     * @memberof SdkBitrateFrame
     * @instance
     */
    SdkBitrateFrame.prototype.bitrates = $util.emptyArray;

    /**
     * Creates a new SdkBitrateFrame instance using the specified properties.
     * @function create
     * @memberof SdkBitrateFrame
     * @static
     * @param {ISdkBitrateFrame=} [properties] Properties to set
     * @returns {SdkBitrateFrame} SdkBitrateFrame instance
     */
    SdkBitrateFrame.create = function create(properties) {
        return new SdkBitrateFrame(properties);
    };

    /**
     * Encodes the specified SdkBitrateFrame message. Does not implicitly {@link SdkBitrateFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkBitrateFrame
     * @static
     * @param {ISdkBitrateFrame} message SdkBitrateFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkBitrateFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.bitrates != null && message.bitrates.length)
            for (var i = 0; i < message.bitrates.length; ++i)
                $root.SdkBitrate.encode(message.bitrates[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SdkBitrateFrame message, length delimited. Does not implicitly {@link SdkBitrateFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkBitrateFrame
     * @static
     * @param {ISdkBitrateFrame} message SdkBitrateFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkBitrateFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkBitrateFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkBitrateFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkBitrateFrame} SdkBitrateFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkBitrateFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkBitrateFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.bitrates && message.bitrates.length))
                    message.bitrates = [];
                message.bitrates.push($root.SdkBitrate.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkBitrateFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkBitrateFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkBitrateFrame} SdkBitrateFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkBitrateFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkBitrateFrame message.
     * @function verify
     * @memberof SdkBitrateFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkBitrateFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.bitrates != null && message.hasOwnProperty("bitrates")) {
            if (!Array.isArray(message.bitrates))
                return "bitrates: array expected";
            for (var i = 0; i < message.bitrates.length; ++i) {
                var error = $root.SdkBitrate.verify(message.bitrates[i]);
                if (error)
                    return "bitrates." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SdkBitrateFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkBitrateFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkBitrateFrame} SdkBitrateFrame
     */
    SdkBitrateFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkBitrateFrame)
            return object;
        var message = new $root.SdkBitrateFrame();
        if (object.bitrates) {
            if (!Array.isArray(object.bitrates))
                throw TypeError(".SdkBitrateFrame.bitrates: array expected");
            message.bitrates = [];
            for (var i = 0; i < object.bitrates.length; ++i) {
                if (typeof object.bitrates[i] !== "object")
                    throw TypeError(".SdkBitrateFrame.bitrates: object expected");
                message.bitrates[i] = $root.SdkBitrate.fromObject(object.bitrates[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkBitrateFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkBitrateFrame
     * @static
     * @param {SdkBitrateFrame} message SdkBitrateFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkBitrateFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.bitrates = [];
        if (message.bitrates && message.bitrates.length) {
            object.bitrates = [];
            for (var j = 0; j < message.bitrates.length; ++j)
                object.bitrates[j] = $root.SdkBitrate.toObject(message.bitrates[j], options);
        }
        return object;
    };

    /**
     * Converts this SdkBitrateFrame to JSON.
     * @function toJSON
     * @memberof SdkBitrateFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkBitrateFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkBitrateFrame;
})();

$root.SdkStreamDescriptor = (function() {

    /**
     * Properties of a SdkStreamDescriptor.
     * @exports ISdkStreamDescriptor
     * @interface ISdkStreamDescriptor
     * @property {number|null} [streamId] SdkStreamDescriptor streamId
     * @property {number|null} [framerate] SdkStreamDescriptor framerate
     * @property {number|null} [maxBitrateKbps] SdkStreamDescriptor maxBitrateKbps
     * @property {string|null} [trackLabel] SdkStreamDescriptor trackLabel
     * @property {number|null} [groupId] SdkStreamDescriptor groupId
     * @property {number|null} [avgBitrateBps] SdkStreamDescriptor avgBitrateBps
     * @property {string|null} [attendeeId] SdkStreamDescriptor attendeeId
     * @property {SdkStreamMediaType|null} [mediaType] SdkStreamDescriptor mediaType
     * @property {string|null} [externalUserId] SdkStreamDescriptor externalUserId
     */

    /**
     * Constructs a new SdkStreamDescriptor.
     * @exports SdkStreamDescriptor
     * @classdesc Represents a SdkStreamDescriptor.
     * @implements ISdkStreamDescriptor
     * @constructor
     * @param {ISdkStreamDescriptor=} [properties] Properties to set
     */
    function SdkStreamDescriptor(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkStreamDescriptor streamId.
     * @member {number} streamId
     * @memberof SdkStreamDescriptor
     * @instance
     */
    SdkStreamDescriptor.prototype.streamId = 0;

    /**
     * SdkStreamDescriptor framerate.
     * @member {number} framerate
     * @memberof SdkStreamDescriptor
     * @instance
     */
    SdkStreamDescriptor.prototype.framerate = 0;

    /**
     * SdkStreamDescriptor maxBitrateKbps.
     * @member {number} maxBitrateKbps
     * @memberof SdkStreamDescriptor
     * @instance
     */
    SdkStreamDescriptor.prototype.maxBitrateKbps = 0;

    /**
     * SdkStreamDescriptor trackLabel.
     * @member {string} trackLabel
     * @memberof SdkStreamDescriptor
     * @instance
     */
    SdkStreamDescriptor.prototype.trackLabel = "";

    /**
     * SdkStreamDescriptor groupId.
     * @member {number} groupId
     * @memberof SdkStreamDescriptor
     * @instance
     */
    SdkStreamDescriptor.prototype.groupId = 0;

    /**
     * SdkStreamDescriptor avgBitrateBps.
     * @member {number} avgBitrateBps
     * @memberof SdkStreamDescriptor
     * @instance
     */
    SdkStreamDescriptor.prototype.avgBitrateBps = 0;

    /**
     * SdkStreamDescriptor attendeeId.
     * @member {string} attendeeId
     * @memberof SdkStreamDescriptor
     * @instance
     */
    SdkStreamDescriptor.prototype.attendeeId = "";

    /**
     * SdkStreamDescriptor mediaType.
     * @member {SdkStreamMediaType} mediaType
     * @memberof SdkStreamDescriptor
     * @instance
     */
    SdkStreamDescriptor.prototype.mediaType = 1;

    /**
     * SdkStreamDescriptor externalUserId.
     * @member {string} externalUserId
     * @memberof SdkStreamDescriptor
     * @instance
     */
    SdkStreamDescriptor.prototype.externalUserId = "";

    /**
     * Creates a new SdkStreamDescriptor instance using the specified properties.
     * @function create
     * @memberof SdkStreamDescriptor
     * @static
     * @param {ISdkStreamDescriptor=} [properties] Properties to set
     * @returns {SdkStreamDescriptor} SdkStreamDescriptor instance
     */
    SdkStreamDescriptor.create = function create(properties) {
        return new SdkStreamDescriptor(properties);
    };

    /**
     * Encodes the specified SdkStreamDescriptor message. Does not implicitly {@link SdkStreamDescriptor.verify|verify} messages.
     * @function encode
     * @memberof SdkStreamDescriptor
     * @static
     * @param {ISdkStreamDescriptor} message SdkStreamDescriptor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkStreamDescriptor.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.streamId);
        if (message.framerate != null && message.hasOwnProperty("framerate"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.framerate);
        if (message.maxBitrateKbps != null && message.hasOwnProperty("maxBitrateKbps"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.maxBitrateKbps);
        if (message.trackLabel != null && message.hasOwnProperty("trackLabel"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trackLabel);
        if (message.groupId != null && message.hasOwnProperty("groupId"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.groupId);
        if (message.avgBitrateBps != null && message.hasOwnProperty("avgBitrateBps"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.avgBitrateBps);
        if (message.attendeeId != null && message.hasOwnProperty("attendeeId"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.attendeeId);
        if (message.mediaType != null && message.hasOwnProperty("mediaType"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.mediaType);
        if (message.externalUserId != null && message.hasOwnProperty("externalUserId"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.externalUserId);
        return writer;
    };

    /**
     * Encodes the specified SdkStreamDescriptor message, length delimited. Does not implicitly {@link SdkStreamDescriptor.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkStreamDescriptor
     * @static
     * @param {ISdkStreamDescriptor} message SdkStreamDescriptor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkStreamDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkStreamDescriptor message from the specified reader or buffer.
     * @function decode
     * @memberof SdkStreamDescriptor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkStreamDescriptor} SdkStreamDescriptor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkStreamDescriptor.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkStreamDescriptor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.streamId = reader.uint32();
                break;
            case 2:
                message.framerate = reader.uint32();
                break;
            case 3:
                message.maxBitrateKbps = reader.uint32();
                break;
            case 4:
                message.trackLabel = reader.string();
                break;
            case 6:
                message.groupId = reader.uint32();
                break;
            case 7:
                message.avgBitrateBps = reader.uint32();
                break;
            case 8:
                message.attendeeId = reader.string();
                break;
            case 9:
                message.mediaType = reader.int32();
                break;
            case 10:
                message.externalUserId = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkStreamDescriptor message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkStreamDescriptor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkStreamDescriptor} SdkStreamDescriptor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkStreamDescriptor.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkStreamDescriptor message.
     * @function verify
     * @memberof SdkStreamDescriptor
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkStreamDescriptor.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            if (!$util.isInteger(message.streamId))
                return "streamId: integer expected";
        if (message.framerate != null && message.hasOwnProperty("framerate"))
            if (!$util.isInteger(message.framerate))
                return "framerate: integer expected";
        if (message.maxBitrateKbps != null && message.hasOwnProperty("maxBitrateKbps"))
            if (!$util.isInteger(message.maxBitrateKbps))
                return "maxBitrateKbps: integer expected";
        if (message.trackLabel != null && message.hasOwnProperty("trackLabel"))
            if (!$util.isString(message.trackLabel))
                return "trackLabel: string expected";
        if (message.groupId != null && message.hasOwnProperty("groupId"))
            if (!$util.isInteger(message.groupId))
                return "groupId: integer expected";
        if (message.avgBitrateBps != null && message.hasOwnProperty("avgBitrateBps"))
            if (!$util.isInteger(message.avgBitrateBps))
                return "avgBitrateBps: integer expected";
        if (message.attendeeId != null && message.hasOwnProperty("attendeeId"))
            if (!$util.isString(message.attendeeId))
                return "attendeeId: string expected";
        if (message.mediaType != null && message.hasOwnProperty("mediaType"))
            switch (message.mediaType) {
            default:
                return "mediaType: enum value expected";
            case 1:
            case 2:
                break;
            }
        if (message.externalUserId != null && message.hasOwnProperty("externalUserId"))
            if (!$util.isString(message.externalUserId))
                return "externalUserId: string expected";
        return null;
    };

    /**
     * Creates a SdkStreamDescriptor message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkStreamDescriptor
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkStreamDescriptor} SdkStreamDescriptor
     */
    SdkStreamDescriptor.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkStreamDescriptor)
            return object;
        var message = new $root.SdkStreamDescriptor();
        if (object.streamId != null)
            message.streamId = object.streamId >>> 0;
        if (object.framerate != null)
            message.framerate = object.framerate >>> 0;
        if (object.maxBitrateKbps != null)
            message.maxBitrateKbps = object.maxBitrateKbps >>> 0;
        if (object.trackLabel != null)
            message.trackLabel = String(object.trackLabel);
        if (object.groupId != null)
            message.groupId = object.groupId >>> 0;
        if (object.avgBitrateBps != null)
            message.avgBitrateBps = object.avgBitrateBps >>> 0;
        if (object.attendeeId != null)
            message.attendeeId = String(object.attendeeId);
        switch (object.mediaType) {
        case "AUDIO":
        case 1:
            message.mediaType = 1;
            break;
        case "VIDEO":
        case 2:
            message.mediaType = 2;
            break;
        }
        if (object.externalUserId != null)
            message.externalUserId = String(object.externalUserId);
        return message;
    };

    /**
     * Creates a plain object from a SdkStreamDescriptor message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkStreamDescriptor
     * @static
     * @param {SdkStreamDescriptor} message SdkStreamDescriptor
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkStreamDescriptor.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.streamId = 0;
            object.framerate = 0;
            object.maxBitrateKbps = 0;
            object.trackLabel = "";
            object.groupId = 0;
            object.avgBitrateBps = 0;
            object.attendeeId = "";
            object.mediaType = options.enums === String ? "AUDIO" : 1;
            object.externalUserId = "";
        }
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            object.streamId = message.streamId;
        if (message.framerate != null && message.hasOwnProperty("framerate"))
            object.framerate = message.framerate;
        if (message.maxBitrateKbps != null && message.hasOwnProperty("maxBitrateKbps"))
            object.maxBitrateKbps = message.maxBitrateKbps;
        if (message.trackLabel != null && message.hasOwnProperty("trackLabel"))
            object.trackLabel = message.trackLabel;
        if (message.groupId != null && message.hasOwnProperty("groupId"))
            object.groupId = message.groupId;
        if (message.avgBitrateBps != null && message.hasOwnProperty("avgBitrateBps"))
            object.avgBitrateBps = message.avgBitrateBps;
        if (message.attendeeId != null && message.hasOwnProperty("attendeeId"))
            object.attendeeId = message.attendeeId;
        if (message.mediaType != null && message.hasOwnProperty("mediaType"))
            object.mediaType = options.enums === String ? $root.SdkStreamMediaType[message.mediaType] : message.mediaType;
        if (message.externalUserId != null && message.hasOwnProperty("externalUserId"))
            object.externalUserId = message.externalUserId;
        return object;
    };

    /**
     * Converts this SdkStreamDescriptor to JSON.
     * @function toJSON
     * @memberof SdkStreamDescriptor
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkStreamDescriptor.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkStreamDescriptor;
})();

$root.SdkStreamAllocation = (function() {

    /**
     * Properties of a SdkStreamAllocation.
     * @exports ISdkStreamAllocation
     * @interface ISdkStreamAllocation
     * @property {string|null} [trackLabel] SdkStreamAllocation trackLabel
     * @property {number|null} [streamId] SdkStreamAllocation streamId
     * @property {number|null} [groupId] SdkStreamAllocation groupId
     */

    /**
     * Constructs a new SdkStreamAllocation.
     * @exports SdkStreamAllocation
     * @classdesc Represents a SdkStreamAllocation.
     * @implements ISdkStreamAllocation
     * @constructor
     * @param {ISdkStreamAllocation=} [properties] Properties to set
     */
    function SdkStreamAllocation(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkStreamAllocation trackLabel.
     * @member {string} trackLabel
     * @memberof SdkStreamAllocation
     * @instance
     */
    SdkStreamAllocation.prototype.trackLabel = "";

    /**
     * SdkStreamAllocation streamId.
     * @member {number} streamId
     * @memberof SdkStreamAllocation
     * @instance
     */
    SdkStreamAllocation.prototype.streamId = 0;

    /**
     * SdkStreamAllocation groupId.
     * @member {number} groupId
     * @memberof SdkStreamAllocation
     * @instance
     */
    SdkStreamAllocation.prototype.groupId = 0;

    /**
     * Creates a new SdkStreamAllocation instance using the specified properties.
     * @function create
     * @memberof SdkStreamAllocation
     * @static
     * @param {ISdkStreamAllocation=} [properties] Properties to set
     * @returns {SdkStreamAllocation} SdkStreamAllocation instance
     */
    SdkStreamAllocation.create = function create(properties) {
        return new SdkStreamAllocation(properties);
    };

    /**
     * Encodes the specified SdkStreamAllocation message. Does not implicitly {@link SdkStreamAllocation.verify|verify} messages.
     * @function encode
     * @memberof SdkStreamAllocation
     * @static
     * @param {ISdkStreamAllocation} message SdkStreamAllocation message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkStreamAllocation.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.trackLabel != null && message.hasOwnProperty("trackLabel"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.trackLabel);
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.streamId);
        if (message.groupId != null && message.hasOwnProperty("groupId"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.groupId);
        return writer;
    };

    /**
     * Encodes the specified SdkStreamAllocation message, length delimited. Does not implicitly {@link SdkStreamAllocation.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkStreamAllocation
     * @static
     * @param {ISdkStreamAllocation} message SdkStreamAllocation message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkStreamAllocation.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkStreamAllocation message from the specified reader or buffer.
     * @function decode
     * @memberof SdkStreamAllocation
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkStreamAllocation} SdkStreamAllocation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkStreamAllocation.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkStreamAllocation();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.trackLabel = reader.string();
                break;
            case 2:
                message.streamId = reader.uint32();
                break;
            case 3:
                message.groupId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkStreamAllocation message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkStreamAllocation
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkStreamAllocation} SdkStreamAllocation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkStreamAllocation.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkStreamAllocation message.
     * @function verify
     * @memberof SdkStreamAllocation
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkStreamAllocation.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.trackLabel != null && message.hasOwnProperty("trackLabel"))
            if (!$util.isString(message.trackLabel))
                return "trackLabel: string expected";
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            if (!$util.isInteger(message.streamId))
                return "streamId: integer expected";
        if (message.groupId != null && message.hasOwnProperty("groupId"))
            if (!$util.isInteger(message.groupId))
                return "groupId: integer expected";
        return null;
    };

    /**
     * Creates a SdkStreamAllocation message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkStreamAllocation
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkStreamAllocation} SdkStreamAllocation
     */
    SdkStreamAllocation.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkStreamAllocation)
            return object;
        var message = new $root.SdkStreamAllocation();
        if (object.trackLabel != null)
            message.trackLabel = String(object.trackLabel);
        if (object.streamId != null)
            message.streamId = object.streamId >>> 0;
        if (object.groupId != null)
            message.groupId = object.groupId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SdkStreamAllocation message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkStreamAllocation
     * @static
     * @param {SdkStreamAllocation} message SdkStreamAllocation
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkStreamAllocation.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.trackLabel = "";
            object.streamId = 0;
            object.groupId = 0;
        }
        if (message.trackLabel != null && message.hasOwnProperty("trackLabel"))
            object.trackLabel = message.trackLabel;
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            object.streamId = message.streamId;
        if (message.groupId != null && message.hasOwnProperty("groupId"))
            object.groupId = message.groupId;
        return object;
    };

    /**
     * Converts this SdkStreamAllocation to JSON.
     * @function toJSON
     * @memberof SdkStreamAllocation
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkStreamAllocation.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkStreamAllocation;
})();

$root.SdkTrackMapping = (function() {

    /**
     * Properties of a SdkTrackMapping.
     * @exports ISdkTrackMapping
     * @interface ISdkTrackMapping
     * @property {number|null} [streamId] SdkTrackMapping streamId
     * @property {number|null} [ssrc] SdkTrackMapping ssrc
     * @property {string|null} [trackLabel] SdkTrackMapping trackLabel
     */

    /**
     * Constructs a new SdkTrackMapping.
     * @exports SdkTrackMapping
     * @classdesc Represents a SdkTrackMapping.
     * @implements ISdkTrackMapping
     * @constructor
     * @param {ISdkTrackMapping=} [properties] Properties to set
     */
    function SdkTrackMapping(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkTrackMapping streamId.
     * @member {number} streamId
     * @memberof SdkTrackMapping
     * @instance
     */
    SdkTrackMapping.prototype.streamId = 0;

    /**
     * SdkTrackMapping ssrc.
     * @member {number} ssrc
     * @memberof SdkTrackMapping
     * @instance
     */
    SdkTrackMapping.prototype.ssrc = 0;

    /**
     * SdkTrackMapping trackLabel.
     * @member {string} trackLabel
     * @memberof SdkTrackMapping
     * @instance
     */
    SdkTrackMapping.prototype.trackLabel = "";

    /**
     * Creates a new SdkTrackMapping instance using the specified properties.
     * @function create
     * @memberof SdkTrackMapping
     * @static
     * @param {ISdkTrackMapping=} [properties] Properties to set
     * @returns {SdkTrackMapping} SdkTrackMapping instance
     */
    SdkTrackMapping.create = function create(properties) {
        return new SdkTrackMapping(properties);
    };

    /**
     * Encodes the specified SdkTrackMapping message. Does not implicitly {@link SdkTrackMapping.verify|verify} messages.
     * @function encode
     * @memberof SdkTrackMapping
     * @static
     * @param {ISdkTrackMapping} message SdkTrackMapping message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkTrackMapping.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.streamId);
        if (message.ssrc != null && message.hasOwnProperty("ssrc"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ssrc);
        if (message.trackLabel != null && message.hasOwnProperty("trackLabel"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.trackLabel);
        return writer;
    };

    /**
     * Encodes the specified SdkTrackMapping message, length delimited. Does not implicitly {@link SdkTrackMapping.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkTrackMapping
     * @static
     * @param {ISdkTrackMapping} message SdkTrackMapping message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkTrackMapping.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkTrackMapping message from the specified reader or buffer.
     * @function decode
     * @memberof SdkTrackMapping
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkTrackMapping} SdkTrackMapping
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkTrackMapping.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkTrackMapping();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.streamId = reader.uint32();
                break;
            case 2:
                message.ssrc = reader.uint32();
                break;
            case 3:
                message.trackLabel = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkTrackMapping message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkTrackMapping
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkTrackMapping} SdkTrackMapping
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkTrackMapping.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkTrackMapping message.
     * @function verify
     * @memberof SdkTrackMapping
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkTrackMapping.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            if (!$util.isInteger(message.streamId))
                return "streamId: integer expected";
        if (message.ssrc != null && message.hasOwnProperty("ssrc"))
            if (!$util.isInteger(message.ssrc))
                return "ssrc: integer expected";
        if (message.trackLabel != null && message.hasOwnProperty("trackLabel"))
            if (!$util.isString(message.trackLabel))
                return "trackLabel: string expected";
        return null;
    };

    /**
     * Creates a SdkTrackMapping message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkTrackMapping
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkTrackMapping} SdkTrackMapping
     */
    SdkTrackMapping.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkTrackMapping)
            return object;
        var message = new $root.SdkTrackMapping();
        if (object.streamId != null)
            message.streamId = object.streamId >>> 0;
        if (object.ssrc != null)
            message.ssrc = object.ssrc >>> 0;
        if (object.trackLabel != null)
            message.trackLabel = String(object.trackLabel);
        return message;
    };

    /**
     * Creates a plain object from a SdkTrackMapping message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkTrackMapping
     * @static
     * @param {SdkTrackMapping} message SdkTrackMapping
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkTrackMapping.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.streamId = 0;
            object.ssrc = 0;
            object.trackLabel = "";
        }
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            object.streamId = message.streamId;
        if (message.ssrc != null && message.hasOwnProperty("ssrc"))
            object.ssrc = message.ssrc;
        if (message.trackLabel != null && message.hasOwnProperty("trackLabel"))
            object.trackLabel = message.trackLabel;
        return object;
    };

    /**
     * Converts this SdkTrackMapping to JSON.
     * @function toJSON
     * @memberof SdkTrackMapping
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkTrackMapping.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkTrackMapping;
})();

$root.SdkBitrate = (function() {

    /**
     * Properties of a SdkBitrate.
     * @exports ISdkBitrate
     * @interface ISdkBitrate
     * @property {number|null} [sourceStreamId] SdkBitrate sourceStreamId
     * @property {number|null} [avgBitrateBps] SdkBitrate avgBitrateBps
     */

    /**
     * Constructs a new SdkBitrate.
     * @exports SdkBitrate
     * @classdesc Represents a SdkBitrate.
     * @implements ISdkBitrate
     * @constructor
     * @param {ISdkBitrate=} [properties] Properties to set
     */
    function SdkBitrate(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkBitrate sourceStreamId.
     * @member {number} sourceStreamId
     * @memberof SdkBitrate
     * @instance
     */
    SdkBitrate.prototype.sourceStreamId = 0;

    /**
     * SdkBitrate avgBitrateBps.
     * @member {number} avgBitrateBps
     * @memberof SdkBitrate
     * @instance
     */
    SdkBitrate.prototype.avgBitrateBps = 0;

    /**
     * Creates a new SdkBitrate instance using the specified properties.
     * @function create
     * @memberof SdkBitrate
     * @static
     * @param {ISdkBitrate=} [properties] Properties to set
     * @returns {SdkBitrate} SdkBitrate instance
     */
    SdkBitrate.create = function create(properties) {
        return new SdkBitrate(properties);
    };

    /**
     * Encodes the specified SdkBitrate message. Does not implicitly {@link SdkBitrate.verify|verify} messages.
     * @function encode
     * @memberof SdkBitrate
     * @static
     * @param {ISdkBitrate} message SdkBitrate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkBitrate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.sourceStreamId != null && message.hasOwnProperty("sourceStreamId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.sourceStreamId);
        if (message.avgBitrateBps != null && message.hasOwnProperty("avgBitrateBps"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.avgBitrateBps);
        return writer;
    };

    /**
     * Encodes the specified SdkBitrate message, length delimited. Does not implicitly {@link SdkBitrate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkBitrate
     * @static
     * @param {ISdkBitrate} message SdkBitrate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkBitrate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkBitrate message from the specified reader or buffer.
     * @function decode
     * @memberof SdkBitrate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkBitrate} SdkBitrate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkBitrate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkBitrate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.sourceStreamId = reader.uint32();
                break;
            case 2:
                message.avgBitrateBps = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkBitrate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkBitrate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkBitrate} SdkBitrate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkBitrate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkBitrate message.
     * @function verify
     * @memberof SdkBitrate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkBitrate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.sourceStreamId != null && message.hasOwnProperty("sourceStreamId"))
            if (!$util.isInteger(message.sourceStreamId))
                return "sourceStreamId: integer expected";
        if (message.avgBitrateBps != null && message.hasOwnProperty("avgBitrateBps"))
            if (!$util.isInteger(message.avgBitrateBps))
                return "avgBitrateBps: integer expected";
        return null;
    };

    /**
     * Creates a SdkBitrate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkBitrate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkBitrate} SdkBitrate
     */
    SdkBitrate.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkBitrate)
            return object;
        var message = new $root.SdkBitrate();
        if (object.sourceStreamId != null)
            message.sourceStreamId = object.sourceStreamId >>> 0;
        if (object.avgBitrateBps != null)
            message.avgBitrateBps = object.avgBitrateBps >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SdkBitrate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkBitrate
     * @static
     * @param {SdkBitrate} message SdkBitrate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkBitrate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.sourceStreamId = 0;
            object.avgBitrateBps = 0;
        }
        if (message.sourceStreamId != null && message.hasOwnProperty("sourceStreamId"))
            object.sourceStreamId = message.sourceStreamId;
        if (message.avgBitrateBps != null && message.hasOwnProperty("avgBitrateBps"))
            object.avgBitrateBps = message.avgBitrateBps;
        return object;
    };

    /**
     * Converts this SdkBitrate to JSON.
     * @function toJSON
     * @memberof SdkBitrate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkBitrate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkBitrate;
})();

$root.SdkAudioControlFrame = (function() {

    /**
     * Properties of a SdkAudioControlFrame.
     * @exports ISdkAudioControlFrame
     * @interface ISdkAudioControlFrame
     * @property {boolean|null} [muted] SdkAudioControlFrame muted
     */

    /**
     * Constructs a new SdkAudioControlFrame.
     * @exports SdkAudioControlFrame
     * @classdesc Represents a SdkAudioControlFrame.
     * @implements ISdkAudioControlFrame
     * @constructor
     * @param {ISdkAudioControlFrame=} [properties] Properties to set
     */
    function SdkAudioControlFrame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkAudioControlFrame muted.
     * @member {boolean} muted
     * @memberof SdkAudioControlFrame
     * @instance
     */
    SdkAudioControlFrame.prototype.muted = false;

    /**
     * Creates a new SdkAudioControlFrame instance using the specified properties.
     * @function create
     * @memberof SdkAudioControlFrame
     * @static
     * @param {ISdkAudioControlFrame=} [properties] Properties to set
     * @returns {SdkAudioControlFrame} SdkAudioControlFrame instance
     */
    SdkAudioControlFrame.create = function create(properties) {
        return new SdkAudioControlFrame(properties);
    };

    /**
     * Encodes the specified SdkAudioControlFrame message. Does not implicitly {@link SdkAudioControlFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkAudioControlFrame
     * @static
     * @param {ISdkAudioControlFrame} message SdkAudioControlFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioControlFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.muted != null && message.hasOwnProperty("muted"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.muted);
        return writer;
    };

    /**
     * Encodes the specified SdkAudioControlFrame message, length delimited. Does not implicitly {@link SdkAudioControlFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkAudioControlFrame
     * @static
     * @param {ISdkAudioControlFrame} message SdkAudioControlFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioControlFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkAudioControlFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkAudioControlFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkAudioControlFrame} SdkAudioControlFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioControlFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkAudioControlFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.muted = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkAudioControlFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkAudioControlFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkAudioControlFrame} SdkAudioControlFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioControlFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkAudioControlFrame message.
     * @function verify
     * @memberof SdkAudioControlFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkAudioControlFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.muted != null && message.hasOwnProperty("muted"))
            if (typeof message.muted !== "boolean")
                return "muted: boolean expected";
        return null;
    };

    /**
     * Creates a SdkAudioControlFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkAudioControlFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkAudioControlFrame} SdkAudioControlFrame
     */
    SdkAudioControlFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkAudioControlFrame)
            return object;
        var message = new $root.SdkAudioControlFrame();
        if (object.muted != null)
            message.muted = Boolean(object.muted);
        return message;
    };

    /**
     * Creates a plain object from a SdkAudioControlFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkAudioControlFrame
     * @static
     * @param {SdkAudioControlFrame} message SdkAudioControlFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkAudioControlFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.muted = false;
        if (message.muted != null && message.hasOwnProperty("muted"))
            object.muted = message.muted;
        return object;
    };

    /**
     * Converts this SdkAudioControlFrame to JSON.
     * @function toJSON
     * @memberof SdkAudioControlFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkAudioControlFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkAudioControlFrame;
})();

$root.SdkAudioMetadataFrame = (function() {

    /**
     * Properties of a SdkAudioMetadataFrame.
     * @exports ISdkAudioMetadataFrame
     * @interface ISdkAudioMetadataFrame
     * @property {Array.<ISdkAudioAttendeeState>|null} [attendeeStates] SdkAudioMetadataFrame attendeeStates
     */

    /**
     * Constructs a new SdkAudioMetadataFrame.
     * @exports SdkAudioMetadataFrame
     * @classdesc Represents a SdkAudioMetadataFrame.
     * @implements ISdkAudioMetadataFrame
     * @constructor
     * @param {ISdkAudioMetadataFrame=} [properties] Properties to set
     */
    function SdkAudioMetadataFrame(properties) {
        this.attendeeStates = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkAudioMetadataFrame attendeeStates.
     * @member {Array.<ISdkAudioAttendeeState>} attendeeStates
     * @memberof SdkAudioMetadataFrame
     * @instance
     */
    SdkAudioMetadataFrame.prototype.attendeeStates = $util.emptyArray;

    /**
     * Creates a new SdkAudioMetadataFrame instance using the specified properties.
     * @function create
     * @memberof SdkAudioMetadataFrame
     * @static
     * @param {ISdkAudioMetadataFrame=} [properties] Properties to set
     * @returns {SdkAudioMetadataFrame} SdkAudioMetadataFrame instance
     */
    SdkAudioMetadataFrame.create = function create(properties) {
        return new SdkAudioMetadataFrame(properties);
    };

    /**
     * Encodes the specified SdkAudioMetadataFrame message. Does not implicitly {@link SdkAudioMetadataFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkAudioMetadataFrame
     * @static
     * @param {ISdkAudioMetadataFrame} message SdkAudioMetadataFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioMetadataFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.attendeeStates != null && message.attendeeStates.length)
            for (var i = 0; i < message.attendeeStates.length; ++i)
                $root.SdkAudioAttendeeState.encode(message.attendeeStates[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SdkAudioMetadataFrame message, length delimited. Does not implicitly {@link SdkAudioMetadataFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkAudioMetadataFrame
     * @static
     * @param {ISdkAudioMetadataFrame} message SdkAudioMetadataFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioMetadataFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkAudioMetadataFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkAudioMetadataFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkAudioMetadataFrame} SdkAudioMetadataFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioMetadataFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkAudioMetadataFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.attendeeStates && message.attendeeStates.length))
                    message.attendeeStates = [];
                message.attendeeStates.push($root.SdkAudioAttendeeState.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkAudioMetadataFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkAudioMetadataFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkAudioMetadataFrame} SdkAudioMetadataFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioMetadataFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkAudioMetadataFrame message.
     * @function verify
     * @memberof SdkAudioMetadataFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkAudioMetadataFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.attendeeStates != null && message.hasOwnProperty("attendeeStates")) {
            if (!Array.isArray(message.attendeeStates))
                return "attendeeStates: array expected";
            for (var i = 0; i < message.attendeeStates.length; ++i) {
                var error = $root.SdkAudioAttendeeState.verify(message.attendeeStates[i]);
                if (error)
                    return "attendeeStates." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SdkAudioMetadataFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkAudioMetadataFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkAudioMetadataFrame} SdkAudioMetadataFrame
     */
    SdkAudioMetadataFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkAudioMetadataFrame)
            return object;
        var message = new $root.SdkAudioMetadataFrame();
        if (object.attendeeStates) {
            if (!Array.isArray(object.attendeeStates))
                throw TypeError(".SdkAudioMetadataFrame.attendeeStates: array expected");
            message.attendeeStates = [];
            for (var i = 0; i < object.attendeeStates.length; ++i) {
                if (typeof object.attendeeStates[i] !== "object")
                    throw TypeError(".SdkAudioMetadataFrame.attendeeStates: object expected");
                message.attendeeStates[i] = $root.SdkAudioAttendeeState.fromObject(object.attendeeStates[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkAudioMetadataFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkAudioMetadataFrame
     * @static
     * @param {SdkAudioMetadataFrame} message SdkAudioMetadataFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkAudioMetadataFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.attendeeStates = [];
        if (message.attendeeStates && message.attendeeStates.length) {
            object.attendeeStates = [];
            for (var j = 0; j < message.attendeeStates.length; ++j)
                object.attendeeStates[j] = $root.SdkAudioAttendeeState.toObject(message.attendeeStates[j], options);
        }
        return object;
    };

    /**
     * Converts this SdkAudioMetadataFrame to JSON.
     * @function toJSON
     * @memberof SdkAudioMetadataFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkAudioMetadataFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkAudioMetadataFrame;
})();

$root.SdkAudioAttendeeState = (function() {

    /**
     * Properties of a SdkAudioAttendeeState.
     * @exports ISdkAudioAttendeeState
     * @interface ISdkAudioAttendeeState
     * @property {number|null} [audioStreamId] SdkAudioAttendeeState audioStreamId
     * @property {number|null} [volume] SdkAudioAttendeeState volume
     * @property {boolean|null} [muted] SdkAudioAttendeeState muted
     * @property {number|null} [signalStrength] SdkAudioAttendeeState signalStrength
     */

    /**
     * Constructs a new SdkAudioAttendeeState.
     * @exports SdkAudioAttendeeState
     * @classdesc Represents a SdkAudioAttendeeState.
     * @implements ISdkAudioAttendeeState
     * @constructor
     * @param {ISdkAudioAttendeeState=} [properties] Properties to set
     */
    function SdkAudioAttendeeState(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkAudioAttendeeState audioStreamId.
     * @member {number} audioStreamId
     * @memberof SdkAudioAttendeeState
     * @instance
     */
    SdkAudioAttendeeState.prototype.audioStreamId = 0;

    /**
     * SdkAudioAttendeeState volume.
     * @member {number} volume
     * @memberof SdkAudioAttendeeState
     * @instance
     */
    SdkAudioAttendeeState.prototype.volume = 0;

    /**
     * SdkAudioAttendeeState muted.
     * @member {boolean} muted
     * @memberof SdkAudioAttendeeState
     * @instance
     */
    SdkAudioAttendeeState.prototype.muted = false;

    /**
     * SdkAudioAttendeeState signalStrength.
     * @member {number} signalStrength
     * @memberof SdkAudioAttendeeState
     * @instance
     */
    SdkAudioAttendeeState.prototype.signalStrength = 0;

    /**
     * Creates a new SdkAudioAttendeeState instance using the specified properties.
     * @function create
     * @memberof SdkAudioAttendeeState
     * @static
     * @param {ISdkAudioAttendeeState=} [properties] Properties to set
     * @returns {SdkAudioAttendeeState} SdkAudioAttendeeState instance
     */
    SdkAudioAttendeeState.create = function create(properties) {
        return new SdkAudioAttendeeState(properties);
    };

    /**
     * Encodes the specified SdkAudioAttendeeState message. Does not implicitly {@link SdkAudioAttendeeState.verify|verify} messages.
     * @function encode
     * @memberof SdkAudioAttendeeState
     * @static
     * @param {ISdkAudioAttendeeState} message SdkAudioAttendeeState message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioAttendeeState.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.audioStreamId != null && message.hasOwnProperty("audioStreamId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.audioStreamId);
        if (message.volume != null && message.hasOwnProperty("volume"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.volume);
        if (message.muted != null && message.hasOwnProperty("muted"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.muted);
        if (message.signalStrength != null && message.hasOwnProperty("signalStrength"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.signalStrength);
        return writer;
    };

    /**
     * Encodes the specified SdkAudioAttendeeState message, length delimited. Does not implicitly {@link SdkAudioAttendeeState.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkAudioAttendeeState
     * @static
     * @param {ISdkAudioAttendeeState} message SdkAudioAttendeeState message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioAttendeeState.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkAudioAttendeeState message from the specified reader or buffer.
     * @function decode
     * @memberof SdkAudioAttendeeState
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkAudioAttendeeState} SdkAudioAttendeeState
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioAttendeeState.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkAudioAttendeeState();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.audioStreamId = reader.uint32();
                break;
            case 2:
                message.volume = reader.uint32();
                break;
            case 3:
                message.muted = reader.bool();
                break;
            case 4:
                message.signalStrength = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkAudioAttendeeState message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkAudioAttendeeState
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkAudioAttendeeState} SdkAudioAttendeeState
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioAttendeeState.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkAudioAttendeeState message.
     * @function verify
     * @memberof SdkAudioAttendeeState
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkAudioAttendeeState.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.audioStreamId != null && message.hasOwnProperty("audioStreamId"))
            if (!$util.isInteger(message.audioStreamId))
                return "audioStreamId: integer expected";
        if (message.volume != null && message.hasOwnProperty("volume"))
            if (!$util.isInteger(message.volume))
                return "volume: integer expected";
        if (message.muted != null && message.hasOwnProperty("muted"))
            if (typeof message.muted !== "boolean")
                return "muted: boolean expected";
        if (message.signalStrength != null && message.hasOwnProperty("signalStrength"))
            if (!$util.isInteger(message.signalStrength))
                return "signalStrength: integer expected";
        return null;
    };

    /**
     * Creates a SdkAudioAttendeeState message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkAudioAttendeeState
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkAudioAttendeeState} SdkAudioAttendeeState
     */
    SdkAudioAttendeeState.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkAudioAttendeeState)
            return object;
        var message = new $root.SdkAudioAttendeeState();
        if (object.audioStreamId != null)
            message.audioStreamId = object.audioStreamId >>> 0;
        if (object.volume != null)
            message.volume = object.volume >>> 0;
        if (object.muted != null)
            message.muted = Boolean(object.muted);
        if (object.signalStrength != null)
            message.signalStrength = object.signalStrength >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SdkAudioAttendeeState message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkAudioAttendeeState
     * @static
     * @param {SdkAudioAttendeeState} message SdkAudioAttendeeState
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkAudioAttendeeState.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.audioStreamId = 0;
            object.volume = 0;
            object.muted = false;
            object.signalStrength = 0;
        }
        if (message.audioStreamId != null && message.hasOwnProperty("audioStreamId"))
            object.audioStreamId = message.audioStreamId;
        if (message.volume != null && message.hasOwnProperty("volume"))
            object.volume = message.volume;
        if (message.muted != null && message.hasOwnProperty("muted"))
            object.muted = message.muted;
        if (message.signalStrength != null && message.hasOwnProperty("signalStrength"))
            object.signalStrength = message.signalStrength;
        return object;
    };

    /**
     * Converts this SdkAudioAttendeeState to JSON.
     * @function toJSON
     * @memberof SdkAudioAttendeeState
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkAudioAttendeeState.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkAudioAttendeeState;
})();

$root.SdkAudioStreamIdInfoFrame = (function() {

    /**
     * Properties of a SdkAudioStreamIdInfoFrame.
     * @exports ISdkAudioStreamIdInfoFrame
     * @interface ISdkAudioStreamIdInfoFrame
     * @property {Array.<ISdkAudioStreamIdInfo>|null} [streams] SdkAudioStreamIdInfoFrame streams
     */

    /**
     * Constructs a new SdkAudioStreamIdInfoFrame.
     * @exports SdkAudioStreamIdInfoFrame
     * @classdesc Represents a SdkAudioStreamIdInfoFrame.
     * @implements ISdkAudioStreamIdInfoFrame
     * @constructor
     * @param {ISdkAudioStreamIdInfoFrame=} [properties] Properties to set
     */
    function SdkAudioStreamIdInfoFrame(properties) {
        this.streams = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkAudioStreamIdInfoFrame streams.
     * @member {Array.<ISdkAudioStreamIdInfo>} streams
     * @memberof SdkAudioStreamIdInfoFrame
     * @instance
     */
    SdkAudioStreamIdInfoFrame.prototype.streams = $util.emptyArray;

    /**
     * Creates a new SdkAudioStreamIdInfoFrame instance using the specified properties.
     * @function create
     * @memberof SdkAudioStreamIdInfoFrame
     * @static
     * @param {ISdkAudioStreamIdInfoFrame=} [properties] Properties to set
     * @returns {SdkAudioStreamIdInfoFrame} SdkAudioStreamIdInfoFrame instance
     */
    SdkAudioStreamIdInfoFrame.create = function create(properties) {
        return new SdkAudioStreamIdInfoFrame(properties);
    };

    /**
     * Encodes the specified SdkAudioStreamIdInfoFrame message. Does not implicitly {@link SdkAudioStreamIdInfoFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkAudioStreamIdInfoFrame
     * @static
     * @param {ISdkAudioStreamIdInfoFrame} message SdkAudioStreamIdInfoFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioStreamIdInfoFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.streams != null && message.streams.length)
            for (var i = 0; i < message.streams.length; ++i)
                $root.SdkAudioStreamIdInfo.encode(message.streams[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SdkAudioStreamIdInfoFrame message, length delimited. Does not implicitly {@link SdkAudioStreamIdInfoFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkAudioStreamIdInfoFrame
     * @static
     * @param {ISdkAudioStreamIdInfoFrame} message SdkAudioStreamIdInfoFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioStreamIdInfoFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkAudioStreamIdInfoFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkAudioStreamIdInfoFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkAudioStreamIdInfoFrame} SdkAudioStreamIdInfoFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioStreamIdInfoFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkAudioStreamIdInfoFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.streams && message.streams.length))
                    message.streams = [];
                message.streams.push($root.SdkAudioStreamIdInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkAudioStreamIdInfoFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkAudioStreamIdInfoFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkAudioStreamIdInfoFrame} SdkAudioStreamIdInfoFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioStreamIdInfoFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkAudioStreamIdInfoFrame message.
     * @function verify
     * @memberof SdkAudioStreamIdInfoFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkAudioStreamIdInfoFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.streams != null && message.hasOwnProperty("streams")) {
            if (!Array.isArray(message.streams))
                return "streams: array expected";
            for (var i = 0; i < message.streams.length; ++i) {
                var error = $root.SdkAudioStreamIdInfo.verify(message.streams[i]);
                if (error)
                    return "streams." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SdkAudioStreamIdInfoFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkAudioStreamIdInfoFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkAudioStreamIdInfoFrame} SdkAudioStreamIdInfoFrame
     */
    SdkAudioStreamIdInfoFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkAudioStreamIdInfoFrame)
            return object;
        var message = new $root.SdkAudioStreamIdInfoFrame();
        if (object.streams) {
            if (!Array.isArray(object.streams))
                throw TypeError(".SdkAudioStreamIdInfoFrame.streams: array expected");
            message.streams = [];
            for (var i = 0; i < object.streams.length; ++i) {
                if (typeof object.streams[i] !== "object")
                    throw TypeError(".SdkAudioStreamIdInfoFrame.streams: object expected");
                message.streams[i] = $root.SdkAudioStreamIdInfo.fromObject(object.streams[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkAudioStreamIdInfoFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkAudioStreamIdInfoFrame
     * @static
     * @param {SdkAudioStreamIdInfoFrame} message SdkAudioStreamIdInfoFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkAudioStreamIdInfoFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.streams = [];
        if (message.streams && message.streams.length) {
            object.streams = [];
            for (var j = 0; j < message.streams.length; ++j)
                object.streams[j] = $root.SdkAudioStreamIdInfo.toObject(message.streams[j], options);
        }
        return object;
    };

    /**
     * Converts this SdkAudioStreamIdInfoFrame to JSON.
     * @function toJSON
     * @memberof SdkAudioStreamIdInfoFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkAudioStreamIdInfoFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkAudioStreamIdInfoFrame;
})();

$root.SdkAudioStreamIdInfo = (function() {

    /**
     * Properties of a SdkAudioStreamIdInfo.
     * @exports ISdkAudioStreamIdInfo
     * @interface ISdkAudioStreamIdInfo
     * @property {number|null} [audioStreamId] SdkAudioStreamIdInfo audioStreamId
     * @property {string|null} [attendeeId] SdkAudioStreamIdInfo attendeeId
     * @property {boolean|null} [muted] SdkAudioStreamIdInfo muted
     * @property {string|null} [externalUserId] SdkAudioStreamIdInfo externalUserId
     * @property {boolean|null} [dropped] SdkAudioStreamIdInfo dropped
     */

    /**
     * Constructs a new SdkAudioStreamIdInfo.
     * @exports SdkAudioStreamIdInfo
     * @classdesc Represents a SdkAudioStreamIdInfo.
     * @implements ISdkAudioStreamIdInfo
     * @constructor
     * @param {ISdkAudioStreamIdInfo=} [properties] Properties to set
     */
    function SdkAudioStreamIdInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkAudioStreamIdInfo audioStreamId.
     * @member {number} audioStreamId
     * @memberof SdkAudioStreamIdInfo
     * @instance
     */
    SdkAudioStreamIdInfo.prototype.audioStreamId = 0;

    /**
     * SdkAudioStreamIdInfo attendeeId.
     * @member {string} attendeeId
     * @memberof SdkAudioStreamIdInfo
     * @instance
     */
    SdkAudioStreamIdInfo.prototype.attendeeId = "";

    /**
     * SdkAudioStreamIdInfo muted.
     * @member {boolean} muted
     * @memberof SdkAudioStreamIdInfo
     * @instance
     */
    SdkAudioStreamIdInfo.prototype.muted = false;

    /**
     * SdkAudioStreamIdInfo externalUserId.
     * @member {string} externalUserId
     * @memberof SdkAudioStreamIdInfo
     * @instance
     */
    SdkAudioStreamIdInfo.prototype.externalUserId = "";

    /**
     * SdkAudioStreamIdInfo dropped.
     * @member {boolean} dropped
     * @memberof SdkAudioStreamIdInfo
     * @instance
     */
    SdkAudioStreamIdInfo.prototype.dropped = false;

    /**
     * Creates a new SdkAudioStreamIdInfo instance using the specified properties.
     * @function create
     * @memberof SdkAudioStreamIdInfo
     * @static
     * @param {ISdkAudioStreamIdInfo=} [properties] Properties to set
     * @returns {SdkAudioStreamIdInfo} SdkAudioStreamIdInfo instance
     */
    SdkAudioStreamIdInfo.create = function create(properties) {
        return new SdkAudioStreamIdInfo(properties);
    };

    /**
     * Encodes the specified SdkAudioStreamIdInfo message. Does not implicitly {@link SdkAudioStreamIdInfo.verify|verify} messages.
     * @function encode
     * @memberof SdkAudioStreamIdInfo
     * @static
     * @param {ISdkAudioStreamIdInfo} message SdkAudioStreamIdInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioStreamIdInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.audioStreamId != null && message.hasOwnProperty("audioStreamId"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.audioStreamId);
        if (message.attendeeId != null && message.hasOwnProperty("attendeeId"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.attendeeId);
        if (message.muted != null && message.hasOwnProperty("muted"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.muted);
        if (message.externalUserId != null && message.hasOwnProperty("externalUserId"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.externalUserId);
        if (message.dropped != null && message.hasOwnProperty("dropped"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.dropped);
        return writer;
    };

    /**
     * Encodes the specified SdkAudioStreamIdInfo message, length delimited. Does not implicitly {@link SdkAudioStreamIdInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkAudioStreamIdInfo
     * @static
     * @param {ISdkAudioStreamIdInfo} message SdkAudioStreamIdInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioStreamIdInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkAudioStreamIdInfo message from the specified reader or buffer.
     * @function decode
     * @memberof SdkAudioStreamIdInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkAudioStreamIdInfo} SdkAudioStreamIdInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioStreamIdInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkAudioStreamIdInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.audioStreamId = reader.uint32();
                break;
            case 2:
                message.attendeeId = reader.string();
                break;
            case 3:
                message.muted = reader.bool();
                break;
            case 4:
                message.externalUserId = reader.string();
                break;
            case 5:
                message.dropped = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkAudioStreamIdInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkAudioStreamIdInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkAudioStreamIdInfo} SdkAudioStreamIdInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioStreamIdInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkAudioStreamIdInfo message.
     * @function verify
     * @memberof SdkAudioStreamIdInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkAudioStreamIdInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.audioStreamId != null && message.hasOwnProperty("audioStreamId"))
            if (!$util.isInteger(message.audioStreamId))
                return "audioStreamId: integer expected";
        if (message.attendeeId != null && message.hasOwnProperty("attendeeId"))
            if (!$util.isString(message.attendeeId))
                return "attendeeId: string expected";
        if (message.muted != null && message.hasOwnProperty("muted"))
            if (typeof message.muted !== "boolean")
                return "muted: boolean expected";
        if (message.externalUserId != null && message.hasOwnProperty("externalUserId"))
            if (!$util.isString(message.externalUserId))
                return "externalUserId: string expected";
        if (message.dropped != null && message.hasOwnProperty("dropped"))
            if (typeof message.dropped !== "boolean")
                return "dropped: boolean expected";
        return null;
    };

    /**
     * Creates a SdkAudioStreamIdInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkAudioStreamIdInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkAudioStreamIdInfo} SdkAudioStreamIdInfo
     */
    SdkAudioStreamIdInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkAudioStreamIdInfo)
            return object;
        var message = new $root.SdkAudioStreamIdInfo();
        if (object.audioStreamId != null)
            message.audioStreamId = object.audioStreamId >>> 0;
        if (object.attendeeId != null)
            message.attendeeId = String(object.attendeeId);
        if (object.muted != null)
            message.muted = Boolean(object.muted);
        if (object.externalUserId != null)
            message.externalUserId = String(object.externalUserId);
        if (object.dropped != null)
            message.dropped = Boolean(object.dropped);
        return message;
    };

    /**
     * Creates a plain object from a SdkAudioStreamIdInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkAudioStreamIdInfo
     * @static
     * @param {SdkAudioStreamIdInfo} message SdkAudioStreamIdInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkAudioStreamIdInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.audioStreamId = 0;
            object.attendeeId = "";
            object.muted = false;
            object.externalUserId = "";
            object.dropped = false;
        }
        if (message.audioStreamId != null && message.hasOwnProperty("audioStreamId"))
            object.audioStreamId = message.audioStreamId;
        if (message.attendeeId != null && message.hasOwnProperty("attendeeId"))
            object.attendeeId = message.attendeeId;
        if (message.muted != null && message.hasOwnProperty("muted"))
            object.muted = message.muted;
        if (message.externalUserId != null && message.hasOwnProperty("externalUserId"))
            object.externalUserId = message.externalUserId;
        if (message.dropped != null && message.hasOwnProperty("dropped"))
            object.dropped = message.dropped;
        return object;
    };

    /**
     * Converts this SdkAudioStreamIdInfo to JSON.
     * @function toJSON
     * @memberof SdkAudioStreamIdInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkAudioStreamIdInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkAudioStreamIdInfo;
})();

/**
 * SdkPingPongType enum.
 * @exports SdkPingPongType
 * @enum {string}
 * @property {number} PING=1 PING value
 * @property {number} PONG=2 PONG value
 */
$root.SdkPingPongType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "PING"] = 1;
    values[valuesById[2] = "PONG"] = 2;
    return values;
})();

$root.SdkPingPongFrame = (function() {

    /**
     * Properties of a SdkPingPongFrame.
     * @exports ISdkPingPongFrame
     * @interface ISdkPingPongFrame
     * @property {SdkPingPongType} type SdkPingPongFrame type
     * @property {number} pingId SdkPingPongFrame pingId
     */

    /**
     * Constructs a new SdkPingPongFrame.
     * @exports SdkPingPongFrame
     * @classdesc Represents a SdkPingPongFrame.
     * @implements ISdkPingPongFrame
     * @constructor
     * @param {ISdkPingPongFrame=} [properties] Properties to set
     */
    function SdkPingPongFrame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkPingPongFrame type.
     * @member {SdkPingPongType} type
     * @memberof SdkPingPongFrame
     * @instance
     */
    SdkPingPongFrame.prototype.type = 1;

    /**
     * SdkPingPongFrame pingId.
     * @member {number} pingId
     * @memberof SdkPingPongFrame
     * @instance
     */
    SdkPingPongFrame.prototype.pingId = 0;

    /**
     * Creates a new SdkPingPongFrame instance using the specified properties.
     * @function create
     * @memberof SdkPingPongFrame
     * @static
     * @param {ISdkPingPongFrame=} [properties] Properties to set
     * @returns {SdkPingPongFrame} SdkPingPongFrame instance
     */
    SdkPingPongFrame.create = function create(properties) {
        return new SdkPingPongFrame(properties);
    };

    /**
     * Encodes the specified SdkPingPongFrame message. Does not implicitly {@link SdkPingPongFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkPingPongFrame
     * @static
     * @param {ISdkPingPongFrame} message SdkPingPongFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkPingPongFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.pingId);
        return writer;
    };

    /**
     * Encodes the specified SdkPingPongFrame message, length delimited. Does not implicitly {@link SdkPingPongFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkPingPongFrame
     * @static
     * @param {ISdkPingPongFrame} message SdkPingPongFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkPingPongFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkPingPongFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkPingPongFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkPingPongFrame} SdkPingPongFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkPingPongFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkPingPongFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            case 2:
                message.pingId = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("type"))
            throw $util.ProtocolError("missing required 'type'", { instance: message });
        if (!message.hasOwnProperty("pingId"))
            throw $util.ProtocolError("missing required 'pingId'", { instance: message });
        return message;
    };

    /**
     * Decodes a SdkPingPongFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkPingPongFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkPingPongFrame} SdkPingPongFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkPingPongFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkPingPongFrame message.
     * @function verify
     * @memberof SdkPingPongFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkPingPongFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        switch (message.type) {
        default:
            return "type: enum value expected";
        case 1:
        case 2:
            break;
        }
        if (!$util.isInteger(message.pingId))
            return "pingId: integer expected";
        return null;
    };

    /**
     * Creates a SdkPingPongFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkPingPongFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkPingPongFrame} SdkPingPongFrame
     */
    SdkPingPongFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkPingPongFrame)
            return object;
        var message = new $root.SdkPingPongFrame();
        switch (object.type) {
        case "PING":
        case 1:
            message.type = 1;
            break;
        case "PONG":
        case 2:
            message.type = 2;
            break;
        }
        if (object.pingId != null)
            message.pingId = object.pingId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SdkPingPongFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkPingPongFrame
     * @static
     * @param {SdkPingPongFrame} message SdkPingPongFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkPingPongFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.type = options.enums === String ? "PING" : 1;
            object.pingId = 0;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.SdkPingPongType[message.type] : message.type;
        if (message.pingId != null && message.hasOwnProperty("pingId"))
            object.pingId = message.pingId;
        return object;
    };

    /**
     * Converts this SdkPingPongFrame to JSON.
     * @function toJSON
     * @memberof SdkPingPongFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkPingPongFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkPingPongFrame;
})();

$root.SdkAudioStatusFrame = (function() {

    /**
     * Properties of a SdkAudioStatusFrame.
     * @exports ISdkAudioStatusFrame
     * @interface ISdkAudioStatusFrame
     * @property {number|null} [audioStatus] SdkAudioStatusFrame audioStatus
     */

    /**
     * Constructs a new SdkAudioStatusFrame.
     * @exports SdkAudioStatusFrame
     * @classdesc Represents a SdkAudioStatusFrame.
     * @implements ISdkAudioStatusFrame
     * @constructor
     * @param {ISdkAudioStatusFrame=} [properties] Properties to set
     */
    function SdkAudioStatusFrame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkAudioStatusFrame audioStatus.
     * @member {number} audioStatus
     * @memberof SdkAudioStatusFrame
     * @instance
     */
    SdkAudioStatusFrame.prototype.audioStatus = 0;

    /**
     * Creates a new SdkAudioStatusFrame instance using the specified properties.
     * @function create
     * @memberof SdkAudioStatusFrame
     * @static
     * @param {ISdkAudioStatusFrame=} [properties] Properties to set
     * @returns {SdkAudioStatusFrame} SdkAudioStatusFrame instance
     */
    SdkAudioStatusFrame.create = function create(properties) {
        return new SdkAudioStatusFrame(properties);
    };

    /**
     * Encodes the specified SdkAudioStatusFrame message. Does not implicitly {@link SdkAudioStatusFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkAudioStatusFrame
     * @static
     * @param {ISdkAudioStatusFrame} message SdkAudioStatusFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioStatusFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.audioStatus != null && message.hasOwnProperty("audioStatus"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.audioStatus);
        return writer;
    };

    /**
     * Encodes the specified SdkAudioStatusFrame message, length delimited. Does not implicitly {@link SdkAudioStatusFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkAudioStatusFrame
     * @static
     * @param {ISdkAudioStatusFrame} message SdkAudioStatusFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkAudioStatusFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkAudioStatusFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkAudioStatusFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkAudioStatusFrame} SdkAudioStatusFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioStatusFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkAudioStatusFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.audioStatus = reader.uint32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkAudioStatusFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkAudioStatusFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkAudioStatusFrame} SdkAudioStatusFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkAudioStatusFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkAudioStatusFrame message.
     * @function verify
     * @memberof SdkAudioStatusFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkAudioStatusFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.audioStatus != null && message.hasOwnProperty("audioStatus"))
            if (!$util.isInteger(message.audioStatus))
                return "audioStatus: integer expected";
        return null;
    };

    /**
     * Creates a SdkAudioStatusFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkAudioStatusFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkAudioStatusFrame} SdkAudioStatusFrame
     */
    SdkAudioStatusFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkAudioStatusFrame)
            return object;
        var message = new $root.SdkAudioStatusFrame();
        if (object.audioStatus != null)
            message.audioStatus = object.audioStatus >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SdkAudioStatusFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkAudioStatusFrame
     * @static
     * @param {SdkAudioStatusFrame} message SdkAudioStatusFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkAudioStatusFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.audioStatus = 0;
        if (message.audioStatus != null && message.hasOwnProperty("audioStatus"))
            object.audioStatus = message.audioStatus;
        return object;
    };

    /**
     * Converts this SdkAudioStatusFrame to JSON.
     * @function toJSON
     * @memberof SdkAudioStatusFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkAudioStatusFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkAudioStatusFrame;
})();

$root.SdkMetric = (function() {

    /**
     * Properties of a SdkMetric.
     * @exports ISdkMetric
     * @interface ISdkMetric
     * @property {SdkMetric.Type|null} [type] SdkMetric type
     * @property {number|null} [value] SdkMetric value
     */

    /**
     * Constructs a new SdkMetric.
     * @exports SdkMetric
     * @classdesc Represents a SdkMetric.
     * @implements ISdkMetric
     * @constructor
     * @param {ISdkMetric=} [properties] Properties to set
     */
    function SdkMetric(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkMetric type.
     * @member {SdkMetric.Type} type
     * @memberof SdkMetric
     * @instance
     */
    SdkMetric.prototype.type = 1;

    /**
     * SdkMetric value.
     * @member {number} value
     * @memberof SdkMetric
     * @instance
     */
    SdkMetric.prototype.value = 0;

    /**
     * Creates a new SdkMetric instance using the specified properties.
     * @function create
     * @memberof SdkMetric
     * @static
     * @param {ISdkMetric=} [properties] Properties to set
     * @returns {SdkMetric} SdkMetric instance
     */
    SdkMetric.create = function create(properties) {
        return new SdkMetric(properties);
    };

    /**
     * Encodes the specified SdkMetric message. Does not implicitly {@link SdkMetric.verify|verify} messages.
     * @function encode
     * @memberof SdkMetric
     * @static
     * @param {ISdkMetric} message SdkMetric message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkMetric.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        if (message.value != null && message.hasOwnProperty("value"))
            writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);
        return writer;
    };

    /**
     * Encodes the specified SdkMetric message, length delimited. Does not implicitly {@link SdkMetric.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkMetric
     * @static
     * @param {ISdkMetric} message SdkMetric message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkMetric.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkMetric message from the specified reader or buffer.
     * @function decode
     * @memberof SdkMetric
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkMetric} SdkMetric
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkMetric.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkMetric();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            case 2:
                message.value = reader.double();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkMetric message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkMetric
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkMetric} SdkMetric
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkMetric.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkMetric message.
     * @function verify
     * @memberof SdkMetric
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkMetric.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
                break;
            }
        if (message.value != null && message.hasOwnProperty("value"))
            if (typeof message.value !== "number")
                return "value: number expected";
        return null;
    };

    /**
     * Creates a SdkMetric message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkMetric
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkMetric} SdkMetric
     */
    SdkMetric.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkMetric)
            return object;
        var message = new $root.SdkMetric();
        switch (object.type) {
        case "VIDEO_ACTUAL_ENCODER_BITRATE":
        case 1:
            message.type = 1;
            break;
        case "VIDEO_AVAILABLE_SEND_BANDWIDTH":
        case 2:
            message.type = 2;
            break;
        case "VIDEO_RETRANSMIT_BITRATE":
        case 3:
            message.type = 3;
            break;
        case "VIDEO_AVAILABLE_RECEIVE_BANDWIDTH":
        case 4:
            message.type = 4;
            break;
        case "VIDEO_TARGET_ENCODER_BITRATE":
        case 5:
            message.type = 5;
            break;
        case "VIDEO_BUCKET_DELAY_MS":
        case 6:
            message.type = 6;
            break;
        case "STUN_RTT_MS":
        case 7:
            message.type = 7;
            break;
        case "SOCKET_DISCARDED_PPS":
        case 8:
            message.type = 8;
            break;
        case "RTC_MIC_JITTER_MS":
        case 9:
            message.type = 9;
            break;
        case "RTC_MIC_PPS":
        case 10:
            message.type = 10;
            break;
        case "RTC_MIC_FRACTION_PACKET_LOST_PERCENT":
        case 11:
            message.type = 11;
            break;
        case "RTC_MIC_BITRATE":
        case 12:
            message.type = 12;
            break;
        case "RTC_MIC_RTT_MS":
        case 13:
            message.type = 13;
            break;
        case "RTC_SPK_PPS":
        case 14:
            message.type = 14;
            break;
        case "RTC_SPK_FRACTION_PACKET_LOST_PERCENT":
        case 15:
            message.type = 15;
            break;
        case "RTC_SPK_JITTER_MS":
        case 16:
            message.type = 16;
            break;
        case "RTC_SPK_FRACTION_DECODER_LOSS_PERCENT":
        case 17:
            message.type = 17;
            break;
        case "RTC_SPK_BITRATE":
        case 18:
            message.type = 18;
            break;
        case "RTC_SPK_CURRENT_DELAY_MS":
        case 19:
            message.type = 19;
            break;
        case "RTC_SPK_JITTER_BUFFER_MS":
        case 20:
            message.type = 20;
            break;
        case "VIDEO_SENT_RTT_MS":
        case 21:
            message.type = 21;
            break;
        case "VIDEO_ENCODE_USAGE_PERCENT":
        case 22:
            message.type = 22;
            break;
        case "VIDEO_NACKS_RECEIVED":
        case 23:
            message.type = 23;
            break;
        case "VIDEO_PLIS_RECEIVED":
        case 24:
            message.type = 24;
            break;
        case "VIDEO_AVERAGE_ENCODE_MS":
        case 25:
            message.type = 25;
            break;
        case "VIDEO_INPUT_FPS":
        case 26:
            message.type = 26;
            break;
        case "VIDEO_ENCODE_FPS":
        case 27:
            message.type = 27;
            break;
        case "VIDEO_SENT_FPS":
        case 28:
            message.type = 28;
            break;
        case "VIDEO_FIRS_RECEIVED":
        case 29:
            message.type = 29;
            break;
        case "VIDEO_SENT_PPS":
        case 30:
            message.type = 30;
            break;
        case "VIDEO_SENT_FRACTION_PACKET_LOST_PERCENT":
        case 31:
            message.type = 31;
            break;
        case "VIDEO_SENT_BITRATE":
        case 32:
            message.type = 32;
            break;
        case "VIDEO_DROPPED_FPS":
        case 33:
            message.type = 33;
            break;
        case "VIDEO_TARGET_DELAY_MS":
        case 34:
            message.type = 34;
            break;
        case "VIDEO_DECODE_MS":
        case 35:
            message.type = 35;
            break;
        case "VIDEO_OUTPUT_FPS":
        case 36:
            message.type = 36;
            break;
        case "VIDEO_RECEIVED_PPS":
        case 37:
            message.type = 37;
            break;
        case "VIDEO_RECEIVED_FRACTION_PACKET_LOST_PERCENT":
        case 38:
            message.type = 38;
            break;
        case "VIDEO_RENDER_DELAY_MS":
        case 39:
            message.type = 39;
            break;
        case "VIDEO_RECEIVED_FPS":
        case 40:
            message.type = 40;
            break;
        case "VIDEO_DECODE_FPS":
        case 41:
            message.type = 41;
            break;
        case "VIDEO_NACKS_SENT":
        case 42:
            message.type = 42;
            break;
        case "VIDEO_FIRS_SENT":
        case 43:
            message.type = 43;
            break;
        case "VIDEO_RECEIVED_BITRATE":
        case 44:
            message.type = 44;
            break;
        case "VIDEO_CURRENT_DELAY_MS":
        case 45:
            message.type = 45;
            break;
        case "VIDEO_JITTER_BUFFER_MS":
        case 46:
            message.type = 46;
            break;
        case "VIDEO_DISCARDED_PPS":
        case 47:
            message.type = 47;
            break;
        case "VIDEO_PLIS_SENT":
        case 48:
            message.type = 48;
            break;
        case "VIDEO_RECEIVED_JITTER_MS":
        case 49:
            message.type = 49;
            break;
        }
        if (object.value != null)
            message.value = Number(object.value);
        return message;
    };

    /**
     * Creates a plain object from a SdkMetric message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkMetric
     * @static
     * @param {SdkMetric} message SdkMetric
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkMetric.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.type = options.enums === String ? "VIDEO_ACTUAL_ENCODER_BITRATE" : 1;
            object.value = 0;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.SdkMetric.Type[message.type] : message.type;
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
        return object;
    };

    /**
     * Converts this SdkMetric to JSON.
     * @function toJSON
     * @memberof SdkMetric
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkMetric.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Type enum.
     * @name SdkMetric.Type
     * @enum {string}
     * @property {number} VIDEO_ACTUAL_ENCODER_BITRATE=1 VIDEO_ACTUAL_ENCODER_BITRATE value
     * @property {number} VIDEO_AVAILABLE_SEND_BANDWIDTH=2 VIDEO_AVAILABLE_SEND_BANDWIDTH value
     * @property {number} VIDEO_RETRANSMIT_BITRATE=3 VIDEO_RETRANSMIT_BITRATE value
     * @property {number} VIDEO_AVAILABLE_RECEIVE_BANDWIDTH=4 VIDEO_AVAILABLE_RECEIVE_BANDWIDTH value
     * @property {number} VIDEO_TARGET_ENCODER_BITRATE=5 VIDEO_TARGET_ENCODER_BITRATE value
     * @property {number} VIDEO_BUCKET_DELAY_MS=6 VIDEO_BUCKET_DELAY_MS value
     * @property {number} STUN_RTT_MS=7 STUN_RTT_MS value
     * @property {number} SOCKET_DISCARDED_PPS=8 SOCKET_DISCARDED_PPS value
     * @property {number} RTC_MIC_JITTER_MS=9 RTC_MIC_JITTER_MS value
     * @property {number} RTC_MIC_PPS=10 RTC_MIC_PPS value
     * @property {number} RTC_MIC_FRACTION_PACKET_LOST_PERCENT=11 RTC_MIC_FRACTION_PACKET_LOST_PERCENT value
     * @property {number} RTC_MIC_BITRATE=12 RTC_MIC_BITRATE value
     * @property {number} RTC_MIC_RTT_MS=13 RTC_MIC_RTT_MS value
     * @property {number} RTC_SPK_PPS=14 RTC_SPK_PPS value
     * @property {number} RTC_SPK_FRACTION_PACKET_LOST_PERCENT=15 RTC_SPK_FRACTION_PACKET_LOST_PERCENT value
     * @property {number} RTC_SPK_JITTER_MS=16 RTC_SPK_JITTER_MS value
     * @property {number} RTC_SPK_FRACTION_DECODER_LOSS_PERCENT=17 RTC_SPK_FRACTION_DECODER_LOSS_PERCENT value
     * @property {number} RTC_SPK_BITRATE=18 RTC_SPK_BITRATE value
     * @property {number} RTC_SPK_CURRENT_DELAY_MS=19 RTC_SPK_CURRENT_DELAY_MS value
     * @property {number} RTC_SPK_JITTER_BUFFER_MS=20 RTC_SPK_JITTER_BUFFER_MS value
     * @property {number} VIDEO_SENT_RTT_MS=21 VIDEO_SENT_RTT_MS value
     * @property {number} VIDEO_ENCODE_USAGE_PERCENT=22 VIDEO_ENCODE_USAGE_PERCENT value
     * @property {number} VIDEO_NACKS_RECEIVED=23 VIDEO_NACKS_RECEIVED value
     * @property {number} VIDEO_PLIS_RECEIVED=24 VIDEO_PLIS_RECEIVED value
     * @property {number} VIDEO_AVERAGE_ENCODE_MS=25 VIDEO_AVERAGE_ENCODE_MS value
     * @property {number} VIDEO_INPUT_FPS=26 VIDEO_INPUT_FPS value
     * @property {number} VIDEO_ENCODE_FPS=27 VIDEO_ENCODE_FPS value
     * @property {number} VIDEO_SENT_FPS=28 VIDEO_SENT_FPS value
     * @property {number} VIDEO_FIRS_RECEIVED=29 VIDEO_FIRS_RECEIVED value
     * @property {number} VIDEO_SENT_PPS=30 VIDEO_SENT_PPS value
     * @property {number} VIDEO_SENT_FRACTION_PACKET_LOST_PERCENT=31 VIDEO_SENT_FRACTION_PACKET_LOST_PERCENT value
     * @property {number} VIDEO_SENT_BITRATE=32 VIDEO_SENT_BITRATE value
     * @property {number} VIDEO_DROPPED_FPS=33 VIDEO_DROPPED_FPS value
     * @property {number} VIDEO_TARGET_DELAY_MS=34 VIDEO_TARGET_DELAY_MS value
     * @property {number} VIDEO_DECODE_MS=35 VIDEO_DECODE_MS value
     * @property {number} VIDEO_OUTPUT_FPS=36 VIDEO_OUTPUT_FPS value
     * @property {number} VIDEO_RECEIVED_PPS=37 VIDEO_RECEIVED_PPS value
     * @property {number} VIDEO_RECEIVED_FRACTION_PACKET_LOST_PERCENT=38 VIDEO_RECEIVED_FRACTION_PACKET_LOST_PERCENT value
     * @property {number} VIDEO_RENDER_DELAY_MS=39 VIDEO_RENDER_DELAY_MS value
     * @property {number} VIDEO_RECEIVED_FPS=40 VIDEO_RECEIVED_FPS value
     * @property {number} VIDEO_DECODE_FPS=41 VIDEO_DECODE_FPS value
     * @property {number} VIDEO_NACKS_SENT=42 VIDEO_NACKS_SENT value
     * @property {number} VIDEO_FIRS_SENT=43 VIDEO_FIRS_SENT value
     * @property {number} VIDEO_RECEIVED_BITRATE=44 VIDEO_RECEIVED_BITRATE value
     * @property {number} VIDEO_CURRENT_DELAY_MS=45 VIDEO_CURRENT_DELAY_MS value
     * @property {number} VIDEO_JITTER_BUFFER_MS=46 VIDEO_JITTER_BUFFER_MS value
     * @property {number} VIDEO_DISCARDED_PPS=47 VIDEO_DISCARDED_PPS value
     * @property {number} VIDEO_PLIS_SENT=48 VIDEO_PLIS_SENT value
     * @property {number} VIDEO_RECEIVED_JITTER_MS=49 VIDEO_RECEIVED_JITTER_MS value
     */
    SdkMetric.Type = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "VIDEO_ACTUAL_ENCODER_BITRATE"] = 1;
        values[valuesById[2] = "VIDEO_AVAILABLE_SEND_BANDWIDTH"] = 2;
        values[valuesById[3] = "VIDEO_RETRANSMIT_BITRATE"] = 3;
        values[valuesById[4] = "VIDEO_AVAILABLE_RECEIVE_BANDWIDTH"] = 4;
        values[valuesById[5] = "VIDEO_TARGET_ENCODER_BITRATE"] = 5;
        values[valuesById[6] = "VIDEO_BUCKET_DELAY_MS"] = 6;
        values[valuesById[7] = "STUN_RTT_MS"] = 7;
        values[valuesById[8] = "SOCKET_DISCARDED_PPS"] = 8;
        values[valuesById[9] = "RTC_MIC_JITTER_MS"] = 9;
        values[valuesById[10] = "RTC_MIC_PPS"] = 10;
        values[valuesById[11] = "RTC_MIC_FRACTION_PACKET_LOST_PERCENT"] = 11;
        values[valuesById[12] = "RTC_MIC_BITRATE"] = 12;
        values[valuesById[13] = "RTC_MIC_RTT_MS"] = 13;
        values[valuesById[14] = "RTC_SPK_PPS"] = 14;
        values[valuesById[15] = "RTC_SPK_FRACTION_PACKET_LOST_PERCENT"] = 15;
        values[valuesById[16] = "RTC_SPK_JITTER_MS"] = 16;
        values[valuesById[17] = "RTC_SPK_FRACTION_DECODER_LOSS_PERCENT"] = 17;
        values[valuesById[18] = "RTC_SPK_BITRATE"] = 18;
        values[valuesById[19] = "RTC_SPK_CURRENT_DELAY_MS"] = 19;
        values[valuesById[20] = "RTC_SPK_JITTER_BUFFER_MS"] = 20;
        values[valuesById[21] = "VIDEO_SENT_RTT_MS"] = 21;
        values[valuesById[22] = "VIDEO_ENCODE_USAGE_PERCENT"] = 22;
        values[valuesById[23] = "VIDEO_NACKS_RECEIVED"] = 23;
        values[valuesById[24] = "VIDEO_PLIS_RECEIVED"] = 24;
        values[valuesById[25] = "VIDEO_AVERAGE_ENCODE_MS"] = 25;
        values[valuesById[26] = "VIDEO_INPUT_FPS"] = 26;
        values[valuesById[27] = "VIDEO_ENCODE_FPS"] = 27;
        values[valuesById[28] = "VIDEO_SENT_FPS"] = 28;
        values[valuesById[29] = "VIDEO_FIRS_RECEIVED"] = 29;
        values[valuesById[30] = "VIDEO_SENT_PPS"] = 30;
        values[valuesById[31] = "VIDEO_SENT_FRACTION_PACKET_LOST_PERCENT"] = 31;
        values[valuesById[32] = "VIDEO_SENT_BITRATE"] = 32;
        values[valuesById[33] = "VIDEO_DROPPED_FPS"] = 33;
        values[valuesById[34] = "VIDEO_TARGET_DELAY_MS"] = 34;
        values[valuesById[35] = "VIDEO_DECODE_MS"] = 35;
        values[valuesById[36] = "VIDEO_OUTPUT_FPS"] = 36;
        values[valuesById[37] = "VIDEO_RECEIVED_PPS"] = 37;
        values[valuesById[38] = "VIDEO_RECEIVED_FRACTION_PACKET_LOST_PERCENT"] = 38;
        values[valuesById[39] = "VIDEO_RENDER_DELAY_MS"] = 39;
        values[valuesById[40] = "VIDEO_RECEIVED_FPS"] = 40;
        values[valuesById[41] = "VIDEO_DECODE_FPS"] = 41;
        values[valuesById[42] = "VIDEO_NACKS_SENT"] = 42;
        values[valuesById[43] = "VIDEO_FIRS_SENT"] = 43;
        values[valuesById[44] = "VIDEO_RECEIVED_BITRATE"] = 44;
        values[valuesById[45] = "VIDEO_CURRENT_DELAY_MS"] = 45;
        values[valuesById[46] = "VIDEO_JITTER_BUFFER_MS"] = 46;
        values[valuesById[47] = "VIDEO_DISCARDED_PPS"] = 47;
        values[valuesById[48] = "VIDEO_PLIS_SENT"] = 48;
        values[valuesById[49] = "VIDEO_RECEIVED_JITTER_MS"] = 49;
        return values;
    })();

    return SdkMetric;
})();

$root.SdkStreamMetricFrame = (function() {

    /**
     * Properties of a SdkStreamMetricFrame.
     * @exports ISdkStreamMetricFrame
     * @interface ISdkStreamMetricFrame
     * @property {number|null} [streamId] SdkStreamMetricFrame streamId
     * @property {number|null} [groupId] SdkStreamMetricFrame groupId
     * @property {Array.<ISdkMetric>|null} [metrics] SdkStreamMetricFrame metrics
     */

    /**
     * Constructs a new SdkStreamMetricFrame.
     * @exports SdkStreamMetricFrame
     * @classdesc Represents a SdkStreamMetricFrame.
     * @implements ISdkStreamMetricFrame
     * @constructor
     * @param {ISdkStreamMetricFrame=} [properties] Properties to set
     */
    function SdkStreamMetricFrame(properties) {
        this.metrics = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkStreamMetricFrame streamId.
     * @member {number} streamId
     * @memberof SdkStreamMetricFrame
     * @instance
     */
    SdkStreamMetricFrame.prototype.streamId = 0;

    /**
     * SdkStreamMetricFrame groupId.
     * @member {number} groupId
     * @memberof SdkStreamMetricFrame
     * @instance
     */
    SdkStreamMetricFrame.prototype.groupId = 0;

    /**
     * SdkStreamMetricFrame metrics.
     * @member {Array.<ISdkMetric>} metrics
     * @memberof SdkStreamMetricFrame
     * @instance
     */
    SdkStreamMetricFrame.prototype.metrics = $util.emptyArray;

    /**
     * Creates a new SdkStreamMetricFrame instance using the specified properties.
     * @function create
     * @memberof SdkStreamMetricFrame
     * @static
     * @param {ISdkStreamMetricFrame=} [properties] Properties to set
     * @returns {SdkStreamMetricFrame} SdkStreamMetricFrame instance
     */
    SdkStreamMetricFrame.create = function create(properties) {
        return new SdkStreamMetricFrame(properties);
    };

    /**
     * Encodes the specified SdkStreamMetricFrame message. Does not implicitly {@link SdkStreamMetricFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkStreamMetricFrame
     * @static
     * @param {ISdkStreamMetricFrame} message SdkStreamMetricFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkStreamMetricFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.streamId);
        if (message.groupId != null && message.hasOwnProperty("groupId"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.groupId);
        if (message.metrics != null && message.metrics.length)
            for (var i = 0; i < message.metrics.length; ++i)
                $root.SdkMetric.encode(message.metrics[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SdkStreamMetricFrame message, length delimited. Does not implicitly {@link SdkStreamMetricFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkStreamMetricFrame
     * @static
     * @param {ISdkStreamMetricFrame} message SdkStreamMetricFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkStreamMetricFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkStreamMetricFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkStreamMetricFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkStreamMetricFrame} SdkStreamMetricFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkStreamMetricFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkStreamMetricFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 3:
                message.streamId = reader.uint32();
                break;
            case 4:
                message.groupId = reader.uint32();
                break;
            case 5:
                if (!(message.metrics && message.metrics.length))
                    message.metrics = [];
                message.metrics.push($root.SdkMetric.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkStreamMetricFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkStreamMetricFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkStreamMetricFrame} SdkStreamMetricFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkStreamMetricFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkStreamMetricFrame message.
     * @function verify
     * @memberof SdkStreamMetricFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkStreamMetricFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            if (!$util.isInteger(message.streamId))
                return "streamId: integer expected";
        if (message.groupId != null && message.hasOwnProperty("groupId"))
            if (!$util.isInteger(message.groupId))
                return "groupId: integer expected";
        if (message.metrics != null && message.hasOwnProperty("metrics")) {
            if (!Array.isArray(message.metrics))
                return "metrics: array expected";
            for (var i = 0; i < message.metrics.length; ++i) {
                var error = $root.SdkMetric.verify(message.metrics[i]);
                if (error)
                    return "metrics." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SdkStreamMetricFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkStreamMetricFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkStreamMetricFrame} SdkStreamMetricFrame
     */
    SdkStreamMetricFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkStreamMetricFrame)
            return object;
        var message = new $root.SdkStreamMetricFrame();
        if (object.streamId != null)
            message.streamId = object.streamId >>> 0;
        if (object.groupId != null)
            message.groupId = object.groupId >>> 0;
        if (object.metrics) {
            if (!Array.isArray(object.metrics))
                throw TypeError(".SdkStreamMetricFrame.metrics: array expected");
            message.metrics = [];
            for (var i = 0; i < object.metrics.length; ++i) {
                if (typeof object.metrics[i] !== "object")
                    throw TypeError(".SdkStreamMetricFrame.metrics: object expected");
                message.metrics[i] = $root.SdkMetric.fromObject(object.metrics[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkStreamMetricFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkStreamMetricFrame
     * @static
     * @param {SdkStreamMetricFrame} message SdkStreamMetricFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkStreamMetricFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.metrics = [];
        if (options.defaults) {
            object.streamId = 0;
            object.groupId = 0;
        }
        if (message.streamId != null && message.hasOwnProperty("streamId"))
            object.streamId = message.streamId;
        if (message.groupId != null && message.hasOwnProperty("groupId"))
            object.groupId = message.groupId;
        if (message.metrics && message.metrics.length) {
            object.metrics = [];
            for (var j = 0; j < message.metrics.length; ++j)
                object.metrics[j] = $root.SdkMetric.toObject(message.metrics[j], options);
        }
        return object;
    };

    /**
     * Converts this SdkStreamMetricFrame to JSON.
     * @function toJSON
     * @memberof SdkStreamMetricFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkStreamMetricFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkStreamMetricFrame;
})();

$root.SdkClientMetricFrame = (function() {

    /**
     * Properties of a SdkClientMetricFrame.
     * @exports ISdkClientMetricFrame
     * @interface ISdkClientMetricFrame
     * @property {Array.<ISdkMetric>|null} [globalMetrics] SdkClientMetricFrame globalMetrics
     * @property {Array.<ISdkStreamMetricFrame>|null} [streamMetricFrames] SdkClientMetricFrame streamMetricFrames
     */

    /**
     * Constructs a new SdkClientMetricFrame.
     * @exports SdkClientMetricFrame
     * @classdesc Represents a SdkClientMetricFrame.
     * @implements ISdkClientMetricFrame
     * @constructor
     * @param {ISdkClientMetricFrame=} [properties] Properties to set
     */
    function SdkClientMetricFrame(properties) {
        this.globalMetrics = [];
        this.streamMetricFrames = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkClientMetricFrame globalMetrics.
     * @member {Array.<ISdkMetric>} globalMetrics
     * @memberof SdkClientMetricFrame
     * @instance
     */
    SdkClientMetricFrame.prototype.globalMetrics = $util.emptyArray;

    /**
     * SdkClientMetricFrame streamMetricFrames.
     * @member {Array.<ISdkStreamMetricFrame>} streamMetricFrames
     * @memberof SdkClientMetricFrame
     * @instance
     */
    SdkClientMetricFrame.prototype.streamMetricFrames = $util.emptyArray;

    /**
     * Creates a new SdkClientMetricFrame instance using the specified properties.
     * @function create
     * @memberof SdkClientMetricFrame
     * @static
     * @param {ISdkClientMetricFrame=} [properties] Properties to set
     * @returns {SdkClientMetricFrame} SdkClientMetricFrame instance
     */
    SdkClientMetricFrame.create = function create(properties) {
        return new SdkClientMetricFrame(properties);
    };

    /**
     * Encodes the specified SdkClientMetricFrame message. Does not implicitly {@link SdkClientMetricFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkClientMetricFrame
     * @static
     * @param {ISdkClientMetricFrame} message SdkClientMetricFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkClientMetricFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.globalMetrics != null && message.globalMetrics.length)
            for (var i = 0; i < message.globalMetrics.length; ++i)
                $root.SdkMetric.encode(message.globalMetrics[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.streamMetricFrames != null && message.streamMetricFrames.length)
            for (var i = 0; i < message.streamMetricFrames.length; ++i)
                $root.SdkStreamMetricFrame.encode(message.streamMetricFrames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SdkClientMetricFrame message, length delimited. Does not implicitly {@link SdkClientMetricFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkClientMetricFrame
     * @static
     * @param {ISdkClientMetricFrame} message SdkClientMetricFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkClientMetricFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkClientMetricFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkClientMetricFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkClientMetricFrame} SdkClientMetricFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkClientMetricFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkClientMetricFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.globalMetrics && message.globalMetrics.length))
                    message.globalMetrics = [];
                message.globalMetrics.push($root.SdkMetric.decode(reader, reader.uint32()));
                break;
            case 2:
                if (!(message.streamMetricFrames && message.streamMetricFrames.length))
                    message.streamMetricFrames = [];
                message.streamMetricFrames.push($root.SdkStreamMetricFrame.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkClientMetricFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkClientMetricFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkClientMetricFrame} SdkClientMetricFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkClientMetricFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkClientMetricFrame message.
     * @function verify
     * @memberof SdkClientMetricFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkClientMetricFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.globalMetrics != null && message.hasOwnProperty("globalMetrics")) {
            if (!Array.isArray(message.globalMetrics))
                return "globalMetrics: array expected";
            for (var i = 0; i < message.globalMetrics.length; ++i) {
                var error = $root.SdkMetric.verify(message.globalMetrics[i]);
                if (error)
                    return "globalMetrics." + error;
            }
        }
        if (message.streamMetricFrames != null && message.hasOwnProperty("streamMetricFrames")) {
            if (!Array.isArray(message.streamMetricFrames))
                return "streamMetricFrames: array expected";
            for (var i = 0; i < message.streamMetricFrames.length; ++i) {
                var error = $root.SdkStreamMetricFrame.verify(message.streamMetricFrames[i]);
                if (error)
                    return "streamMetricFrames." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SdkClientMetricFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkClientMetricFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkClientMetricFrame} SdkClientMetricFrame
     */
    SdkClientMetricFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkClientMetricFrame)
            return object;
        var message = new $root.SdkClientMetricFrame();
        if (object.globalMetrics) {
            if (!Array.isArray(object.globalMetrics))
                throw TypeError(".SdkClientMetricFrame.globalMetrics: array expected");
            message.globalMetrics = [];
            for (var i = 0; i < object.globalMetrics.length; ++i) {
                if (typeof object.globalMetrics[i] !== "object")
                    throw TypeError(".SdkClientMetricFrame.globalMetrics: object expected");
                message.globalMetrics[i] = $root.SdkMetric.fromObject(object.globalMetrics[i]);
            }
        }
        if (object.streamMetricFrames) {
            if (!Array.isArray(object.streamMetricFrames))
                throw TypeError(".SdkClientMetricFrame.streamMetricFrames: array expected");
            message.streamMetricFrames = [];
            for (var i = 0; i < object.streamMetricFrames.length; ++i) {
                if (typeof object.streamMetricFrames[i] !== "object")
                    throw TypeError(".SdkClientMetricFrame.streamMetricFrames: object expected");
                message.streamMetricFrames[i] = $root.SdkStreamMetricFrame.fromObject(object.streamMetricFrames[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkClientMetricFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkClientMetricFrame
     * @static
     * @param {SdkClientMetricFrame} message SdkClientMetricFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkClientMetricFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.globalMetrics = [];
            object.streamMetricFrames = [];
        }
        if (message.globalMetrics && message.globalMetrics.length) {
            object.globalMetrics = [];
            for (var j = 0; j < message.globalMetrics.length; ++j)
                object.globalMetrics[j] = $root.SdkMetric.toObject(message.globalMetrics[j], options);
        }
        if (message.streamMetricFrames && message.streamMetricFrames.length) {
            object.streamMetricFrames = [];
            for (var j = 0; j < message.streamMetricFrames.length; ++j)
                object.streamMetricFrames[j] = $root.SdkStreamMetricFrame.toObject(message.streamMetricFrames[j], options);
        }
        return object;
    };

    /**
     * Converts this SdkClientMetricFrame to JSON.
     * @function toJSON
     * @memberof SdkClientMetricFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkClientMetricFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkClientMetricFrame;
})();

$root.SdkDataMessageFrame = (function() {

    /**
     * Properties of a SdkDataMessageFrame.
     * @exports ISdkDataMessageFrame
     * @interface ISdkDataMessageFrame
     * @property {Array.<ISdkDataMessagePayload>|null} [messages] SdkDataMessageFrame messages
     */

    /**
     * Constructs a new SdkDataMessageFrame.
     * @exports SdkDataMessageFrame
     * @classdesc Represents a SdkDataMessageFrame.
     * @implements ISdkDataMessageFrame
     * @constructor
     * @param {ISdkDataMessageFrame=} [properties] Properties to set
     */
    function SdkDataMessageFrame(properties) {
        this.messages = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkDataMessageFrame messages.
     * @member {Array.<ISdkDataMessagePayload>} messages
     * @memberof SdkDataMessageFrame
     * @instance
     */
    SdkDataMessageFrame.prototype.messages = $util.emptyArray;

    /**
     * Creates a new SdkDataMessageFrame instance using the specified properties.
     * @function create
     * @memberof SdkDataMessageFrame
     * @static
     * @param {ISdkDataMessageFrame=} [properties] Properties to set
     * @returns {SdkDataMessageFrame} SdkDataMessageFrame instance
     */
    SdkDataMessageFrame.create = function create(properties) {
        return new SdkDataMessageFrame(properties);
    };

    /**
     * Encodes the specified SdkDataMessageFrame message. Does not implicitly {@link SdkDataMessageFrame.verify|verify} messages.
     * @function encode
     * @memberof SdkDataMessageFrame
     * @static
     * @param {ISdkDataMessageFrame} message SdkDataMessageFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkDataMessageFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.messages != null && message.messages.length)
            for (var i = 0; i < message.messages.length; ++i)
                $root.SdkDataMessagePayload.encode(message.messages[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified SdkDataMessageFrame message, length delimited. Does not implicitly {@link SdkDataMessageFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkDataMessageFrame
     * @static
     * @param {ISdkDataMessageFrame} message SdkDataMessageFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkDataMessageFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkDataMessageFrame message from the specified reader or buffer.
     * @function decode
     * @memberof SdkDataMessageFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkDataMessageFrame} SdkDataMessageFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkDataMessageFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkDataMessageFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.messages && message.messages.length))
                    message.messages = [];
                message.messages.push($root.SdkDataMessagePayload.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkDataMessageFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkDataMessageFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkDataMessageFrame} SdkDataMessageFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkDataMessageFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkDataMessageFrame message.
     * @function verify
     * @memberof SdkDataMessageFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkDataMessageFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.messages != null && message.hasOwnProperty("messages")) {
            if (!Array.isArray(message.messages))
                return "messages: array expected";
            for (var i = 0; i < message.messages.length; ++i) {
                var error = $root.SdkDataMessagePayload.verify(message.messages[i]);
                if (error)
                    return "messages." + error;
            }
        }
        return null;
    };

    /**
     * Creates a SdkDataMessageFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkDataMessageFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkDataMessageFrame} SdkDataMessageFrame
     */
    SdkDataMessageFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkDataMessageFrame)
            return object;
        var message = new $root.SdkDataMessageFrame();
        if (object.messages) {
            if (!Array.isArray(object.messages))
                throw TypeError(".SdkDataMessageFrame.messages: array expected");
            message.messages = [];
            for (var i = 0; i < object.messages.length; ++i) {
                if (typeof object.messages[i] !== "object")
                    throw TypeError(".SdkDataMessageFrame.messages: object expected");
                message.messages[i] = $root.SdkDataMessagePayload.fromObject(object.messages[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkDataMessageFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkDataMessageFrame
     * @static
     * @param {SdkDataMessageFrame} message SdkDataMessageFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkDataMessageFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.messages = [];
        if (message.messages && message.messages.length) {
            object.messages = [];
            for (var j = 0; j < message.messages.length; ++j)
                object.messages[j] = $root.SdkDataMessagePayload.toObject(message.messages[j], options);
        }
        return object;
    };

    /**
     * Converts this SdkDataMessageFrame to JSON.
     * @function toJSON
     * @memberof SdkDataMessageFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkDataMessageFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkDataMessageFrame;
})();

$root.SdkDataMessagePayload = (function() {

    /**
     * Properties of a SdkDataMessagePayload.
     * @exports ISdkDataMessagePayload
     * @interface ISdkDataMessagePayload
     * @property {string|null} [topic] SdkDataMessagePayload topic
     * @property {Uint8Array|null} [data] SdkDataMessagePayload data
     * @property {number|null} [lifetimeMs] SdkDataMessagePayload lifetimeMs
     * @property {string|null} [senderAttendeeId] SdkDataMessagePayload senderAttendeeId
     * @property {number|Long|null} [ingestTimeNs] SdkDataMessagePayload ingestTimeNs
     * @property {string|null} [senderExternalUserId] SdkDataMessagePayload senderExternalUserId
     */

    /**
     * Constructs a new SdkDataMessagePayload.
     * @exports SdkDataMessagePayload
     * @classdesc Represents a SdkDataMessagePayload.
     * @implements ISdkDataMessagePayload
     * @constructor
     * @param {ISdkDataMessagePayload=} [properties] Properties to set
     */
    function SdkDataMessagePayload(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkDataMessagePayload topic.
     * @member {string} topic
     * @memberof SdkDataMessagePayload
     * @instance
     */
    SdkDataMessagePayload.prototype.topic = "";

    /**
     * SdkDataMessagePayload data.
     * @member {Uint8Array} data
     * @memberof SdkDataMessagePayload
     * @instance
     */
    SdkDataMessagePayload.prototype.data = $util.newBuffer([]);

    /**
     * SdkDataMessagePayload lifetimeMs.
     * @member {number} lifetimeMs
     * @memberof SdkDataMessagePayload
     * @instance
     */
    SdkDataMessagePayload.prototype.lifetimeMs = 0;

    /**
     * SdkDataMessagePayload senderAttendeeId.
     * @member {string} senderAttendeeId
     * @memberof SdkDataMessagePayload
     * @instance
     */
    SdkDataMessagePayload.prototype.senderAttendeeId = "";

    /**
     * SdkDataMessagePayload ingestTimeNs.
     * @member {number|Long} ingestTimeNs
     * @memberof SdkDataMessagePayload
     * @instance
     */
    SdkDataMessagePayload.prototype.ingestTimeNs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

    /**
     * SdkDataMessagePayload senderExternalUserId.
     * @member {string} senderExternalUserId
     * @memberof SdkDataMessagePayload
     * @instance
     */
    SdkDataMessagePayload.prototype.senderExternalUserId = "";

    /**
     * Creates a new SdkDataMessagePayload instance using the specified properties.
     * @function create
     * @memberof SdkDataMessagePayload
     * @static
     * @param {ISdkDataMessagePayload=} [properties] Properties to set
     * @returns {SdkDataMessagePayload} SdkDataMessagePayload instance
     */
    SdkDataMessagePayload.create = function create(properties) {
        return new SdkDataMessagePayload(properties);
    };

    /**
     * Encodes the specified SdkDataMessagePayload message. Does not implicitly {@link SdkDataMessagePayload.verify|verify} messages.
     * @function encode
     * @memberof SdkDataMessagePayload
     * @static
     * @param {ISdkDataMessagePayload} message SdkDataMessagePayload message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkDataMessagePayload.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.topic != null && message.hasOwnProperty("topic"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.topic);
        if (message.data != null && message.hasOwnProperty("data"))
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
        if (message.lifetimeMs != null && message.hasOwnProperty("lifetimeMs"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.lifetimeMs);
        if (message.senderAttendeeId != null && message.hasOwnProperty("senderAttendeeId"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.senderAttendeeId);
        if (message.ingestTimeNs != null && message.hasOwnProperty("ingestTimeNs"))
            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.ingestTimeNs);
        if (message.senderExternalUserId != null && message.hasOwnProperty("senderExternalUserId"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.senderExternalUserId);
        return writer;
    };

    /**
     * Encodes the specified SdkDataMessagePayload message, length delimited. Does not implicitly {@link SdkDataMessagePayload.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkDataMessagePayload
     * @static
     * @param {ISdkDataMessagePayload} message SdkDataMessagePayload message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkDataMessagePayload.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkDataMessagePayload message from the specified reader or buffer.
     * @function decode
     * @memberof SdkDataMessagePayload
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkDataMessagePayload} SdkDataMessagePayload
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkDataMessagePayload.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkDataMessagePayload();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.topic = reader.string();
                break;
            case 2:
                message.data = reader.bytes();
                break;
            case 3:
                message.lifetimeMs = reader.uint32();
                break;
            case 4:
                message.senderAttendeeId = reader.string();
                break;
            case 5:
                message.ingestTimeNs = reader.int64();
                break;
            case 6:
                message.senderExternalUserId = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkDataMessagePayload message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkDataMessagePayload
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkDataMessagePayload} SdkDataMessagePayload
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkDataMessagePayload.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkDataMessagePayload message.
     * @function verify
     * @memberof SdkDataMessagePayload
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkDataMessagePayload.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.topic != null && message.hasOwnProperty("topic"))
            if (!$util.isString(message.topic))
                return "topic: string expected";
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        if (message.lifetimeMs != null && message.hasOwnProperty("lifetimeMs"))
            if (!$util.isInteger(message.lifetimeMs))
                return "lifetimeMs: integer expected";
        if (message.senderAttendeeId != null && message.hasOwnProperty("senderAttendeeId"))
            if (!$util.isString(message.senderAttendeeId))
                return "senderAttendeeId: string expected";
        if (message.ingestTimeNs != null && message.hasOwnProperty("ingestTimeNs"))
            if (!$util.isInteger(message.ingestTimeNs) && !(message.ingestTimeNs && $util.isInteger(message.ingestTimeNs.low) && $util.isInteger(message.ingestTimeNs.high)))
                return "ingestTimeNs: integer|Long expected";
        if (message.senderExternalUserId != null && message.hasOwnProperty("senderExternalUserId"))
            if (!$util.isString(message.senderExternalUserId))
                return "senderExternalUserId: string expected";
        return null;
    };

    /**
     * Creates a SdkDataMessagePayload message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkDataMessagePayload
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkDataMessagePayload} SdkDataMessagePayload
     */
    SdkDataMessagePayload.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkDataMessagePayload)
            return object;
        var message = new $root.SdkDataMessagePayload();
        if (object.topic != null)
            message.topic = String(object.topic);
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length)
                message.data = object.data;
        if (object.lifetimeMs != null)
            message.lifetimeMs = object.lifetimeMs >>> 0;
        if (object.senderAttendeeId != null)
            message.senderAttendeeId = String(object.senderAttendeeId);
        if (object.ingestTimeNs != null)
            if ($util.Long)
                (message.ingestTimeNs = $util.Long.fromValue(object.ingestTimeNs)).unsigned = false;
            else if (typeof object.ingestTimeNs === "string")
                message.ingestTimeNs = parseInt(object.ingestTimeNs, 10);
            else if (typeof object.ingestTimeNs === "number")
                message.ingestTimeNs = object.ingestTimeNs;
            else if (typeof object.ingestTimeNs === "object")
                message.ingestTimeNs = new $util.LongBits(object.ingestTimeNs.low >>> 0, object.ingestTimeNs.high >>> 0).toNumber();
        if (object.senderExternalUserId != null)
            message.senderExternalUserId = String(object.senderExternalUserId);
        return message;
    };

    /**
     * Creates a plain object from a SdkDataMessagePayload message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkDataMessagePayload
     * @static
     * @param {SdkDataMessagePayload} message SdkDataMessagePayload
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkDataMessagePayload.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.topic = "";
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
            object.lifetimeMs = 0;
            object.senderAttendeeId = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.ingestTimeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.ingestTimeNs = options.longs === String ? "0" : 0;
            object.senderExternalUserId = "";
        }
        if (message.topic != null && message.hasOwnProperty("topic"))
            object.topic = message.topic;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        if (message.lifetimeMs != null && message.hasOwnProperty("lifetimeMs"))
            object.lifetimeMs = message.lifetimeMs;
        if (message.senderAttendeeId != null && message.hasOwnProperty("senderAttendeeId"))
            object.senderAttendeeId = message.senderAttendeeId;
        if (message.ingestTimeNs != null && message.hasOwnProperty("ingestTimeNs"))
            if (typeof message.ingestTimeNs === "number")
                object.ingestTimeNs = options.longs === String ? String(message.ingestTimeNs) : message.ingestTimeNs;
            else
                object.ingestTimeNs = options.longs === String ? $util.Long.prototype.toString.call(message.ingestTimeNs) : options.longs === Number ? new $util.LongBits(message.ingestTimeNs.low >>> 0, message.ingestTimeNs.high >>> 0).toNumber() : message.ingestTimeNs;
        if (message.senderExternalUserId != null && message.hasOwnProperty("senderExternalUserId"))
            object.senderExternalUserId = message.senderExternalUserId;
        return object;
    };

    /**
     * Converts this SdkDataMessagePayload to JSON.
     * @function toJSON
     * @memberof SdkDataMessagePayload
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkDataMessagePayload.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkDataMessagePayload;
})();

$root.SdkTurnCredentials = (function() {

    /**
     * Properties of a SdkTurnCredentials.
     * @exports ISdkTurnCredentials
     * @interface ISdkTurnCredentials
     * @property {string|null} [username] SdkTurnCredentials username
     * @property {string|null} [password] SdkTurnCredentials password
     * @property {number|null} [ttl] SdkTurnCredentials ttl
     * @property {Array.<string>|null} [uris] SdkTurnCredentials uris
     */

    /**
     * Constructs a new SdkTurnCredentials.
     * @exports SdkTurnCredentials
     * @classdesc Represents a SdkTurnCredentials.
     * @implements ISdkTurnCredentials
     * @constructor
     * @param {ISdkTurnCredentials=} [properties] Properties to set
     */
    function SdkTurnCredentials(properties) {
        this.uris = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SdkTurnCredentials username.
     * @member {string} username
     * @memberof SdkTurnCredentials
     * @instance
     */
    SdkTurnCredentials.prototype.username = "";

    /**
     * SdkTurnCredentials password.
     * @member {string} password
     * @memberof SdkTurnCredentials
     * @instance
     */
    SdkTurnCredentials.prototype.password = "";

    /**
     * SdkTurnCredentials ttl.
     * @member {number} ttl
     * @memberof SdkTurnCredentials
     * @instance
     */
    SdkTurnCredentials.prototype.ttl = 0;

    /**
     * SdkTurnCredentials uris.
     * @member {Array.<string>} uris
     * @memberof SdkTurnCredentials
     * @instance
     */
    SdkTurnCredentials.prototype.uris = $util.emptyArray;

    /**
     * Creates a new SdkTurnCredentials instance using the specified properties.
     * @function create
     * @memberof SdkTurnCredentials
     * @static
     * @param {ISdkTurnCredentials=} [properties] Properties to set
     * @returns {SdkTurnCredentials} SdkTurnCredentials instance
     */
    SdkTurnCredentials.create = function create(properties) {
        return new SdkTurnCredentials(properties);
    };

    /**
     * Encodes the specified SdkTurnCredentials message. Does not implicitly {@link SdkTurnCredentials.verify|verify} messages.
     * @function encode
     * @memberof SdkTurnCredentials
     * @static
     * @param {ISdkTurnCredentials} message SdkTurnCredentials message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkTurnCredentials.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.username != null && message.hasOwnProperty("username"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);
        if (message.password != null && message.hasOwnProperty("password"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
        if (message.ttl != null && message.hasOwnProperty("ttl"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ttl);
        if (message.uris != null && message.uris.length)
            for (var i = 0; i < message.uris.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.uris[i]);
        return writer;
    };

    /**
     * Encodes the specified SdkTurnCredentials message, length delimited. Does not implicitly {@link SdkTurnCredentials.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SdkTurnCredentials
     * @static
     * @param {ISdkTurnCredentials} message SdkTurnCredentials message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SdkTurnCredentials.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SdkTurnCredentials message from the specified reader or buffer.
     * @function decode
     * @memberof SdkTurnCredentials
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SdkTurnCredentials} SdkTurnCredentials
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkTurnCredentials.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SdkTurnCredentials();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.username = reader.string();
                break;
            case 2:
                message.password = reader.string();
                break;
            case 3:
                message.ttl = reader.uint32();
                break;
            case 4:
                if (!(message.uris && message.uris.length))
                    message.uris = [];
                message.uris.push(reader.string());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SdkTurnCredentials message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SdkTurnCredentials
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SdkTurnCredentials} SdkTurnCredentials
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SdkTurnCredentials.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SdkTurnCredentials message.
     * @function verify
     * @memberof SdkTurnCredentials
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SdkTurnCredentials.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.username != null && message.hasOwnProperty("username"))
            if (!$util.isString(message.username))
                return "username: string expected";
        if (message.password != null && message.hasOwnProperty("password"))
            if (!$util.isString(message.password))
                return "password: string expected";
        if (message.ttl != null && message.hasOwnProperty("ttl"))
            if (!$util.isInteger(message.ttl))
                return "ttl: integer expected";
        if (message.uris != null && message.hasOwnProperty("uris")) {
            if (!Array.isArray(message.uris))
                return "uris: array expected";
            for (var i = 0; i < message.uris.length; ++i)
                if (!$util.isString(message.uris[i]))
                    return "uris: string[] expected";
        }
        return null;
    };

    /**
     * Creates a SdkTurnCredentials message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SdkTurnCredentials
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SdkTurnCredentials} SdkTurnCredentials
     */
    SdkTurnCredentials.fromObject = function fromObject(object) {
        if (object instanceof $root.SdkTurnCredentials)
            return object;
        var message = new $root.SdkTurnCredentials();
        if (object.username != null)
            message.username = String(object.username);
        if (object.password != null)
            message.password = String(object.password);
        if (object.ttl != null)
            message.ttl = object.ttl >>> 0;
        if (object.uris) {
            if (!Array.isArray(object.uris))
                throw TypeError(".SdkTurnCredentials.uris: array expected");
            message.uris = [];
            for (var i = 0; i < object.uris.length; ++i)
                message.uris[i] = String(object.uris[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a SdkTurnCredentials message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SdkTurnCredentials
     * @static
     * @param {SdkTurnCredentials} message SdkTurnCredentials
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SdkTurnCredentials.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.uris = [];
        if (options.defaults) {
            object.username = "";
            object.password = "";
            object.ttl = 0;
        }
        if (message.username != null && message.hasOwnProperty("username"))
            object.username = message.username;
        if (message.password != null && message.hasOwnProperty("password"))
            object.password = message.password;
        if (message.ttl != null && message.hasOwnProperty("ttl"))
            object.ttl = message.ttl;
        if (message.uris && message.uris.length) {
            object.uris = [];
            for (var j = 0; j < message.uris.length; ++j)
                object.uris[j] = message.uris[j];
        }
        return object;
    };

    /**
     * Converts this SdkTurnCredentials to JSON.
     * @function toJSON
     * @memberof SdkTurnCredentials
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SdkTurnCredentials.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SdkTurnCredentials;
})();

module.exports = $root;


/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/sigv4/DefaultSigV4.js":
/*!**********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/sigv4/DefaultSigV4.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Versioning_1 = __webpack_require__(/*! ../versioning/Versioning */ "./node_modules/amazon-chime-sdk-js/build/versioning/Versioning.js");
class DefaultSigV4 {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    constructor(chimeClient, awsClient) {
        this.chimeClient = chimeClient;
        this.awsClient = awsClient;
    }
    makeTwoDigits(n) {
        /* istanbul ignore if */
        /* istanbul ignore else */
        if (n > 9) {
            return n.toString();
        }
        else {
            return '0' + n.toString();
        }
    }
    getDateTimeString() {
        const d = new Date();
        return (d.getUTCFullYear() +
            this.makeTwoDigits(d.getUTCMonth() + 1) +
            this.makeTwoDigits(d.getUTCDate()) +
            'T' +
            this.makeTwoDigits(d.getUTCHours()) +
            this.makeTwoDigits(d.getUTCMinutes()) +
            this.makeTwoDigits(d.getUTCSeconds()) +
            'Z');
    }
    getDateString(dateTimeString) {
        return dateTimeString.substring(0, dateTimeString.indexOf('T'));
    }
    getSignatureKey(key, date, regionName, serviceName) {
        const kDate = this.awsClient.util.crypto.hmac('AWS4' + key, date, 'buffer');
        const kRegion = this.awsClient.util.crypto.hmac(kDate, regionName, 'buffer');
        const kService = this.awsClient.util.crypto.hmac(kRegion, serviceName, 'buffer');
        const kSigning = this.awsClient.util.crypto.hmac(kService, 'aws4_request', 'buffer');
        return kSigning;
    }
    signURL(method, scheme, serviceName, hostname, path, payload, queryParams) {
        const now = this.getDateTimeString();
        const today = this.getDateString(now);
        const algorithm = 'AWS4-HMAC-SHA256';
        const region = this.chimeClient.config.region;
        const signedHeaders = 'host';
        const canonicalHeaders = 'host:' + hostname.toLowerCase() + '\n';
        const credentialScope = today + '/' + region + '/' + serviceName + '/' + 'aws4_request';
        const credentials = this.chimeClient.config.credentials;
        let params = new Map();
        params.set('X-Amz-Algorithm', [algorithm]);
        params.set('X-Amz-Credential', [
            encodeURIComponent(credentials.accessKeyId + '/' + credentialScope),
        ]);
        params.set('X-Amz-Date', [now]);
        params.set('X-Amz-Expires', ['10']);
        params.set('X-Amz-SignedHeaders', ['host']);
        if (credentials.sessionToken) {
            params.set('X-Amz-Security-Token', [encodeURIComponent(credentials.sessionToken)]);
        }
        params.set(Versioning_1.default.X_AMZN_VERSION, [encodeURIComponent(Versioning_1.default.sdkVersion)]);
        params.set(Versioning_1.default.X_AMZN_USER_AGENT, [
            encodeURIComponent(Versioning_1.default.sdkUserAgentLowResolution),
        ]);
        queryParams === null || queryParams === void 0 ? void 0 : queryParams.forEach((values, key) => {
            const encodedKey = encodeURIComponent(key);
            values.sort().forEach((value) => {
                if (!params.has(encodedKey)) {
                    params.set(encodedKey, []);
                }
                params.get(encodedKey).push(encodeURIComponent(value));
            });
        });
        let canonicalQuerystring = '';
        params = new Map([...params.entries()].sort());
        params.forEach((values, key) => {
            values.forEach(value => {
                if (canonicalQuerystring.length) {
                    canonicalQuerystring += '&';
                }
                canonicalQuerystring += key + '=' + value;
            });
        });
        const canonicalRequest = method +
            '\n' +
            path +
            '\n' +
            canonicalQuerystring +
            '\n' +
            canonicalHeaders +
            '\n' +
            signedHeaders +
            '\n' +
            this.awsClient.util.crypto.sha256(payload, 'hex');
        const hashedCanonicalRequest = this.awsClient.util.crypto.sha256(canonicalRequest, 'hex');
        const stringToSign = 'AWS4-HMAC-SHA256\n' +
            now +
            '\n' +
            today +
            '/' +
            region +
            '/' +
            serviceName +
            '/aws4_request\n' +
            hashedCanonicalRequest;
        const signingKey = this.getSignatureKey(credentials.secretAccessKey, today, region, serviceName);
        const signature = this.awsClient.util.crypto.hmac(signingKey, stringToSign, 'hex');
        const finalParams = canonicalQuerystring + '&X-Amz-Signature=' + signature;
        return scheme + '://' + hostname + path + '?' + finalParams;
    }
}
exports.default = DefaultSigV4;
//# sourceMappingURL=DefaultSigV4.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/simulcastlayers/SimulcastLayers.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/simulcastlayers/SimulcastLayers.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SimulcastLayers = void 0;
/**
 * [[SimulcastLayers]] represents simulcast layers for selected simulcast video streams.
 */
var SimulcastLayers;
(function (SimulcastLayers) {
    /**
     * Low resolution video stream.
     */
    SimulcastLayers[SimulcastLayers["Low"] = 0] = "Low";
    /**
     * Low and medium resolution video streams.
     */
    SimulcastLayers[SimulcastLayers["LowAndMedium"] = 1] = "LowAndMedium";
    /**
     * Low and high resolution video streams.
     */
    SimulcastLayers[SimulcastLayers["LowAndHigh"] = 2] = "LowAndHigh";
    /**
     * Medium resolution video stream.
     */
    SimulcastLayers[SimulcastLayers["Medium"] = 3] = "Medium";
    /**
     * Medium and high resolution video streams.
     */
    SimulcastLayers[SimulcastLayers["MediumAndHigh"] = 4] = "MediumAndHigh";
    /**
     * High resolution video stream.
     */
    SimulcastLayers[SimulcastLayers["High"] = 5] = "High";
})(SimulcastLayers = exports.SimulcastLayers || (exports.SimulcastLayers = {}));
exports.default = SimulcastLayers;
//# sourceMappingURL=SimulcastLayers.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/statscollector/AudioLogEvent.js":
/*!********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/statscollector/AudioLogEvent.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AudioLogEvent = void 0;
var AudioLogEvent;
(function (AudioLogEvent) {
    AudioLogEvent[AudioLogEvent["DeviceChanged"] = 0] = "DeviceChanged";
    AudioLogEvent[AudioLogEvent["MutedLocal"] = 1] = "MutedLocal";
    AudioLogEvent[AudioLogEvent["UnmutedLocal"] = 2] = "UnmutedLocal";
    AudioLogEvent[AudioLogEvent["Connected"] = 3] = "Connected";
    AudioLogEvent[AudioLogEvent["ConnectFailed"] = 4] = "ConnectFailed";
    AudioLogEvent[AudioLogEvent["RedmicStartLoss"] = 5] = "RedmicStartLoss";
    AudioLogEvent[AudioLogEvent["RedmicEndLoss"] = 6] = "RedmicEndLoss";
})(AudioLogEvent = exports.AudioLogEvent || (exports.AudioLogEvent = {}));
exports.default = AudioLogEvent;
//# sourceMappingURL=AudioLogEvent.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/statscollector/DefaultStatsCollector.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/statscollector/DefaultStatsCollector.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ClientMetricReportDirection_1 = __webpack_require__(/*! ../clientmetricreport/ClientMetricReportDirection */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportDirection.js");
const ClientMetricReportMediaType_1 = __webpack_require__(/*! ../clientmetricreport/ClientMetricReportMediaType */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportMediaType.js");
const DefaultClientMetricReport_1 = __webpack_require__(/*! ../clientmetricreport/DefaultClientMetricReport */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/DefaultClientMetricReport.js");
const StreamMetricReport_1 = __webpack_require__(/*! ../clientmetricreport/StreamMetricReport */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/StreamMetricReport.js");
const Maybe_1 = __webpack_require__(/*! ../maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
const MeetingSessionLifecycleEvent_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionLifecycleEvent */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionLifecycleEvent.js");
const MeetingSessionLifecycleEventCondition_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionLifecycleEventCondition */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionLifecycleEventCondition.js");
const IntervalScheduler_1 = __webpack_require__(/*! ../scheduler/IntervalScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/IntervalScheduler.js");
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const AudioLogEvent_1 = __webpack_require__(/*! ./AudioLogEvent */ "./node_modules/amazon-chime-sdk-js/build/statscollector/AudioLogEvent.js");
const VideoLogEvent_1 = __webpack_require__(/*! ./VideoLogEvent */ "./node_modules/amazon-chime-sdk-js/build/statscollector/VideoLogEvent.js");
class DefaultStatsCollector {
    constructor(audioVideoController, logger, browserBehavior, interval = DefaultStatsCollector.INTERVAL_MS) {
        this.audioVideoController = audioVideoController;
        this.logger = logger;
        this.browserBehavior = browserBehavior;
        this.interval = interval;
        this.intervalScheduler = null;
        // TODO: Implement metricsAddTime() and metricsLogEvent().
        this.metricsAddTime = (_name, _duration, _attributes) => { };
        this.metricsLogEvent = (_name, _attributes) => { };
    }
    // TODO: Update toAttribute() and toSuffix() methods to convert raw data to a required type.
    toAttribute(str) {
        return this.toSuffix(str).substring(1);
    }
    toSuffix(str) {
        if (str.toLowerCase() === str) {
            // e.g. lower_case -> _lower_case
            return `_${str}`;
        }
        else if (str.toUpperCase() === str) {
            // e.g. UPPER_CASE -> _upper_case
            return `_${str.toLowerCase()}`;
        }
        else {
            // e.g. CamelCaseWithCAPS -> _camel_case_with_caps
            return str
                .replace(/([A-Z][a-z]+)/g, function ($1) {
                return `_${$1}`;
            })
                .replace(/([A-Z][A-Z]+)/g, function ($1) {
                return `_${$1}`;
            })
                .toLowerCase();
        }
    }
    logLatency(eventName, timeMs, attributes) {
        const event = this.toSuffix(eventName);
        this.logEventTime('meeting' + event, timeMs, attributes);
    }
    logStateTimeout(stateName, attributes) {
        const state = this.toSuffix(stateName);
        this.logEvent('meeting_session_state_timeout', Object.assign(Object.assign({}, attributes), { state: `state${state}` }));
    }
    logAudioEvent(eventName, attributes) {
        const event = 'audio' + this.toSuffix(AudioLogEvent_1.default[eventName]);
        this.logEvent(event, attributes);
    }
    logVideoEvent(eventName, attributes) {
        const event = 'video' + this.toSuffix(VideoLogEvent_1.default[eventName]);
        this.logEvent(event, attributes);
    }
    logEventTime(eventName, timeMs, attributes = {}) {
        const finalAttributes = Object.assign(Object.assign({}, attributes), { call_id: this.audioVideoController.configuration.meetingId, client_type: DefaultStatsCollector.CLIENT_TYPE, metric_type: 'latency' });
        this.logger.debug(() => {
            return `[DefaultStatsCollector] ${eventName}: ${JSON.stringify(finalAttributes)}`;
        });
        this.metricsAddTime(eventName, timeMs, finalAttributes);
    }
    logMeetingSessionStatus(status) {
        // TODO: Generate the status event name given the status code.
        const statusEventName = `${status.statusCode()}`;
        this.logEvent(statusEventName);
        const statusAttribute = {
            status: statusEventName,
            status_code: `${status.statusCode()}`,
        };
        this.logEvent('meeting_session_status', statusAttribute);
        if (status.isTerminal()) {
            this.logEvent('meeting_session_stopped', statusAttribute);
        }
        if (status.isAudioConnectionFailure()) {
            this.logEvent('meeting_session_audio_failed', statusAttribute);
        }
        if (status.isFailure()) {
            this.logEvent('meeting_session_failed', statusAttribute);
        }
    }
    logLifecycleEvent(lifecycleEvent, condition) {
        const attributes = {
            lifecycle_event: `lifecycle${this.toSuffix(MeetingSessionLifecycleEvent_1.default[lifecycleEvent])}`,
            lifecycle_event_code: `${lifecycleEvent}`,
            lifecycle_event_condition: `condition${this.toSuffix(MeetingSessionLifecycleEventCondition_1.default[condition])}`,
            lifecycle_event_condition_code: `${condition}`,
        };
        this.logEvent('meeting_session_lifecycle', attributes);
    }
    logEvent(eventName, attributes = {}) {
        const finalAttributes = Object.assign(Object.assign({}, attributes), { call_id: this.audioVideoController.configuration.meetingId, client_type: DefaultStatsCollector.CLIENT_TYPE });
        this.logger.debug(() => {
            return `[DefaultStatsCollector] ${eventName}: ${JSON.stringify(finalAttributes)}`;
        });
        this.metricsLogEvent(eventName, finalAttributes);
    }
    /**
     * WEBRTC METRICS COLLECTION.
     */
    start(signalingClient, videoStreamIndex, clientMetricReport) {
        if (this.intervalScheduler) {
            return false;
        }
        this.logger.info('Starting DefaultStatsCollector');
        this.signalingClient = signalingClient;
        this.videoStreamIndex = videoStreamIndex;
        if (clientMetricReport) {
            this.clientMetricReport = clientMetricReport;
        }
        else {
            this.clientMetricReport = new DefaultClientMetricReport_1.default(this.logger);
        }
        this.intervalScheduler = new IntervalScheduler_1.default(this.interval);
        this.intervalScheduler.start(() => {
            this.getStatsWrapper();
        });
        return true;
    }
    stop() {
        this.logger.info('Stopping DefaultStatsCollector');
        if (this.intervalScheduler) {
            this.intervalScheduler.stop();
        }
        this.intervalScheduler = null;
    }
    /**
     * Convert raw metrics to client metric report.
     */
    updateMetricValues(rawMetricReport, isStream) {
        const metricReport = isStream
            ? this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)]
            : this.clientMetricReport.globalMetricReport;
        let metricMap;
        if (isStream) {
            metricMap = this.clientMetricReport.getMetricMap(metricReport.mediaType, metricReport.direction);
        }
        else {
            metricMap = this.clientMetricReport.getMetricMap();
        }
        for (const rawMetric in rawMetricReport) {
            if (rawMetric in metricMap) {
                metricReport.previousMetrics[rawMetric] = metricReport.currentMetrics[rawMetric];
                metricReport.currentMetrics[rawMetric] = rawMetricReport[rawMetric];
            }
        }
    }
    processRawMetricReports(rawMetricReports) {
        this.clientMetricReport.currentSsrcs = {};
        const timeStamp = Date.now();
        for (const rawMetricReport of rawMetricReports) {
            const isStream = this.isStreamRawMetricReport(rawMetricReport.type);
            if (isStream) {
                if (!this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)]) {
                    const streamMetricReport = new StreamMetricReport_1.default();
                    streamMetricReport.mediaType = this.getMediaType(rawMetricReport);
                    streamMetricReport.direction = this.getDirectionType(rawMetricReport);
                    if (!this.videoStreamIndex.allStreams().empty()) {
                        streamMetricReport.streamId = this.videoStreamIndex.streamIdForSSRC(Number(rawMetricReport.ssrc));
                    }
                    this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)] = streamMetricReport;
                }
                this.clientMetricReport.currentSsrcs[Number(rawMetricReport.ssrc)] = 1;
            }
            this.updateMetricValues(rawMetricReport, isStream);
        }
        this.clientMetricReport.removeDestroyedSsrcs();
        this.clientMetricReport.previousTimestampMs = this.clientMetricReport.currentTimestampMs;
        this.clientMetricReport.currentTimestampMs = timeStamp;
        this.clientMetricReport.print();
    }
    /**
     * Protobuf packaging.
     */
    addMetricFrame(metricName, clientMetricFrame, metricSpec, ssrc) {
        const type = metricSpec.type;
        const transform = metricSpec.transform;
        const sourceMetric = metricSpec.source;
        const streamMetricFramesLength = clientMetricFrame.streamMetricFrames.length;
        const latestStreamMetricFrame = clientMetricFrame.streamMetricFrames[streamMetricFramesLength - 1];
        if (type) {
            const metricFrame = SignalingProtocol_js_1.SdkMetric.create();
            metricFrame.type = type;
            metricFrame.value = sourceMetric
                ? transform(sourceMetric, ssrc)
                : transform(metricName, ssrc);
            ssrc
                ? latestStreamMetricFrame.metrics.push(metricFrame)
                : clientMetricFrame.globalMetrics.push(metricFrame);
        }
    }
    addGlobalMetricsToProtobuf(clientMetricFrame) {
        const metricMap = this.clientMetricReport.getMetricMap();
        for (const metricName in this.clientMetricReport.globalMetricReport.currentMetrics) {
            this.addMetricFrame(metricName, clientMetricFrame, metricMap[metricName]);
        }
    }
    addStreamMetricsToProtobuf(clientMetricFrame) {
        for (const ssrc in this.clientMetricReport.streamMetricReports) {
            const streamMetricReport = this.clientMetricReport.streamMetricReports[ssrc];
            const streamMetricFrame = SignalingProtocol_js_1.SdkStreamMetricFrame.create();
            streamMetricFrame.streamId = streamMetricReport.streamId;
            streamMetricFrame.metrics = [];
            clientMetricFrame.streamMetricFrames.push(streamMetricFrame);
            const metricMap = this.clientMetricReport.getMetricMap(streamMetricReport.mediaType, streamMetricReport.direction);
            for (const metricName in streamMetricReport.currentMetrics) {
                this.addMetricFrame(metricName, clientMetricFrame, metricMap[metricName], Number(ssrc));
            }
        }
    }
    makeClientMetricProtobuf() {
        const clientMetricFrame = SignalingProtocol_js_1.SdkClientMetricFrame.create();
        clientMetricFrame.globalMetrics = [];
        clientMetricFrame.streamMetricFrames = [];
        this.addGlobalMetricsToProtobuf(clientMetricFrame);
        this.addStreamMetricsToProtobuf(clientMetricFrame);
        return clientMetricFrame;
    }
    sendClientMetricProtobuf(clientMetricFrame) {
        this.signalingClient.sendClientMetrics(clientMetricFrame);
    }
    /**
     * Helper functions.
     */
    isStreamRawMetricReport(type) {
        return type === 'ssrc' || type === 'inbound-rtp' || type === 'outbound-rtp';
    }
    getMediaType(rawMetricReport) {
        return rawMetricReport.mediaType === 'audio' ? ClientMetricReportMediaType_1.default.AUDIO : ClientMetricReportMediaType_1.default.VIDEO;
    }
    getDirectionType(rawMetricReport) {
        return rawMetricReport.id.toLowerCase().indexOf('send') !== -1 ||
            rawMetricReport.id.toLowerCase().indexOf('outbound') !== -1
            ? ClientMetricReportDirection_1.default.UPSTREAM
            : ClientMetricReportDirection_1.default.DOWNSTREAM;
    }
    /**
     * Metric report filter.
     */
    isValidChromeRawMetric(rawMetricReport) {
        return (this.browserBehavior.hasChromiumWebRTC() &&
            (rawMetricReport.type === 'ssrc' ||
                rawMetricReport.type === 'VideoBwe' ||
                (rawMetricReport.type === 'googCandidatePair' &&
                    rawMetricReport.googWritable === 'true' &&
                    rawMetricReport.googReadable === 'true')));
    }
    isValidStandardRawMetric(rawMetricReport) {
        const valid = rawMetricReport.type === 'inbound-rtp' ||
            rawMetricReport.type === 'outbound-rtp' ||
            (rawMetricReport.type === 'candidate-pair' && rawMetricReport.state === 'succeeded');
        if (this.browserBehavior.hasFirefoxWebRTC()) {
            if (this.compareMajorVersion(DefaultStatsCollector.FIREFOX_UPDATED_GET_STATS_VERSION) === -1) {
                return valid;
            }
            else {
                return valid && rawMetricReport.isRemote === false;
            }
        }
        return valid;
    }
    isValidSsrc(rawMetricReport) {
        let validSsrc = true;
        if (this.isStreamRawMetricReport(rawMetricReport.type) &&
            this.getDirectionType(rawMetricReport) === ClientMetricReportDirection_1.default.DOWNSTREAM &&
            this.getMediaType(rawMetricReport) === ClientMetricReportMediaType_1.default.VIDEO) {
            validSsrc = this.videoStreamIndex.streamIdForSSRC(Number(rawMetricReport.ssrc)) > 0;
        }
        return validSsrc;
    }
    isValidRawMetricReport(rawMetricReport) {
        return ((this.isValidChromeRawMetric(rawMetricReport) ||
            this.isValidStandardRawMetric(rawMetricReport)) &&
            this.isValidSsrc(rawMetricReport));
    }
    filterRawMetricReports(rawMetricReports) {
        const filteredRawMetricReports = [];
        for (const rawMetricReport of rawMetricReports) {
            if (this.isValidRawMetricReport(rawMetricReport)) {
                filteredRawMetricReports.push(rawMetricReport);
            }
        }
        return filteredRawMetricReports;
    }
    handleRawMetricReports(rawMetricReports) {
        const filteredRawMetricReports = this.filterRawMetricReports(rawMetricReports);
        this.logger.debug(() => {
            return `Filtered raw metrics : ${JSON.stringify(filteredRawMetricReports)}`;
        });
        this.processRawMetricReports(filteredRawMetricReports);
        const clientMetricFrame = this.makeClientMetricProtobuf();
        this.sendClientMetricProtobuf(clientMetricFrame);
        this.audioVideoController.forEachObserver(observer => {
            Maybe_1.default.of(observer.metricsDidReceive).map(f => f.bind(observer)(this.clientMetricReport.clone()));
        });
    }
    /**
     * Get raw webrtc metrics.
     */
    getStatsWrapper() {
        if (!this.audioVideoController.rtcPeerConnection) {
            return;
        }
        const rawMetricReports = [];
        if (!this.browserBehavior.requiresPromiseBasedWebRTCGetStats()) {
            // @ts-ignore
            this.audioVideoController.rtcPeerConnection.getStats(
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (res) => {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                res.result().forEach((report) => {
                    const item = {};
                    report.names().forEach((name) => {
                        item[name] = report.stat(name);
                    });
                    item.id = report.id;
                    item.type = report.type;
                    item.timestamp = report.timestamp;
                    rawMetricReports.push(item);
                });
                this.handleRawMetricReports(rawMetricReports);
            }, 
            // @ts-ignore
            (error) => {
                this.logger.error(error.message);
            });
        }
        else {
            // @ts-ignore
            this.audioVideoController.rtcPeerConnection
                .getStats()
                .then((report) => {
                report.forEach((item) => {
                    rawMetricReports.push(item);
                });
                this.handleRawMetricReports(rawMetricReports);
            })
                .catch((error) => {
                this.logger.error(error.message);
            });
        }
    }
    compareMajorVersion(version) {
        const currentMajorVersion = parseInt(this.browserBehavior.version().split('.')[0]);
        const expectedMajorVersion = parseInt(version.split('.')[0]);
        if (expectedMajorVersion === currentMajorVersion) {
            return 0;
        }
        if (expectedMajorVersion > currentMajorVersion) {
            return 1;
        }
        return -1;
    }
}
exports.default = DefaultStatsCollector;
DefaultStatsCollector.INTERVAL_MS = 1000;
DefaultStatsCollector.FIREFOX_UPDATED_GET_STATS_VERSION = '66.0.0';
DefaultStatsCollector.CLIENT_TYPE = 'amazon-chime-sdk-js';
//# sourceMappingURL=DefaultStatsCollector.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/statscollector/VideoLogEvent.js":
/*!********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/statscollector/VideoLogEvent.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VideoLogEvent = void 0;
var VideoLogEvent;
(function (VideoLogEvent) {
    VideoLogEvent[VideoLogEvent["InputAttached"] = 0] = "InputAttached";
    VideoLogEvent[VideoLogEvent["SendingFailed"] = 1] = "SendingFailed";
    VideoLogEvent[VideoLogEvent["SendingSuccess"] = 2] = "SendingSuccess";
})(VideoLogEvent = exports.VideoLogEvent || (exports.VideoLogEvent = {}));
exports.default = VideoLogEvent;
//# sourceMappingURL=VideoLogEvent.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/AttachMediaInputTask.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/AttachMediaInputTask.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const VideoLogEvent_1 = __webpack_require__(/*! ../statscollector/VideoLogEvent */ "./node_modules/amazon-chime-sdk-js/build/statscollector/VideoLogEvent.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[AttachMediaInputTask]] adds audio and video input to peer connection.
 */
class AttachMediaInputTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'AttachMediaInputTask';
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const transceiverController = this.context.transceiverController;
            transceiverController.setPeer(this.context.peer);
            transceiverController.setupLocalTransceivers();
            const audioInput = this.context.activeAudioInput;
            if (audioInput) {
                const audioTracks = audioInput.getAudioTracks();
                if (this.context.browserBehavior.requiresUnifiedPlan()) {
                    this.context.logger.info('attaching audio track to peer connection (unified-plan)');
                    yield transceiverController.setAudioInput(audioTracks.length ? audioTracks[0] : null);
                }
                else {
                    this.context.logger.info('attaching audio track to peer connection (plan-b)');
                    // @ts-ignore
                    const senders = this.context.peer.getSenders();
                    audioInput.getAudioTracks().forEach((track) => {
                        if (!senders.find((sender) => {
                            return sender.track.id === track.id;
                        })) {
                            // unclear why this does not deal with the case of removing
                            // an existing track as we do in attachVideoInput
                            // @ts-ignore
                            this.context.localAudioSender = this.context.peer.addTrack(track, audioInput);
                        }
                    });
                }
            }
            else {
                yield transceiverController.setAudioInput(null);
                this.context.logger.warn('no audio track');
            }
            const videoInput = this.context.activeVideoInput;
            if (videoInput) {
                const videoTracks = videoInput.getVideoTracks();
                const videoTrack = videoTracks.length ? videoTracks[0] : null;
                if (this.context.browserBehavior.requiresUnifiedPlan()) {
                    this.context.logger.info('attaching video track to peer connection (unified-plan)');
                    yield transceiverController.setVideoInput(videoTrack);
                    if (this.context.enableSimulcast && this.context.videoUplinkBandwidthPolicy) {
                        const encodingParam = this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();
                        transceiverController.setEncodingParameters(encodingParam);
                    }
                }
                else {
                    this.context.logger.info('attaching video track to peer connection (plan-b)');
                    // @ts-ignore
                    const senders = this.context.peer.getSenders();
                    if (!senders.find((sender) => {
                        return sender.track && sender.track.id === videoTracks[0].id;
                    })) {
                        if (this.context.localVideoSender) {
                            // @ts-ignore
                            this.context.peer.removeTrack(this.context.localVideoSender);
                            this.context.localVideoSender = null;
                        }
                        this.context.localVideoSender = this.context.peer.addTrack(videoTracks[0], videoInput);
                    }
                }
                if (videoTrack) {
                    this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.InputAttached, this.context.videoDeviceInformation);
                    this.context.videoInputAttachedTimestampMs = Date.now();
                }
            }
            else {
                yield transceiverController.setVideoInput(null);
                this.context.logger.info('no video track');
                if (this.context.localVideoSender) {
                    this.context.logger.info('removing track from peer');
                    // @ts-ignore
                    this.context.peer.removeTrack(this.context.localVideoSender);
                    this.context.localVideoSender = null;
                }
            }
            this.context.videoSubscriptions = transceiverController.updateVideoTransceivers(this.context.videoStreamIndex, this.context.videosToReceive);
        });
    }
}
exports.default = AttachMediaInputTask;
//# sourceMappingURL=AttachMediaInputTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js":
/*!*****************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const TaskStatus_1 = __webpack_require__(/*! ./TaskStatus */ "./node_modules/amazon-chime-sdk-js/build/task/TaskStatus.js");
/*
 * [[BaseTask]] provides common utilities for task implementations.
 */
class BaseTask {
    constructor(logger) {
        this.logger = logger;
        this.taskName = 'BaseTask';
        this.parentTask = null;
        this.status = TaskStatus_1.default.IDLE;
        this.run = this.baseRun.bind(this, this.run);
        this.cancel = this.baseCancel.bind(this, this.cancel);
    }
    cancel() { }
    name() {
        return this.parentTask ? `${this.parentTask.name()}/${this.taskName}` : this.taskName;
    }
    setParent(parentTask) {
        this.parentTask = parentTask;
    }
    getStatus() {
        return this.status;
    }
    logAndThrow(message) {
        this.logger.info(message);
        throw new Error(message);
    }
    baseRun(originalRun) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const startTime = Date.now();
                this.logger.info(`running task ${this.name()}`);
                switch (this.status) {
                    case TaskStatus_1.default.RUNNING:
                        this.logAndThrow(`${this.name()} is already running`);
                    case TaskStatus_1.default.CANCELED:
                        this.logAndThrow(`${this.name()} was canceled before running`);
                    case TaskStatus_1.default.FINISHED:
                        this.logAndThrow(`${this.name()} was already finished`);
                }
                this.status = TaskStatus_1.default.RUNNING;
                yield originalRun.call(this);
                this.logger.info(`${this.name()} took ${Math.round(Date.now() - startTime)} ms`);
            }
            catch (err) {
                throw err;
            }
            finally {
                if (this.status !== TaskStatus_1.default.CANCELED) {
                    this.status = TaskStatus_1.default.FINISHED;
                }
            }
        });
    }
    baseCancel(originalCancel) {
        if (this.status === TaskStatus_1.default.CANCELED || this.status === TaskStatus_1.default.FINISHED) {
            return;
        }
        this.logger.info(`canceling task ${this.name()}`);
        this.status = TaskStatus_1.default.CANCELED;
        originalCancel.call(this);
    }
}
exports.default = BaseTask;
//# sourceMappingURL=BaseTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/CleanRestartedSessionTask.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/CleanRestartedSessionTask.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
class CleanRestartedSessionTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'CleanRestartedSessionTask';
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.context.peer) {
                this.context.peer.close();
            }
            this.context.transceiverController.reset();
            this.context.localVideoSender = null;
            this.context.peer = null;
            this.context.videoDownlinkBandwidthPolicy.reset();
            this.context.iceCandidateHandler = null;
            this.context.iceCandidates = [];
            this.context.previousSdpOffer = null;
        });
    }
}
exports.default = CleanRestartedSessionTask;
//# sourceMappingURL=CleanRestartedSessionTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/CleanStoppedSessionTask.js":
/*!********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/CleanStoppedSessionTask.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingClientEventType_1 = __webpack_require__(/*! ../signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
class CleanStoppedSessionTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'CleanStoppedSessionTask';
        this.taskCanceler = null;
    }
    cancel() {
        if (this.taskCanceler) {
            this.taskCanceler.cancel();
            this.taskCanceler = null;
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.context.signalingClient.ready()) {
                    this.context.signalingClient.closeConnection();
                    yield this.receiveWebSocketClosedEvent();
                }
            }
            catch (error) {
                throw error;
            }
            finally {
                for (const observer of this.context.removableObservers) {
                    observer.removeObserver();
                }
                this.context.statsCollector.stop();
                this.context.statsCollector = null;
                this.context.connectionMonitor.stop();
                this.context.connectionMonitor = null;
                if (this.context.peer) {
                    this.context.peer.close();
                }
                this.context.peer = null;
                this.context.localVideoSender = null;
                this.context.sdpAnswer = null;
                this.context.sdpOfferInit = null;
                this.context.indexFrame = null;
                this.context.videoDownlinkBandwidthPolicy.reset();
                this.context.iceCandidateHandler = null;
                this.context.iceCandidates = [];
                this.context.turnCredentials = null;
                this.context.videoSubscriptions = null;
                this.context.transceiverController.reset();
                this.context.mediaStreamBroker.releaseMediaStream(this.context.activeAudioInput);
                this.context.activeAudioInput = null;
                this.context.mediaStreamBroker.releaseMediaStream(this.context.activeVideoInput);
                this.context.activeVideoInput = null;
                this.context.realtimeController.realtimeSetLocalAudioInput(null);
                const tile = this.context.videoTileController.getLocalVideoTile();
                if (tile) {
                    tile.bindVideoStream('', true, null, null, null, null);
                }
                this.context.videoTileController.removeAllVideoTiles();
            }
        });
    }
    receiveWebSocketClosedEvent() {
        return new Promise((resolve, reject) => {
            class Interceptor {
                constructor(signalingClient) {
                    this.signalingClient = signalingClient;
                }
                cancel() {
                    this.signalingClient.removeObserver(this);
                    reject(new Error(`CleanStoppedSessionTask got canceled while waiting for the WebSocket closed event`));
                }
                handleSignalingClientEvent(event) {
                    if (event.type === SignalingClientEventType_1.default.WebSocketClosed) {
                        this.signalingClient.removeObserver(this);
                        resolve();
                    }
                }
            }
            const interceptor = new Interceptor(this.context.signalingClient);
            this.taskCanceler = interceptor;
            this.context.signalingClient.registerObserver(interceptor);
        });
    }
}
exports.default = CleanStoppedSessionTask;
//# sourceMappingURL=CleanStoppedSessionTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/CreatePeerConnectionTask.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/CreatePeerConnectionTask.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[CreatePeerConnectionTask]] sets up the peer connection object.
 */
class CreatePeerConnectionTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'CreatePeerConnectionTask';
        this.removeTrackAddedEventListener = null;
        this.removeTrackRemovedEventListeners = {};
        this.trackEvents = [
            'ended',
            'mute',
            'unmute',
            'isolationchange',
            'overconstrained',
        ];
        this.removeVideoTrackEventListeners = {};
        this.trackAddedHandler = (event) => {
            const track = event.track;
            this.context.logger.info(`received track event: kind=${track.kind} id=${track.id} label=${track.label}`);
            if (event.transceiver && event.transceiver.currentDirection === 'inactive') {
                return;
            }
            if (event.streams.length === 0) {
                this.context.logger.warn(`Track event but no stream`);
                return;
            }
            const stream = event.streams[0];
            if (track.kind === 'audio') {
                this.context.audioMixController.bindAudioStream(stream);
            }
            else if (track.kind === 'video' && !this.trackIsVideoInput(track)) {
                this.addRemoteVideoTrack(track, stream);
            }
        };
    }
    removeObserver() {
        this.removeTrackAddedEventListener && this.removeTrackAddedEventListener();
        for (const trackId in this.removeTrackRemovedEventListeners) {
            this.removeTrackRemovedEventListeners[trackId]();
        }
    }
    addPeerConnectionEventLogger() {
        const peer = this.context.peer;
        peer.addEventListener('connectionstatechange', () => {
            this.context.logger.info(`peer connection state changed: ${peer.connectionState}`);
        });
        peer.addEventListener('negotiationneeded', () => {
            this.context.logger.info('peer connection negotiation is needed');
        });
        peer.addEventListener('icegatheringstatechange', () => {
            this.context.logger.info(`peer connection ice gathering state changed: ${peer.iceGatheringState}`);
        });
        peer.addEventListener('icecandidate', (event) => {
            this.context.logger.info(`peer connection ice candidate: ${event.candidate ? event.candidate.candidate : '(null)'}`);
        });
        peer.addEventListener('iceconnectionstatechange', () => {
            this.context.logger.info(`peer connection ice connection state changed: ${peer.iceConnectionState}`);
        });
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            this.context.removableObservers.push(this);
            const hasTurnCredentials = this.context.turnCredentials && this.context.turnCredentials.uris.length > 0;
            const configuration = hasTurnCredentials
                ? {
                    iceServers: [
                        {
                            urls: this.context.turnCredentials.uris,
                            username: this.context.turnCredentials.username,
                            credential: this.context.turnCredentials.password,
                            credentialType: 'password',
                        },
                    ],
                    iceTransportPolicy: 'relay',
                }
                : {};
            configuration.bundlePolicy = this.context.browserBehavior.requiresBundlePolicy();
            // @ts-ignore
            configuration.sdpSemantics = this.context.browserBehavior.requiresUnifiedPlan()
                ? 'unified-plan'
                : 'plan-b';
            // @ts-ignore
            this.logger.info(`SDP semantics are ${configuration.sdpSemantics}`);
            const connectionConstraints = {
                optional: [
                    { googHighStartBitrate: 0 },
                    { googCpuOveruseDetection: false },
                    { googCpuOveruseEncodeUsage: false },
                    { googCpuUnderuseThreshold: 55 },
                    { googCpuOveruseThreshold: 150 },
                    { googCombinedAudioVideoBwe: true },
                ],
            };
            if (this.context.peer) {
                this.context.logger.info('reusing peer connection');
            }
            else {
                this.context.logger.info('creating new peer connection');
                // @ts-ignore
                this.context.peer = new RTCPeerConnection(configuration, connectionConstraints);
                this.addPeerConnectionEventLogger();
            }
            this.removeTrackAddedEventListener = () => {
                if (this.context.peer) {
                    this.context.peer.removeEventListener('track', this.trackAddedHandler);
                }
                this.removeTrackAddedEventListener = null;
            };
            this.context.peer.addEventListener('track', this.trackAddedHandler);
        });
    }
    trackIsVideoInput(track) {
        if (this.context.transceiverController.useTransceivers()) {
            this.logger.debug(() => {
                return `getting video track type (unified-plan)`;
            });
            return this.context.transceiverController.trackIsVideoInput(track);
        }
        this.logger.debug(() => {
            return `getting video track type (plan-b)`;
        });
        if (this.context.activeVideoInput) {
            const tracks = this.context.activeVideoInput.getVideoTracks();
            if (tracks && tracks.length > 0 && tracks[0].id === track.id) {
                return true;
            }
        }
        return false;
    }
    addRemoteVideoTrack(track, stream) {
        let trackId = stream.id;
        if (!this.context.browserBehavior.requiresUnifiedPlan()) {
            stream = new MediaStream([track]);
            trackId = track.id;
        }
        const attendeeId = this.context.videoStreamIndex.attendeeIdForTrack(trackId);
        if (this.context.videoTileController.haveVideoTileForAttendeeId(attendeeId)) {
            this.context.logger.info(`Not adding remote track. Already have tile for attendeeId:  ${attendeeId}`);
            return;
        }
        const tile = this.context.videoTileController.addVideoTile();
        let streamId = this.context.videoStreamIndex.streamIdForTrack(trackId);
        if (typeof streamId === 'undefined') {
            this.logger.warn(`stream not found for tile=${tile.id()} track=${trackId}`);
            streamId = null;
        }
        for (let i = 0; i < this.trackEvents.length; i++) {
            const trackEvent = this.trackEvents[i];
            const videoTracks = stream.getVideoTracks();
            if (videoTracks && videoTracks.length) {
                const videoTrack = videoTracks[0];
                const callback = () => {
                    this.context.logger.info(`received the ${trackEvent} event for tile=${tile.id()} id=${track.id} streamId=${streamId}`);
                    if (trackEvent === 'ended' && this.context.browserBehavior.requiresUnifiedPlan()) {
                        this.removeRemoteVideoTrack(track, tile.state());
                    }
                };
                videoTrack.addEventListener(trackEvent, callback);
                if (!this.removeVideoTrackEventListeners[track.id]) {
                    this.removeVideoTrackEventListeners[track.id] = [];
                }
                this.removeVideoTrackEventListeners[track.id].push(() => {
                    videoTrack.removeEventListener(trackEvent, callback);
                });
            }
        }
        let width;
        let height;
        if (track.getSettings) {
            const cap = track.getSettings();
            width = cap.width;
            height = cap.height;
        }
        else {
            const cap = track.getCapabilities();
            width = cap.width;
            height = cap.height;
        }
        const externalUserId = this.context.videoStreamIndex.externalUserIdForTrack(trackId);
        tile.bindVideoStream(attendeeId, false, stream, width, height, streamId, externalUserId);
        this.logger.info(`video track added, created tile=${tile.id()} track=${trackId} streamId=${streamId}`);
        let endEvent = 'removetrack';
        let target = stream;
        if (!this.context.browserBehavior.requiresUnifiedPlan()) {
            this.logger.debug(() => {
                return 'updating end event and target track (plan-b)';
            });
            endEvent = 'ended';
            // @ts-ignore
            target = track;
        }
        const trackRemovedHandler = () => this.removeRemoteVideoTrack(track, tile.state());
        this.removeTrackRemovedEventListeners[track.id] = () => {
            target.removeEventListener(endEvent, trackRemovedHandler);
            delete this.removeTrackRemovedEventListeners[track.id];
        };
        target.addEventListener(endEvent, trackRemovedHandler);
    }
    removeRemoteVideoTrack(track, tileState) {
        if (this.removeTrackRemovedEventListeners.hasOwnProperty(track.id)) {
            this.removeTrackRemovedEventListeners[track.id]();
            for (const removeVideoTrackEventListener of this.removeVideoTrackEventListeners[track.id]) {
                removeVideoTrackEventListener();
            }
            delete this.removeVideoTrackEventListeners[track.id];
        }
        this.logger.info(`video track ended, removing tile=${tileState.tileId} id=${track.id} stream=${tileState.streamId}`);
        if (tileState.streamId) {
            this.context.videosPaused.remove(tileState.streamId);
        }
        else {
            this.logger.warn(`no stream found for tile=${tileState.tileId}`);
        }
        this.context.videoTileController.removeVideoTile(tileState.tileId);
    }
}
exports.default = CreatePeerConnectionTask;
CreatePeerConnectionTask.REMOVE_HANDLER_INTERVAL_MS = 10000;
//# sourceMappingURL=CreatePeerConnectionTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/CreateSDPTask.js":
/*!**********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/CreateSDPTask.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const MeetingSessionStatusCode_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionStatusCode */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js");
const DefaultSDP_1 = __webpack_require__(/*! ../sdp/DefaultSDP */ "./node_modules/amazon-chime-sdk-js/build/sdp/DefaultSDP.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[CreateSDPTask]] asynchronously calls [[createOffer]] on peer connection.
 */
class CreateSDPTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'CreateSDPTask';
    }
    cancel() {
        const error = new Error(`canceling ${this.name()}`);
        this.cancelPromise && this.cancelPromise(error);
    }
    sessionUsesAudio() {
        return true;
    }
    sessionUsesVideo() {
        const enabled = true;
        let sending;
        if (this.context.transceiverController.useTransceivers()) {
            sending = this.context.transceiverController.hasVideoInput();
        }
        else {
            sending = this.context.videoTileController.hasStartedLocalVideoTile();
        }
        const receiving = !!this.context.videosToReceive && !this.context.videosToReceive.empty();
        const usesVideo = enabled && (sending || receiving);
        this.context.logger.info(`uses video: ${usesVideo} (enabled: ${enabled}, sending: ${sending}, receiving: ${receiving})`);
        return usesVideo;
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const offerOptions = {
                offerToReceiveAudio: this.sessionUsesAudio(),
                offerToReceiveVideo: this.sessionUsesVideo(),
            };
            this.logger.info(`peer connection offerOptions: ${JSON.stringify(offerOptions)}`);
            yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.cancelPromise = (error) => {
                    reject(error);
                };
                try {
                    this.context.sdpOfferInit = yield this.context.peer.createOffer(offerOptions);
                    this.context.logger.info('peer connection created offer');
                    if (this.context.previousSdpOffer) {
                        if (new DefaultSDP_1.default(this.context.sdpOfferInit.sdp).videoSendSectionHasDifferentSSRC(this.context.previousSdpOffer)) {
                            const error = new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.IncompatibleSDP}`);
                            this.context.previousSdpOffer = null;
                            reject(error);
                        }
                    }
                    resolve();
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
}
exports.default = CreateSDPTask;
//# sourceMappingURL=CreateSDPTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/FinishGatheringICECandidatesTask.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/FinishGatheringICECandidatesTask.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const MeetingSessionStatusCode_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionStatusCode */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js");
const DefaultSDP_1 = __webpack_require__(/*! ../sdp/DefaultSDP */ "./node_modules/amazon-chime-sdk-js/build/sdp/DefaultSDP.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[FinishGatheringICECandidatesTask]] add ice-candidate event handler on peer connection to
 * collect ice candidates and wait for peer connection ice gathering state to complete
 */
class FinishGatheringICECandidatesTask extends BaseTask_1.default {
    constructor(context, chromeVpnTimeoutMs = FinishGatheringICECandidatesTask.CHROME_VPN_TIMEOUT_MS) {
        super(context.logger);
        this.context = context;
        this.chromeVpnTimeoutMs = chromeVpnTimeoutMs;
        this.taskName = 'FinishGatheringICECandidatesTask';
    }
    removeEventListener() {
        if (this.context.peer) {
            this.context.peer.removeEventListener('icecandidate', this.context.iceCandidateHandler);
            if (!this.context.turnCredentials) {
                this.context.peer.removeEventListener('icegatheringstatechange', this.context.iceGatheringStateEventHandler);
            }
        }
    }
    cancel() {
        let error = new Error(`canceling ${this.name()}`);
        // TODO: Remove when the Chrome VPN reconnect bug is fixed.
        // In Chrome, SDK may fail to establish TURN session after VPN reconnect.
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=9097
        if (this.context.browserBehavior.requiresIceCandidateGatheringTimeoutWorkaround()) {
            if (this.chromeVpnTimeoutMs < this.context.meetingSessionConfiguration.connectionTimeoutMs) {
                const duration = Date.now() - this.startTimestampMs;
                if (duration > this.chromeVpnTimeoutMs) {
                    error = new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.ICEGatheringTimeoutWorkaround}`);
                }
            }
        }
        this.cancelPromise && this.cancelPromise(error);
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.context.peer) {
                this.logAndThrow(`session does not have peer connection; bypass ice gathering`);
            }
            if (this.context.browserBehavior.requiresCheckForSdpConnectionAttributes()) {
                if (new DefaultSDP_1.default(this.context.peer.localDescription.sdp).hasCandidatesForAllMLines()) {
                    this.context.logger.info(`ice gathering already complete; bypass gathering, current local description ${this.context.peer.localDescription.sdp}`);
                    return;
                }
            }
            else {
                this.context.logger.info(`iOS device does not require checking for connection attributes in SDP, current local description ${this.context.peer.localDescription.sdp}`);
            }
            /*
             * To bypass waiting for events, it is required that "icegatheringstate" to be complete and sdp to have candidate
             * For Firefox, it takes long for iceGatheringState === 'complete'
             * Ref: https://github.com/aws/amazon-chime-sdk-js/issues/609
             */
            if ((this.context.browserBehavior.hasFirefoxWebRTC() ||
                this.context.peer.iceGatheringState === 'complete') &&
                new DefaultSDP_1.default(this.context.peer.localDescription.sdp).hasCandidates()) {
                this.context.logger.info('ice gathering state is complete and candidates are in SDP; bypass gathering');
                return;
            }
            try {
                yield new Promise((resolve, reject) => {
                    this.cancelPromise = (error) => {
                        this.removeEventListener();
                        reject(error);
                    };
                    if (!this.context.turnCredentials) {
                        // if one day, we found a case where a FinishGatheringICECandidate did not resolve but ice gathering state is complete and SDP answer has ice candidates
                        // we may need to enable this
                        this.context.iceGatheringStateEventHandler = () => {
                            if (this.context.peer.iceGatheringState === 'complete') {
                                this.removeEventListener();
                                resolve();
                                return;
                            }
                        };
                        this.context.peer.addEventListener('icegatheringstatechange', this.context.iceGatheringStateEventHandler);
                    }
                    this.context.iceCandidateHandler = (event) => {
                        this.context.logger.info(`ice candidate: ${event.candidate ? event.candidate.candidate : '(null)'} state: ${this.context.peer.iceGatheringState}`);
                        // Ice candidate arrives, do not need to wait anymore.
                        // https://webrtcglossary.com/trickle-ice/
                        if (event.candidate) {
                            if (DefaultSDP_1.default.isRTPCandidate(event.candidate.candidate)) {
                                this.context.iceCandidates.push(event.candidate);
                            }
                            // Could there be a case the candidate is not written to SDP ?
                            if (this.context.turnCredentials && this.context.iceCandidates.length >= 1) {
                                this.context.logger.info('gathered at least one relay candidate');
                                this.removeEventListener();
                                resolve();
                                return;
                            }
                        }
                        // Ice candidate gathering is complete, additional barrier to make sure sdp contain an ice candidate.
                        // TODO: Could there be a race where iceGatheringState is flipped after this task is run ? This could only be handled if ice state is monitored persistently.
                        if (this.context.peer.iceGatheringState === 'complete') {
                            this.context.logger.info('done gathering ice candidates');
                            this.removeEventListener();
                            if (!new DefaultSDP_1.default(this.context.peer.localDescription.sdp).hasCandidates() ||
                                this.context.iceCandidates.length === 0) {
                                reject(new Error('no ice candidates were gathered'));
                            }
                            else {
                                resolve();
                            }
                        }
                    };
                    // SDK does not catch candidate itself and send to sever. Rather, WebRTC handles candidate events and writes candidate to SDP.
                    this.context.peer.addEventListener('icecandidate', this.context.iceCandidateHandler);
                    this.startTimestampMs = Date.now();
                });
            }
            catch (error) {
                throw error;
            }
            finally {
                /* istanbul ignore else */
                if (this.startTimestampMs) {
                    this.context.iceGatheringDurationMs = Math.round(Date.now() - this.startTimestampMs);
                }
            }
        });
    }
}
exports.default = FinishGatheringICECandidatesTask;
FinishGatheringICECandidatesTask.CHROME_VPN_TIMEOUT_MS = 5000;
//# sourceMappingURL=FinishGatheringICECandidatesTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/JoinAndReceiveIndexTask.js":
/*!********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/JoinAndReceiveIndexTask.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const MeetingSessionStatus_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionStatus */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatus.js");
const MeetingSessionStatusCode_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionStatusCode */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js");
const MeetingSessionTURNCredentials_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionTURNCredentials */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionTURNCredentials.js");
const SignalingClientEventType_1 = __webpack_require__(/*! ../signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
const SignalingClientJoin_1 = __webpack_require__(/*! ../signalingclient/SignalingClientJoin */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientJoin.js");
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[JoinAndReceiveIndexTask]] sends the JoinFrame and asynchronously waits for the server to send the [[SdkIndexFrame]].
 * It should run with the [[TimeoutTask]] as the subtask so it can get canceled after timeout.
 */
class JoinAndReceiveIndexTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'JoinAndReceiveIndexTask';
        this.taskCanceler = null;
        this.maxVideos = 16;
    }
    cancel() {
        if (this.taskCanceler) {
            this.taskCanceler.cancel();
            this.taskCanceler = null;
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const indexFrame = yield new Promise((resolve, reject) => {
                const context = this.context;
                context.turnCredentials = null;
                class IndexFrameInterceptor {
                    constructor(signalingClient) {
                        this.signalingClient = signalingClient;
                    }
                    cancel() {
                        this.signalingClient.removeObserver(this);
                        reject(new Error(`JoinAndReceiveIndexTask got canceled while waiting for SdkIndexFrame`));
                    }
                    handleSignalingClientEvent(event) {
                        if (event.type === SignalingClientEventType_1.default.WebSocketClosed) {
                            context.logger.warn(`signaling connection closed by server with code ${event.closeCode} and reason: ${event.closeReason}`);
                            let statusCode = MeetingSessionStatusCode_1.default.SignalingBadRequest;
                            if (event.closeCode === 4410) {
                                context.logger.warn(`the meeting cannot be joined because it is has been ended`);
                                statusCode = MeetingSessionStatusCode_1.default.MeetingEnded;
                            }
                            else if (event.closeCode >= 4500 && event.closeCode < 4600) {
                                statusCode = MeetingSessionStatusCode_1.default.SignalingInternalServerError;
                            }
                            context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(statusCode), null);
                            return;
                        }
                        if (event.type !== SignalingClientEventType_1.default.ReceivedSignalFrame) {
                            return;
                        }
                        if (event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.JOIN_ACK) {
                            // @ts-ignore: force cast to SdkJoinAckFrame
                            const joinAckFrame = event.message.joinack;
                            if (joinAckFrame && joinAckFrame.turnCredentials) {
                                context.turnCredentials = new MeetingSessionTURNCredentials_1.default();
                                context.turnCredentials.username = joinAckFrame.turnCredentials.username;
                                context.turnCredentials.password = joinAckFrame.turnCredentials.password;
                                context.turnCredentials.ttl = joinAckFrame.turnCredentials.ttl;
                                context.turnCredentials.uris = joinAckFrame.turnCredentials.uris
                                    .map((uri) => {
                                    return context.meetingSessionConfiguration.urls.urlRewriter(uri);
                                })
                                    .filter((uri) => {
                                    return !!uri;
                                });
                            }
                            else {
                                context.logger.error('missing TURN credentials in JoinAckFrame');
                            }
                            return;
                        }
                        if (event.message.type !== SignalingProtocol_js_1.SdkSignalFrame.Type.INDEX) {
                            return;
                        }
                        this.signalingClient.removeObserver(this);
                        // @ts-ignore: force cast to SdkIndexFrame
                        const indexFrame = event.message.index;
                        resolve(indexFrame);
                    }
                }
                const interceptor = new IndexFrameInterceptor(this.context.signalingClient);
                this.context.signalingClient.registerObserver(interceptor);
                this.taskCanceler = interceptor;
                this.context.signalingClient.join(new SignalingClientJoin_1.default(this.maxVideos, true));
            });
            this.context.logger.info(`received first index ${JSON.stringify(indexFrame)}`);
            this.context.indexFrame = indexFrame;
        });
    }
}
exports.default = JoinAndReceiveIndexTask;
//# sourceMappingURL=JoinAndReceiveIndexTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/LeaveAndReceiveLeaveAckTask.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/LeaveAndReceiveLeaveAckTask.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingClientEventType_1 = __webpack_require__(/*! ../signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/**
 * [[LeaveAndReceiveLeaveAckTask]] sends a Leave frame and waits for a LeaveAck.
 */
class LeaveAndReceiveLeaveAckTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'LeaveAndReceiveLeaveAckTask';
        this.taskCanceler = null;
    }
    cancel() {
        if (this.taskCanceler) {
            this.taskCanceler.cancel();
            this.taskCanceler = null;
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.context.signalingClient.ready()) {
                this.context.signalingClient.leave();
                this.context.logger.info('sent leave');
                yield this.receiveLeaveAck();
            }
        });
    }
    receiveLeaveAck() {
        return new Promise((resolve, reject) => {
            class Interceptor {
                constructor(signalingClient, logger) {
                    this.signalingClient = signalingClient;
                    this.logger = logger;
                }
                cancel() {
                    this.signalingClient.removeObserver(this);
                    reject(new Error(`LeaveAndReceiveLeaveAckTask got canceled while waiting for IndexFrame`));
                }
                handleSignalingClientEvent(event) {
                    if (event.isConnectionTerminated()) {
                        this.signalingClient.removeObserver(this);
                        this.logger.info('LeaveAndReceiveLeaveAckTask connection terminated');
                        // don't treat this as an error
                        resolve();
                        return;
                    }
                    if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame &&
                        event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.LEAVE_ACK) {
                        this.signalingClient.removeObserver(this);
                        this.logger.info('got leave ack');
                        resolve();
                    }
                }
            }
            const interceptor = new Interceptor(this.context.signalingClient, this.context.logger);
            this.taskCanceler = interceptor;
            this.context.signalingClient.registerObserver(interceptor);
        });
    }
}
exports.default = LeaveAndReceiveLeaveAckTask;
//# sourceMappingURL=LeaveAndReceiveLeaveAckTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/ListenForVolumeIndicatorsTask.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/ListenForVolumeIndicatorsTask.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingClientEventType_1 = __webpack_require__(/*! ../signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
class ListenForVolumeIndicatorsTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'ListenForVolumeIndicatorsTask';
        this.realtimeMuteAndUnmuteHandler = (muted) => {
            this.context.signalingClient.mute(muted);
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            this.context.removableObservers.push(this);
            this.context.signalingClient.registerObserver(this);
            this.context.realtimeController.realtimeSubscribeToMuteAndUnmuteLocalAudio(this.realtimeMuteAndUnmuteHandler);
        });
    }
    removeObserver() {
        this.context.realtimeController.realtimeUnsubscribeToMuteAndUnmuteLocalAudio(this.realtimeMuteAndUnmuteHandler);
        this.context.signalingClient.removeObserver(this);
    }
    handleSignalingClientEvent(event) {
        if (event.type !== SignalingClientEventType_1.default.ReceivedSignalFrame) {
            return;
        }
        if (event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_STREAM_ID_INFO) {
            // @ts-ignore
            const audioStreamIdInfo = event.message.audioStreamIdInfo;
            this.context.volumeIndicatorAdapter.sendRealtimeUpdatesForAudioStreamIdInfo(audioStreamIdInfo);
        }
        else if (event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_METADATA) {
            // @ts-ignore
            const audioMetadata = event.message.audioMetadata;
            this.context.volumeIndicatorAdapter.sendRealtimeUpdatesForAudioMetadata(audioMetadata);
        }
    }
}
exports.default = ListenForVolumeIndicatorsTask;
//# sourceMappingURL=ListenForVolumeIndicatorsTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/MonitorTask.js":
/*!********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/MonitorTask.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ClientMetricReportDirection_1 = __webpack_require__(/*! ../clientmetricreport/ClientMetricReportDirection */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportDirection.js");
const ClientMetricReportMediaType_1 = __webpack_require__(/*! ../clientmetricreport/ClientMetricReportMediaType */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportMediaType.js");
const ClientVideoStreamReceivingReport_1 = __webpack_require__(/*! ../clientmetricreport/ClientVideoStreamReceivingReport */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientVideoStreamReceivingReport.js");
const ReconnectionHealthPolicy_1 = __webpack_require__(/*! ../connectionhealthpolicy/ReconnectionHealthPolicy */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/ReconnectionHealthPolicy.js");
const UnusableAudioWarningConnectionHealthPolicy_1 = __webpack_require__(/*! ../connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy */ "./node_modules/amazon-chime-sdk-js/build/connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy.js");
const Maybe_1 = __webpack_require__(/*! ../maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
const MeetingSessionStatus_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionStatus */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatus.js");
const MeetingSessionStatusCode_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionStatusCode */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js");
const SignalingClientEventType_1 = __webpack_require__(/*! ../signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
const AudioLogEvent_1 = __webpack_require__(/*! ../statscollector/AudioLogEvent */ "./node_modules/amazon-chime-sdk-js/build/statscollector/AudioLogEvent.js");
const VideoLogEvent_1 = __webpack_require__(/*! ../statscollector/VideoLogEvent */ "./node_modules/amazon-chime-sdk-js/build/statscollector/VideoLogEvent.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[MonitorTask]] monitors connections using SignalingAndMetricsConnectionMonitor.
 */
class MonitorTask extends BaseTask_1.default {
    constructor(context, connectionHealthPolicyConfiguration, initialConnectionHealthData) {
        super(context.logger);
        this.context = context;
        this.initialConnectionHealthData = initialConnectionHealthData;
        this.taskName = 'MonitorTask';
        this.prevSignalStrength = 1;
        this.currentVideoDownlinkBandwidthEstimationKbps = 10000;
        this.currentAvailableStreamAvgBitrates = null;
        this.hasSignalingError = false;
        this.presenceHandlerCalled = false;
        this.checkAndSendWeakSignalEvent = (signalStrength) => {
            const isCurrentSignalBad = signalStrength < 1;
            const isPrevSignalBad = this.prevSignalStrength < 1;
            const signalStrengthEventType = isCurrentSignalBad
                ? !isPrevSignalBad
                    ? AudioLogEvent_1.default.RedmicStartLoss
                    : null
                : isPrevSignalBad
                    ? AudioLogEvent_1.default.RedmicEndLoss
                    : null;
            if (signalStrengthEventType) {
                this.context.statsCollector.logAudioEvent(signalStrengthEventType);
            }
            this.prevSignalStrength = signalStrength;
        };
        this.realtimeFatalErrorCallback = (error) => {
            this.logger.error(`realtime error: ${error}: ${error.stack}`);
            this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.RealtimeApiFailed), error);
        };
        this.realtimeAttendeeIdPresenceHandler = (presentAttendeeId, present) => {
            const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;
            if (attendeeId === presentAttendeeId && present && !this.presenceHandlerCalled) {
                this.presenceHandlerCalled = true;
                this.context.attendeePresenceDurationMs = Date.now() - this.context.startAudioVideoTimestamp;
                /* istanbul ignore else */
                if (this.context.eventController) {
                    this.context.eventController.publishEvent('attendeePresenceReceived', {
                        attendeePresenceDurationMs: this.context.attendeePresenceDurationMs,
                    });
                }
            }
        };
        this.reconnectionHealthPolicy = new ReconnectionHealthPolicy_1.default(context.logger, Object.assign({}, connectionHealthPolicyConfiguration), this.initialConnectionHealthData.clone());
        this.unusableAudioWarningHealthPolicy = new UnusableAudioWarningConnectionHealthPolicy_1.default(Object.assign({}, connectionHealthPolicyConfiguration), this.initialConnectionHealthData.clone());
    }
    removeObserver() {
        this.context.audioVideoController.removeObserver(this);
        this.context.realtimeController.realtimeUnsubscribeToFatalError(this.realtimeFatalErrorCallback);
        this.context.realtimeController.realtimeUnsubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);
        this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(this.realtimeAttendeeIdPresenceHandler);
        this.context.signalingClient.removeObserver(this);
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            this.context.removableObservers.push(this);
            this.context.audioVideoController.addObserver(this);
            this.context.realtimeController.realtimeSubscribeToFatalError(this.realtimeFatalErrorCallback);
            this.context.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);
            this.context.realtimeController.realtimeSubscribeToAttendeeIdPresence(this.realtimeAttendeeIdPresenceHandler);
            this.context.connectionMonitor.start();
            this.context.statsCollector.start(this.context.signalingClient, this.context.videoStreamIndex);
            this.context.signalingClient.registerObserver(this);
        });
    }
    videoTileDidUpdate(_tileState) {
        this.context.maxVideoTileCount = Math.max(this.context.maxVideoTileCount, this.context.videoTileController.getAllVideoTiles().length);
    }
    videoSendHealthDidChange(bitrateKbps, packetsPerSecond) {
        if (this.context.videoInputAttachedTimestampMs === 0 ||
            !this.context.videoTileController.hasStartedLocalVideoTile() ||
            !this.context.lastKnownVideoAvailability.canStartLocalVideo) {
            return;
        }
        const tracks = this.context.activeVideoInput !== null ? this.context.activeVideoInput.getTracks() : null;
        if (!tracks || !tracks[0]) {
            return;
        }
        const durationMs = Date.now() - this.context.videoInputAttachedTimestampMs;
        if (packetsPerSecond > 0 || bitrateKbps > 0) {
            this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingSuccess, this.context.videoDeviceInformation);
            this.context.statsCollector.logLatency('video_start_sending', durationMs, this.context.videoDeviceInformation);
            this.context.videoInputAttachedTimestampMs = 0;
        }
        else if (durationMs > MonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS) {
            this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingFailed, this.context.videoDeviceInformation);
            this.context.videoInputAttachedTimestampMs = 0;
        }
    }
    videoReceiveBandwidthDidChange(newBandwidthKbps, oldBandwidthKbps) {
        this.logger.debug(() => {
            return `receiving bandwidth changed from prev=${oldBandwidthKbps} Kbps to curr=${newBandwidthKbps} Kbps`;
        });
        this.currentVideoDownlinkBandwidthEstimationKbps = newBandwidthKbps;
    }
    checkResubscribe(clientMetricReport) {
        const metricReport = clientMetricReport.getObservableMetrics();
        if (!metricReport) {
            return false;
        }
        const availableSendBandwidth = metricReport.availableSendBandwidth || metricReport.availableOutgoingBitrate;
        const nackCountPerSecond = metricReport.nackCountReceivedPerSecond || metricReport.googNackCountReceivedPerSecond;
        let needResubscribe = false;
        this.context.videoDownlinkBandwidthPolicy.updateMetrics(clientMetricReport);
        const resubscribeForDownlink = this.context.videoDownlinkBandwidthPolicy.wantsResubscribe();
        needResubscribe = needResubscribe || resubscribeForDownlink;
        if (resubscribeForDownlink) {
            this.context.videosToReceive = this.context.videoDownlinkBandwidthPolicy.chooseSubscriptions();
            this.logger.info(`trigger resubscribe for down=${resubscribeForDownlink}; videosToReceive=[${this.context.videosToReceive.array()}]`);
        }
        if (this.context.videoTileController.hasStartedLocalVideoTile()) {
            this.context.videoUplinkBandwidthPolicy.updateConnectionMetric({
                uplinkKbps: availableSendBandwidth / 1000,
                nackCountPerSecond: nackCountPerSecond,
            });
            const resubscribeForUplink = this.context.videoUplinkBandwidthPolicy.wantsResubscribe();
            needResubscribe = needResubscribe || resubscribeForUplink;
            if (resubscribeForUplink) {
                this.logger.info(`trigger resubscribe for up=${resubscribeForUplink}; videosToReceive=[${this.context.videosToReceive.array()}]`);
                this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();
                this.context.videoUplinkBandwidthPolicy.chooseMediaTrackConstraints();
            }
        }
        return needResubscribe;
    }
    metricsDidReceive(clientMetricReport) {
        const defaultClientMetricReport = clientMetricReport;
        if (!defaultClientMetricReport) {
            return;
        }
        if (this.checkResubscribe(clientMetricReport)) {
            this.context.audioVideoController.update();
        }
        if (!this.currentAvailableStreamAvgBitrates) {
            return;
        }
        const streamMetricReport = defaultClientMetricReport.streamMetricReports;
        if (!streamMetricReport) {
            return;
        }
        const downlinkVideoStream = new Map();
        const videoReceivingBitrateMap = new Map();
        // TODO: move those logic to stats collector.
        for (const ssrc in streamMetricReport) {
            if (streamMetricReport[ssrc].mediaType === ClientMetricReportMediaType_1.default.VIDEO &&
                streamMetricReport[ssrc].direction === ClientMetricReportDirection_1.default.DOWNSTREAM) {
                downlinkVideoStream.set(streamMetricReport[ssrc].streamId, streamMetricReport[ssrc]);
            }
        }
        let fireCallback = false;
        for (const bitrate of this.currentAvailableStreamAvgBitrates.bitrates) {
            if (downlinkVideoStream.has(bitrate.sourceStreamId)) {
                const report = downlinkVideoStream.get(bitrate.sourceStreamId);
                const attendeeId = this.context.videoStreamIndex.attendeeIdForStreamId(bitrate.sourceStreamId);
                if (!attendeeId) {
                    continue;
                }
                const newReport = new ClientVideoStreamReceivingReport_1.default();
                const prevBytesReceived = report.previousMetrics['bytesReceived'];
                const currBytesReceived = report.currentMetrics['bytesReceived'];
                if (!prevBytesReceived || !currBytesReceived) {
                    continue;
                }
                const receivedBitrate = ((currBytesReceived - prevBytesReceived) * 8) / 1000;
                newReport.expectedAverageBitrateKbps = bitrate.avgBitrateBps / 1000;
                newReport.receivedAverageBitrateKbps = receivedBitrate;
                newReport.attendeeId = attendeeId;
                if (receivedBitrate <
                    (bitrate.avgBitrateBps / 1000) * MonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR) {
                    fireCallback = true;
                }
                videoReceivingBitrateMap.set(attendeeId, newReport);
            }
        }
        if (fireCallback) {
            this.logger.debug(() => {
                return `Downlink video streams are not receiving enough data`;
            });
            this.context.audioVideoController.forEachObserver((observer) => {
                Maybe_1.default.of(observer.videoNotReceivingEnoughData).map(f => f.bind(observer)(Array.from(videoReceivingBitrateMap.values())));
            });
        }
    }
    connectionHealthDidChange(connectionHealthData) {
        var _a;
        if (connectionHealthData.consecutiveMissedPongs === 0) {
            if (this.context.reconnectController) {
                this.context.reconnectController.setLastActiveTimestampMs(Date.now());
            }
        }
        this.reconnectionHealthPolicy.update(connectionHealthData);
        const reconnectionValue = this.reconnectionHealthPolicy.healthIfChanged();
        if (reconnectionValue !== null) {
            this.logger.info(`reconnection health is now: ${reconnectionValue}`);
            if (reconnectionValue === 0) {
                this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.ConnectionHealthReconnect), null);
            }
        }
        this.unusableAudioWarningHealthPolicy.update(connectionHealthData);
        const unusableAudioWarningValue = this.unusableAudioWarningHealthPolicy.healthIfChanged();
        if (unusableAudioWarningValue !== null) {
            this.logger.info(`unusable audio warning is now: ${unusableAudioWarningValue}`);
            if (unusableAudioWarningValue === 0) {
                this.context.poorConnectionCount += 1;
                (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.pushMeetingState('receivingAudioDropped');
                if (this.context.videoTileController.haveVideoTilesWithStreams()) {
                    this.context.audioVideoController.forEachObserver((observer) => {
                        Maybe_1.default.of(observer.connectionDidSuggestStopVideo).map(f => f.bind(observer)());
                    });
                }
                else {
                    this.context.audioVideoController.forEachObserver((observer) => {
                        Maybe_1.default.of(observer.connectionDidBecomePoor).map(f => f.bind(observer)());
                    });
                }
            }
            else {
                this.context.audioVideoController.forEachObserver((observer) => {
                    Maybe_1.default.of(observer.connectionDidBecomeGood).map(f => f.bind(observer)());
                });
            }
        }
    }
    handleBitrateFrame(bitrates) {
        const videoSubscription = this.context.videoSubscriptions || [];
        let requiredBandwidthKbps = 0;
        this.currentAvailableStreamAvgBitrates = bitrates;
        this.logger.debug(() => {
            return `simulcast: bitrates from server ${JSON.stringify(bitrates)}`;
        });
        for (const bitrate of bitrates.bitrates) {
            if (videoSubscription.indexOf(bitrate.sourceStreamId) !== -1) {
                requiredBandwidthKbps += bitrate.avgBitrateBps;
            }
        }
        requiredBandwidthKbps /= 1000;
        if (this.currentVideoDownlinkBandwidthEstimationKbps *
            MonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR <
            requiredBandwidthKbps) {
            this.logger.info(`Downlink bandwidth pressure is high: estimated bandwidth ${this.currentVideoDownlinkBandwidthEstimationKbps}Kbps, required bandwidth ${requiredBandwidthKbps}Kbps`);
            this.context.audioVideoController.forEachObserver((observer) => {
                Maybe_1.default.of(observer.estimatedDownlinkBandwidthLessThanRequired).map(f => f.bind(observer)(this.currentVideoDownlinkBandwidthEstimationKbps, requiredBandwidthKbps));
            });
        }
    }
    handleSignalingClientEvent(event) {
        var _a;
        // Don't add two or more consecutive "signalingDropped" states.
        if ((event.type === SignalingClientEventType_1.default.WebSocketClosed &&
            (event.closeCode === 4410 || (event.closeCode >= 4500 && event.closeCode < 4600))) ||
            event.type === SignalingClientEventType_1.default.WebSocketError ||
            event.type === SignalingClientEventType_1.default.WebSocketFailed) {
            if (!this.hasSignalingError) {
                (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.pushMeetingState('signalingDropped');
                this.hasSignalingError = true;
            }
        }
        else if (event.type === SignalingClientEventType_1.default.WebSocketOpen) {
            this.hasSignalingError = false;
        }
        if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame) {
            if (!!event.message.bitrates) {
                const bitrateFrame = event.message.bitrates;
                this.context.videoStreamIndex.integrateBitratesFrame(bitrateFrame);
                this.context.videoDownlinkBandwidthPolicy.updateIndex(this.context.videoStreamIndex);
                this.handleBitrateFrame(event.message.bitrates);
            }
            const status = MeetingSessionStatus_1.default.fromSignalFrame(event.message);
            if (status.statusCode() !== MeetingSessionStatusCode_1.default.OK) {
                this.context.audioVideoController.handleMeetingSessionStatus(status, null);
            }
        }
    }
}
exports.default = MonitorTask;
MonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS = 30000;
MonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR = 1.5;
MonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR = 0.5;
//# sourceMappingURL=MonitorTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/NoOpTask.js":
/*!*****************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/NoOpTask.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class NoOpTask {
    cancel() { }
    name() {
        return 'NoOpTask';
    }
    run() {
        return;
    }
    setParent(_parentTask) { }
}
exports.default = NoOpTask;
//# sourceMappingURL=NoOpTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/OpenSignalingConnectionTask.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/OpenSignalingConnectionTask.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingClientConnectionRequest_1 = __webpack_require__(/*! ../signalingclient/SignalingClientConnectionRequest */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientConnectionRequest.js");
const SignalingClientEventType_1 = __webpack_require__(/*! ../signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
class OpenSignalingConnectionTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'OpenSignalingConnectionTask';
        this.taskCanceler = null;
    }
    cancel() {
        if (this.taskCanceler) {
            this.taskCanceler.cancel();
            this.taskCanceler = null;
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const configuration = this.context.meetingSessionConfiguration;
            this.context.signalingClient.openConnection(new SignalingClientConnectionRequest_1.default(configuration.urls.signalingURL, configuration.credentials.joinToken));
            const startTimeMs = Date.now();
            try {
                yield new Promise((resolve, reject) => {
                    class WebSocketOpenInterceptor {
                        constructor(signalingClient) {
                            this.signalingClient = signalingClient;
                        }
                        cancel() {
                            this.signalingClient.removeObserver(this);
                            reject(new Error(`OpenSignalingConnectionTask got canceled while waiting to open signaling connection`));
                        }
                        handleSignalingClientEvent(event) {
                            switch (event.type) {
                                case SignalingClientEventType_1.default.WebSocketOpen:
                                    this.signalingClient.removeObserver(this);
                                    resolve();
                                    break;
                                case SignalingClientEventType_1.default.WebSocketFailed:
                                    this.signalingClient.removeObserver(this);
                                    reject(new Error('WebSocket connection failed'));
                                    break;
                            }
                        }
                    }
                    const interceptor = new WebSocketOpenInterceptor(this.context.signalingClient);
                    this.context.signalingClient.registerObserver(interceptor);
                    this.taskCanceler = interceptor;
                });
            }
            catch (error) {
                throw error;
            }
            finally {
                this.context.signalingOpenDurationMs = Math.round(Date.now() - startTimeMs);
            }
        });
    }
}
exports.default = OpenSignalingConnectionTask;
//# sourceMappingURL=OpenSignalingConnectionTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/ParallelGroupTask.js":
/*!**************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/ParallelGroupTask.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/**
 * [[ParallelGroupTask]] runs a set of tasks in parallel. When canceled, it
 * stops any currently running tasks.
 */
class ParallelGroupTask extends BaseTask_1.default {
    constructor(logger, taskName, tasksToRunParallel) {
        super(logger);
        this.taskName = taskName;
        this.tasksToRunParallel = tasksToRunParallel;
        for (const task of tasksToRunParallel) {
            task.setParent(this);
        }
    }
    cancel() {
        for (const task of this.tasksToRunParallel) {
            this.logger.info(`canceling parallel group task ${this.name()} subtask ${task.name()}`);
            task.cancel();
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const taskResults = [];
            for (const task of this.tasksToRunParallel) {
                this.logger.info(`parallel group task ${this.name()} running subtask ${task.name()}`);
                taskResults.push(task.run());
            }
            const failures = [];
            for (let i = 0; i < taskResults.length; i++) {
                try {
                    yield taskResults[i];
                }
                catch (err) {
                    failures.push(`task ${this.tasksToRunParallel[i].name()} failed: ${err.message}`);
                }
                this.logger.info(`parallel group task ${this.name()} completed subtask ${this.tasksToRunParallel[i].name()}`);
            }
            if (failures.length > 0) {
                const failureMessage = failures.join(', ');
                this.logAndThrow(`parallel group task ${this.name()} failed for tasks: ${failureMessage}`);
            }
            this.logger.info(`parallel group task ${this.name()} completed`);
        });
    }
}
exports.default = ParallelGroupTask;
//# sourceMappingURL=ParallelGroupTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveAudioInputTask.js":
/*!******************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/ReceiveAudioInputTask.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/**
 * [[ReceiveAudioInputTask]] acquires an audio input.
 */
class ReceiveAudioInputTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'ReceiveAudioInputTask';
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.context.activeAudioInput) {
                this.context.logger.info(`an active audio input exists`);
                return;
            }
            let audioInput = null;
            try {
                audioInput = yield this.context.mediaStreamBroker.acquireAudioInputStream();
            }
            catch (error) {
                this.context.logger.warn('could not acquire audio input from current device');
            }
            if (audioInput) {
                this.context.activeAudioInput = audioInput;
                this.context.realtimeController.realtimeSetLocalAudioInput(audioInput);
                const audioTracks = audioInput.getAudioTracks();
                for (let i = 0; i < audioTracks.length; i++) {
                    const track = audioTracks[i];
                    this.logger.info(`using audio device label=${track.label} id=${track.id}`);
                    this.context.audioDeviceInformation['current_mic_name'] = track.label;
                    this.context.audioDeviceInformation['current_mic_id'] = track.id;
                    this.context.audioDeviceInformation['is_default_input_device'] =
                        track.label.indexOf('Default') !== -1 || track.label.indexOf('default') !== -1
                            ? 'true'
                            : 'false';
                }
            }
            else {
                this.context.logger.warn('an audio input is not available');
            }
        });
    }
}
exports.default = ReceiveAudioInputTask;
//# sourceMappingURL=ReceiveAudioInputTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveTURNCredentialsTask.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/ReceiveTURNCredentialsTask.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const MeetingSessionStatusCode_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionStatusCode */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js");
const MeetingSessionTURNCredentials_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionTURNCredentials */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionTURNCredentials.js");
const DefaultModality_1 = __webpack_require__(/*! ../modality/DefaultModality */ "./node_modules/amazon-chime-sdk-js/build/modality/DefaultModality.js");
const Versioning_1 = __webpack_require__(/*! ../versioning/Versioning */ "./node_modules/amazon-chime-sdk-js/build/versioning/Versioning.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[ReceiveTURNCredentialsTask]] asynchronously retrieves TURN credentials.
 */
class ReceiveTURNCredentialsTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'ReceiveTURNCredentialsTask';
        this.url = context.meetingSessionConfiguration.urls.turnControlURL;
        this.meetingId = context.meetingSessionConfiguration.meetingId;
        this.joinToken = context.meetingSessionConfiguration.credentials.joinToken;
    }
    cancel() {
        const error = new Error(`canceling ${this.name()}`);
        this.cancelPromise && this.cancelPromise(error);
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.context.turnCredentials) {
                this.context.logger.info('TURN credentials available, skipping credentials fetch');
                return;
            }
            this.context.logger.error('missing TURN credentials - falling back to fetch');
            if (!this.url) {
                this.context.logger.info('TURN control url not supplied, skipping credentials fetch');
                return;
            }
            const options = {
                method: 'POST',
                mode: 'cors',
                cache: 'no-cache',
                credentials: 'omit',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Chime-Auth-Token': '_aws_wt_session=' + new DefaultModality_1.default(this.joinToken).base(),
                },
                redirect: 'follow',
                referrer: 'no-referrer',
                body: JSON.stringify({ meetingId: this.meetingId }),
            };
            this.context.logger.info(`requesting TURN credentials from ${this.url}`);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const responseBodyJson = yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.cancelPromise = (error) => {
                    reject(error);
                };
                try {
                    const responseBody = yield fetch(Versioning_1.default.urlWithVersion(this.url), options);
                    this.context.logger.info(`received TURN credentials`);
                    if (responseBody.status && responseBody.status === 403) {
                        reject(new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.TURNCredentialsForbidden}`));
                    }
                    if (responseBody.status && responseBody.status === 404) {
                        reject(new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.MeetingEnded}`));
                    }
                    resolve(yield responseBody.json());
                }
                catch (error) {
                    reject(error);
                }
            }));
            this.context.turnCredentials = new MeetingSessionTURNCredentials_1.default();
            this.context.turnCredentials.password = responseBodyJson.password;
            this.context.turnCredentials.ttl = responseBodyJson.ttl;
            this.context.turnCredentials.uris = responseBodyJson.uris
                .map((uri) => {
                return this.context.meetingSessionConfiguration.urls.urlRewriter(uri);
            })
                .filter((uri) => {
                return !!uri;
            });
            this.context.turnCredentials.username = responseBodyJson.username;
        });
    }
}
exports.default = ReceiveTURNCredentialsTask;
//# sourceMappingURL=ReceiveTURNCredentialsTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveVideoInputTask.js":
/*!******************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/ReceiveVideoInputTask.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/**
 * [[ReceiveVideoInputTask]] acquires a video input from [[DeviceController]].
 */
class ReceiveVideoInputTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'ReceiveVideoInputTask';
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: move videoDuplexMode and videoCaptureAndEncodeParameters to video tile controller
            const receiveEnabled = this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.RX ||
                this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX;
            if (this.context.videoTileController.hasStartedLocalVideoTile()) {
                this.context.videoDuplexMode = receiveEnabled
                    ? SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX
                    : SignalingProtocol_js_1.SdkStreamServiceType.TX;
            }
            else {
                this.context.videoDuplexMode = receiveEnabled ? SignalingProtocol_js_1.SdkStreamServiceType.RX : 0;
            }
            this.context.videoCaptureAndEncodeParameter = this.context.videoUplinkBandwidthPolicy.chooseCaptureAndEncodeParameters();
            if (!this.context.videoTileController.hasStartedLocalVideoTile()) {
                this.context.logger.info('has not started local video tile');
                if (this.context.activeVideoInput) {
                    this.stopVideoInput();
                }
                return;
            }
            // TODO: bind after ICE connection started in case of a failure to resubscribe
            //       or perform error handling to unbind video stream.
            const localTile = this.context.videoTileController.getLocalVideoTile();
            let videoInput = null;
            try {
                videoInput = yield this.context.mediaStreamBroker.acquireVideoInputStream();
            }
            catch (error) {
                this.context.logger.warn('could not acquire video input from current device');
            }
            if (this.context.enableSimulcast) {
                const encodingParams = this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();
                this.context.videoStreamIndex.integrateUplinkPolicyDecision(Array.from(encodingParams.values()));
            }
            this.context.activeVideoInput = videoInput;
            if (videoInput) {
                const videoTracks = videoInput.getVideoTracks();
                const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;
                const trackSettings = videoTracks[0].getSettings();
                if (this.context.enableSimulcast) {
                    const constraint = this.context.videoUplinkBandwidthPolicy.chooseMediaTrackConstraints();
                    this.context.logger.info(`simulcast: choose constraint ${JSON.stringify(constraint)}`);
                    try {
                        yield videoTracks[0].applyConstraints(constraint);
                    }
                    catch (error) {
                        this.context.logger.info('simulcast: pass video without more constraint');
                    }
                }
                const externalUserId = this.context.audioVideoController.configuration.credentials
                    .externalUserId;
                localTile.bindVideoStream(attendeeId, true, videoInput, trackSettings.width, trackSettings.height, null, externalUserId);
                for (let i = 0; i < videoTracks.length; i++) {
                    const track = videoTracks[i];
                    this.logger.info(`using video device label=${track.label} id=${track.id}`);
                    this.context.videoDeviceInformation['current_camera_name'] = track.label;
                    this.context.videoDeviceInformation['current_camera_id'] = track.id;
                }
            }
        });
    }
    stopVideoInput() {
        this.context.mediaStreamBroker.releaseMediaStream(this.context.activeVideoInput);
        this.context.activeVideoInput = null;
    }
}
exports.default = ReceiveVideoInputTask;
//# sourceMappingURL=ReceiveVideoInputTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/ReceiveVideoStreamIndexTask.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/ReceiveVideoStreamIndexTask.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Maybe_1 = __webpack_require__(/*! ../maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
const MeetingSessionVideoAvailability_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionVideoAvailability */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionVideoAvailability.js");
const DefaultModality_1 = __webpack_require__(/*! ../modality/DefaultModality */ "./node_modules/amazon-chime-sdk-js/build/modality/DefaultModality.js");
const SignalingClientEventType_1 = __webpack_require__(/*! ../signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[ReceiveVideoStreamIndexTask]] receives [[SdkIndexFrame]] and updates [[VideoUplinkBandwidthPolicy]] and [[VideoDownlinkBandwidthPolicy]].
 */
class ReceiveVideoStreamIndexTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'ReceiveVideoStreamIndexTask';
    }
    removeObserver() {
        this.context.signalingClient.removeObserver(this);
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            this.handleIndexFrame(this.context.indexFrame);
            this.context.signalingClient.registerObserver(this);
            this.context.removableObservers.push(this);
        });
    }
    handleSignalingClientEvent(event) {
        if (event.type !== SignalingClientEventType_1.default.ReceivedSignalFrame ||
            event.message.type !== SignalingProtocol_js_1.SdkSignalFrame.Type.INDEX) {
            return;
        }
        // @ts-ignore: force cast to SdkIndexFrame
        const indexFrame = event.message.index;
        this.context.logger.info(`received new index ${JSON.stringify(indexFrame)}`);
        this.handleIndexFrame(indexFrame);
    }
    handleIndexFrame(indexFrame) {
        if (!indexFrame) {
            return;
        }
        // Filter out self content share video
        const selfAttendeeId = this.context.audioVideoController.configuration.credentials.attendeeId;
        indexFrame.sources = indexFrame.sources.filter(source => {
            const modality = new DefaultModality_1.default(source.attendeeId);
            return !(modality.base() === selfAttendeeId && modality.hasModality(DefaultModality_1.default.MODALITY_CONTENT));
        });
        const { videoStreamIndex, videoDownlinkBandwidthPolicy, videoUplinkBandwidthPolicy, } = this.context;
        const oldVideoSources = videoStreamIndex.allVideoSendingSourcesExcludingSelf(selfAttendeeId);
        videoStreamIndex.integrateIndexFrame(indexFrame);
        videoDownlinkBandwidthPolicy.updateIndex(videoStreamIndex);
        videoUplinkBandwidthPolicy.updateIndex(videoStreamIndex);
        this.resubscribe(videoDownlinkBandwidthPolicy, videoUplinkBandwidthPolicy);
        this.updateVideoAvailability(indexFrame);
        this.handleIndexVideosPausedAtSource();
        const newVideoSources = videoStreamIndex.allVideoSendingSourcesExcludingSelf(selfAttendeeId);
        if (!this.areVideoSourcesEqual(oldVideoSources, newVideoSources)) {
            this.context.audioVideoController.forEachObserver((observer) => {
                Maybe_1.default.of(observer.remoteVideoSourcesDidChange).map(f => f.bind(observer)(newVideoSources));
            });
        }
    }
    areVideoSourcesEqual(oldVideoSources, newVideoSources) {
        if (oldVideoSources.length !== newVideoSources.length) {
            return false;
        }
        const compare = (videoSourceA, videoSourceB) => videoSourceA.attendee.attendeeId.localeCompare(videoSourceB.attendee.attendeeId);
        const sortedOldVideoSources = [...oldVideoSources].sort(compare);
        const sortedNewVideoSources = [...newVideoSources].sort(compare);
        for (let i = 0; i < sortedOldVideoSources.length; i++) {
            if (sortedOldVideoSources[i].attendee.attendeeId !==
                sortedNewVideoSources[i].attendee.attendeeId) {
                return false;
            }
        }
        return true;
    }
    resubscribe(videoDownlinkBandwidthPolicy, videoUplinkBandwidthPolicy) {
        const resubscribeForDownlink = videoDownlinkBandwidthPolicy.wantsResubscribe();
        const resubscribeForUplink = (this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.TX ||
            this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX) &&
            videoUplinkBandwidthPolicy.wantsResubscribe();
        const shouldResubscribe = resubscribeForDownlink || resubscribeForUplink;
        this.logger.info(`should resubscribe: ${shouldResubscribe} (downlink: ${resubscribeForDownlink} uplink: ${resubscribeForUplink})`);
        if (!shouldResubscribe) {
            return;
        }
        this.context.videosToReceive = videoDownlinkBandwidthPolicy.chooseSubscriptions();
        this.context.videoCaptureAndEncodeParameter = videoUplinkBandwidthPolicy.chooseCaptureAndEncodeParameters();
        this.logger.info(`trigger resubscribe for up=${resubscribeForUplink} down=${resubscribeForDownlink}; videosToReceive=[${this.context.videosToReceive.array()}] captureParams=${JSON.stringify(this.context.videoCaptureAndEncodeParameter)}`);
        this.context.audioVideoController.update();
    }
    updateVideoAvailability(indexFrame) {
        if (!this.context.videosToReceive) {
            this.logger.error('videosToReceive must be set in the meeting context.');
            return;
        }
        const videoAvailability = new MeetingSessionVideoAvailability_1.default();
        videoAvailability.remoteVideoAvailable = !this.context.videosToReceive.empty();
        videoAvailability.canStartLocalVideo = !indexFrame.atCapacity;
        if (!this.context.lastKnownVideoAvailability ||
            !this.context.lastKnownVideoAvailability.equal(videoAvailability)) {
            this.context.lastKnownVideoAvailability = videoAvailability.clone();
            this.context.audioVideoController.forEachObserver((observer) => {
                Maybe_1.default.of(observer.videoAvailabilityDidChange).map(f => f.bind(observer)(videoAvailability.clone()));
            });
        }
    }
    handleIndexVideosPausedAtSource() {
        const streamsPausedAtSource = this.context.videoStreamIndex.streamsPausedAtSource();
        for (const tile of this.context.videoTileController.getAllVideoTiles()) {
            const tileState = tile.state();
            if (streamsPausedAtSource.contain(tileState.streamId)) {
                if (tile.markPoorConnection()) {
                    this.logger.info(`marks the tile ${tileState.tileId} as having a poor connection`);
                }
            }
            else {
                if (tile.unmarkPoorConnection()) {
                    this.logger.info(`unmarks the tile ${tileState.tileId} as having a poor connection`);
                }
            }
        }
    }
}
exports.default = ReceiveVideoStreamIndexTask;
//# sourceMappingURL=ReceiveVideoStreamIndexTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/RunnableTask.js":
/*!*********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/RunnableTask.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/**
 * [[RunnableTask]] Task wrapper for any Promised-operation
 */
class RunnableTask extends BaseTask_1.default {
    constructor(logger, fn, taskName = 'RunnableTask') {
        super(logger);
        this.fn = fn;
        this.taskName = taskName;
    }
    run() {
        return this.fn().then(() => { });
    }
}
exports.default = RunnableTask;
//# sourceMappingURL=RunnableTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/SendAndReceiveDataMessagesTask.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/SendAndReceiveDataMessagesTask.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DataMessage_1 = __webpack_require__(/*! ../datamessage/DataMessage */ "./node_modules/amazon-chime-sdk-js/build/datamessage/DataMessage.js");
const SignalingClientEventType_1 = __webpack_require__(/*! ../signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
class SendAndReceiveDataMessagesTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'SendAndReceiveDataMessagesTask';
        this.sendDataMessageHandler = (topic, data, // eslint-disable-line @typescript-eslint/no-explicit-any
        lifetimeMs) => {
            if (this.context.signalingClient.ready()) {
                let uint8Data;
                if (data instanceof Uint8Array) {
                    uint8Data = data;
                }
                else if (typeof data === 'string') {
                    uint8Data = new TextEncoder().encode(data);
                }
                else {
                    uint8Data = new TextEncoder().encode(JSON.stringify(data));
                }
                this.validateDataMessage(topic, uint8Data, lifetimeMs);
                const message = SignalingProtocol_js_1.SdkDataMessagePayload.create();
                message.topic = topic;
                message.lifetimeMs = lifetimeMs;
                message.data = uint8Data;
                const messageFrame = SignalingProtocol_js_1.SdkDataMessageFrame.create();
                messageFrame.messages = [message];
                this.context.signalingClient.sendDataMessage(messageFrame);
            }
            else {
                throw new Error('Signaling client is not ready');
            }
        };
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            this.context.removableObservers.push(this);
            this.context.signalingClient.registerObserver(this);
            this.context.realtimeController.realtimeSubscribeToSendDataMessage(this.sendDataMessageHandler);
        });
    }
    removeObserver() {
        this.context.realtimeController.realtimeUnsubscribeFromSendDataMessage(this.sendDataMessageHandler);
        this.context.signalingClient.removeObserver(this);
    }
    handleSignalingClientEvent(event) {
        if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame &&
            event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.DATA_MESSAGE) {
            for (const message of event.message.dataMessage.messages) {
                const dataMessage = new DataMessage_1.default(message.ingestTimeNs / 1000000, message.topic, message.data, message.senderAttendeeId, message.senderExternalUserId, message.ingestTimeNs === 0);
                this.context.realtimeController.realtimeReceiveDataMessage(dataMessage);
            }
        }
    }
    validateDataMessage(topic, data, lifetimeMs) {
        if (!SendAndReceiveDataMessagesTask.TOPIC_REGEX.test(topic)) {
            throw new Error('Invalid topic');
        }
        if (data.length > SendAndReceiveDataMessagesTask.DATA_SIZE) {
            throw new Error('Data size has to be less than 2048 bytes');
        }
        if (lifetimeMs && lifetimeMs < 0) {
            throw new Error('The life time of the message has to be non negative');
        }
    }
}
exports.default = SendAndReceiveDataMessagesTask;
SendAndReceiveDataMessagesTask.TOPIC_REGEX = new RegExp(/^[a-zA-Z0-9_-]{1,36}$/);
SendAndReceiveDataMessagesTask.DATA_SIZE = 2048;
//# sourceMappingURL=SendAndReceiveDataMessagesTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/SerialGroupTask.js":
/*!************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/SerialGroupTask.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
const TaskStatus_1 = __webpack_require__(/*! ./TaskStatus */ "./node_modules/amazon-chime-sdk-js/build/task/TaskStatus.js");
/**
 * [[SerialGroupTask]] runs a set of tasks in series. When canceled, it stops
 * any currently running task and runs no further tasks in the group.
 */
class SerialGroupTask extends BaseTask_1.default {
    constructor(logger, taskName, tasksToRunSerially) {
        super(logger);
        this.taskName = taskName;
        this.tasksToRunSerially = tasksToRunSerially;
        this.currentTask = null;
        for (const task of tasksToRunSerially) {
            task.setParent(this);
        }
    }
    cancel() {
        if (this.currentTask) {
            this.logger.info(`canceling serial group task ${this.name()} subtask ${this.currentTask.name()}`);
            this.currentTask.cancel();
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const task of this.tasksToRunSerially) {
                if (this.getStatus() === TaskStatus_1.default.CANCELED) {
                    this.logAndThrow(`serial group task ${this.name()} was canceled`);
                }
                try {
                    this.logger.info(`serial group task ${this.name()} running subtask ${task.name()}`);
                    this.currentTask = task;
                    yield task.run();
                    this.logger.info(`serial group task ${this.name()} completed subtask ${task.name()}`);
                }
                catch (err) {
                    this.logAndThrow(`serial group task ${this.name()} was canceled due to subtask ` +
                        `${this.currentTask.name()} error: ${err.message}`);
                }
                finally {
                    this.currentTask = null;
                }
            }
            this.logger.info(`serial group task ${this.name()} completed`);
        });
    }
}
exports.default = SerialGroupTask;
//# sourceMappingURL=SerialGroupTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/SetLocalDescriptionTask.js":
/*!********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/SetLocalDescriptionTask.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[SetLocalDescriptionTask]] asynchronously calls [[setLocalDescription]] on peer connection.
 */
class SetLocalDescriptionTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'SetLocalDescriptionTask';
    }
    cancel() {
        const error = new Error(`canceling ${this.name()}`);
        this.cancelPromise && this.cancelPromise(error);
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const peer = this.context.peer;
            const sdpOffer = this.context.sdpOfferInit;
            this.logger.debug(() => {
                return `local description is >>>${sdpOffer.sdp}<<<`;
            });
            yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.cancelPromise = (error) => {
                    reject(error);
                };
                try {
                    yield peer.setLocalDescription(sdpOffer);
                    resolve();
                }
                catch (error) {
                    reject(error);
                }
            }));
            this.context.logger.info('set local description');
        });
    }
}
exports.default = SetLocalDescriptionTask;
//# sourceMappingURL=SetLocalDescriptionTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/SetRemoteDescriptionTask.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/SetRemoteDescriptionTask.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
const DefaultSDP_1 = __webpack_require__(/*! ../sdp/DefaultSDP */ "./node_modules/amazon-chime-sdk-js/build/sdp/DefaultSDP.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[SetRemoteDescriptionTask]] asynchronously calls [[setRemoteDescription]] on the
 * peer connection and then waits for the tracks to be added and for the ICE connection
 * to complete.
 */
class SetRemoteDescriptionTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'SetRemoteDescriptionTask';
    }
    cancel() {
        if (this.cancelICEPromise) {
            this.cancelICEPromise();
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const peer = this.context.peer;
            if (!peer) {
                this.logAndThrow('session does not have peer connection; bypass set remote description');
            }
            let sdp = this.context.sdpAnswer;
            sdp = new DefaultSDP_1.default(sdp).withoutServerReflexiveCandidates().sdp;
            if (this.context.audioProfile) {
                sdp = new DefaultSDP_1.default(sdp).withAudioMaxAverageBitrate(this.context.audioProfile.audioBitrateBps).sdp;
            }
            if (!this.context.browserBehavior.requiresUnifiedPlan()) {
                // Under Plan B if our offer has video, but we're not going to subscribe to
                // any videos, ensure that the answer has video (marked inactive). If
                // it doesn't, WebRTC will reject the SDP answer. This happens on Chrome
                // when going from receiving one video to zero videos. The server does not
                // provide a video m-line when there are no videos available under Plan B,
                // thus we need to synthesize a video m-line by copying the one from the offer.
                this.logger.info('checking for no videos (plan-b)');
                if (this.context.videosToReceive.empty() && this.context.peer.remoteDescription) {
                    this.logger.info('have no videos and have remote description (plan-b)');
                    const sdpInactiveVideoOffer = this.context.peer.localDescription.sdp;
                    const sdpInactiveVideoAnswer = sdp;
                    let updatedAnswer = sdpInactiveVideoAnswer;
                    const offer = new DefaultSDP_1.default(sdpInactiveVideoOffer);
                    if (offer.hasVideo()) {
                        this.logger.info(`offer has video (plan-b): >>>${offer.sdp}<<<`);
                        const answer = new DefaultSDP_1.default(sdpInactiveVideoAnswer);
                        this.logger.info(`existing answer (plan-b): >>>${answer.sdp}<<<`);
                        if (!answer.hasVideo()) {
                            this.logger.info(`copying inactive video from offer into answer (plan-b); sdp answer before is >>>${sdpInactiveVideoAnswer}<<<`);
                            updatedAnswer = answer.copyVideo(sdpInactiveVideoOffer).sdp;
                        }
                    }
                    sdp = updatedAnswer;
                }
            }
            if (new DefaultBrowserBehavior_1.default().requiresSortCodecPreferencesForSdpAnswer()) {
                sdp = new DefaultSDP_1.default(sdp).preferH264IfExists().sdp;
            }
            this.logger.info(`processed remote description is >>>${sdp}<<<`);
            const remoteDescription = {
                type: 'answer',
                sdp: sdp,
                toJSON: null,
            };
            try {
                yield this.createICEConnectionCompletedPromise(remoteDescription);
            }
            catch (err) {
                throw err;
            }
        });
    }
    createICEConnectionCompletedPromise(remoteDescription) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const checkConnectionCompleted = () => {
                if (this.context.peer.iceConnectionState === 'connected' ||
                    this.context.peer.iceConnectionState === 'completed') {
                    this.context.peer.removeEventListener('iceconnectionstatechange', checkConnectionCompleted);
                    resolve();
                }
            };
            this.cancelICEPromise = () => {
                if (this.context.peer) {
                    this.context.peer.removeEventListener('iceconnectionstatechange', checkConnectionCompleted);
                }
                reject(new Error(`${this.name()} got canceled while waiting for the ICE connection state`));
            };
            this.context.peer.addEventListener('iceconnectionstatechange', checkConnectionCompleted);
            try {
                yield this.context.peer.setRemoteDescription(remoteDescription);
                this.logger.info('set remote description, waiting for ICE connection');
                checkConnectionCompleted();
            }
            catch (err) {
                reject(err);
            }
        }));
    }
}
exports.default = SetRemoteDescriptionTask;
//# sourceMappingURL=SetRemoteDescriptionTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/SubscribeAndReceiveSubscribeAckTask.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/SubscribeAndReceiveSubscribeAckTask.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultSDP_1 = __webpack_require__(/*! ../sdp/DefaultSDP */ "./node_modules/amazon-chime-sdk-js/build/sdp/DefaultSDP.js");
const SignalingClientEventType_1 = __webpack_require__(/*! ../signalingclient/SignalingClientEventType */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientEventType.js");
const SignalingClientSubscribe_1 = __webpack_require__(/*! ../signalingclient/SignalingClientSubscribe */ "./node_modules/amazon-chime-sdk-js/build/signalingclient/SignalingClientSubscribe.js");
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/**
 * [[SubscribeAndReceiveSubscribeAckTask]] sends a subscribe frame with the given settings
 * and receives SdkSubscribeAckFrame.
 */
class SubscribeAndReceiveSubscribeAckTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'SubscribeAndReceiveSubscribeAckTask';
        this.taskCanceler = null;
    }
    cancel() {
        if (this.taskCanceler) {
            this.taskCanceler.cancel();
            this.taskCanceler = null;
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            let localSdp = '';
            if (this.context.peer && this.context.peer.localDescription) {
                if (this.context.browserBehavior.requiresUnifiedPlanMunging()) {
                    localSdp = new DefaultSDP_1.default(this.context.peer.localDescription.sdp).withUnifiedPlanFormat()
                        .sdp;
                }
                else {
                    localSdp = this.context.peer.localDescription.sdp;
                }
            }
            if (!this.context.enableSimulcast) {
                // backward compatibility
                let frameRate = 0;
                let maxEncodeBitrateKbps = 0;
                if (this.context.videoCaptureAndEncodeParameter) {
                    frameRate = this.context.videoCaptureAndEncodeParameter.captureFrameRate();
                    maxEncodeBitrateKbps = this.context.videoCaptureAndEncodeParameter.encodeBitrates()[0];
                }
                const param = {
                    rid: 'hi',
                    maxBitrate: maxEncodeBitrateKbps * 1000,
                    maxFramerate: frameRate,
                    active: true,
                };
                this.context.videoStreamIndex.integrateUplinkPolicyDecision([param]);
            }
            this.context.videoStreamIndex.subscribeFrameSent();
            const isSendingStreams = this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.TX ||
                this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX;
            this.context.previousSdpOffer = new DefaultSDP_1.default(localSdp);
            const subscribe = new SignalingClientSubscribe_1.default(this.context.meetingSessionConfiguration.credentials.attendeeId, localSdp, this.context.meetingSessionConfiguration.urls.audioHostURL, this.context.realtimeController.realtimeIsLocalAudioMuted(), false, this.context.videoSubscriptions, isSendingStreams, this.context.videoStreamIndex.localStreamDescriptions(), 
            // TODO: handle check-in mode, or remove this param
            true);
            this.context.logger.info(`sending subscribe: ${JSON.stringify(subscribe)}`);
            this.context.signalingClient.subscribe(subscribe);
            const subscribeAckFrame = yield this.receiveSubscribeAck();
            this.context.logger.info(`got subscribe ack: ${JSON.stringify(subscribeAckFrame)}`);
            this.context.sdpAnswer = subscribeAckFrame.sdpAnswer;
            this.context.videoStreamIndex.integrateSubscribeAckFrame(subscribeAckFrame);
        });
    }
    receiveSubscribeAck() {
        return new Promise((resolve, reject) => {
            class Interceptor {
                constructor(signalingClient) {
                    this.signalingClient = signalingClient;
                }
                cancel() {
                    this.signalingClient.removeObserver(this);
                    reject(new Error(`SubscribeAndReceiveSubscribeAckTask got canceled while waiting for SdkSubscribeAckFrame`));
                }
                handleSignalingClientEvent(event) {
                    if (event.type !== SignalingClientEventType_1.default.ReceivedSignalFrame ||
                        event.message.type !== SignalingProtocol_js_1.SdkSignalFrame.Type.SUBSCRIBE_ACK) {
                        return;
                    }
                    this.signalingClient.removeObserver(this);
                    // @ts-ignore: force cast to SdkSubscribeAckFrame
                    const subackFrame = event.message.suback;
                    resolve(subackFrame);
                }
            }
            const interceptor = new Interceptor(this.context.signalingClient);
            this.context.signalingClient.registerObserver(interceptor);
            this.taskCanceler = interceptor;
        });
    }
}
exports.default = SubscribeAndReceiveSubscribeAckTask;
//# sourceMappingURL=SubscribeAndReceiveSubscribeAckTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/TaskStatus.js":
/*!*******************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/TaskStatus.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
var TaskStatus;
(function (TaskStatus) {
    TaskStatus["IDLE"] = "IDLE";
    TaskStatus["RUNNING"] = "RUNNING";
    TaskStatus["CANCELED"] = "CANCELED";
    TaskStatus["FINISHED"] = "FINISHED";
})(TaskStatus || (TaskStatus = {}));
exports.default = TaskStatus;
//# sourceMappingURL=TaskStatus.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/TimeoutTask.js":
/*!********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/TimeoutTask.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const TimeoutScheduler_1 = __webpack_require__(/*! ../scheduler/TimeoutScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/TimeoutScheduler.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/**
 * [[TimeoutTask]] runs a subtask until it either succeeds or reaches a
 * timeout, at which point the subtask is canceled.
 */
class TimeoutTask extends BaseTask_1.default {
    constructor(logger, taskToRunBeforeTimeout, timeoutMs) {
        super(logger);
        this.taskToRunBeforeTimeout = taskToRunBeforeTimeout;
        this.timeoutMs = timeoutMs;
        this.taskName = `Timeout${this.timeoutMs}ms`;
        taskToRunBeforeTimeout.setParent(this);
    }
    cancel() {
        this.logger.info(`canceling timeout task ${this.name()} subtask ${this.taskToRunBeforeTimeout}`);
        this.taskToRunBeforeTimeout.cancel();
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const timer = new TimeoutScheduler_1.default(this.timeoutMs);
            timer.start(() => {
                this.logger.info(`timeout reached for task ${this.name()}`);
                this.taskToRunBeforeTimeout.cancel();
            });
            try {
                yield this.taskToRunBeforeTimeout.run();
            }
            finally {
                timer.stop();
            }
            this.logger.info(`timeout task ${this.name()} completed`);
        });
    }
}
exports.default = TimeoutTask;
//# sourceMappingURL=TimeoutTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/task/WaitForAttendeePresenceTask.js":
/*!************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/task/WaitForAttendeePresenceTask.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const MeetingSessionStatusCode_1 = __webpack_require__(/*! ../meetingsession/MeetingSessionStatusCode */ "./node_modules/amazon-chime-sdk-js/build/meetingsession/MeetingSessionStatusCode.js");
const BaseTask_1 = __webpack_require__(/*! ./BaseTask */ "./node_modules/amazon-chime-sdk-js/build/task/BaseTask.js");
/*
 * [[WaitForAttendeePresenceTask]] waits until an attendee presence event happens.
 */
class WaitForAttendeePresenceTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'WaitForAttendeePresenceTask';
    }
    cancel() {
        const error = new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.NoAttendeePresent}`);
        this.cancelPromise && this.cancelPromise(error);
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;
            return new Promise((resolve, reject) => {
                const handler = (presentAttendeeId, present, _externalUserId, _dropped, _pos) => {
                    if (attendeeId === presentAttendeeId && present) {
                        this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);
                        resolve();
                    }
                };
                this.cancelPromise = (error) => {
                    this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);
                    reject(error);
                };
                this.context.realtimeController.realtimeSubscribeToAttendeeIdPresence(handler);
            });
        });
    }
}
exports.default = WaitForAttendeePresenceTask;
//# sourceMappingURL=WaitForAttendeePresenceTask.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/transceivercontroller/DefaultTransceiverController.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/transceivercontroller/DefaultTransceiverController.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
class DefaultTransceiverController {
    constructor(logger, browserBehavior) {
        this.logger = logger;
        this.browserBehavior = browserBehavior;
        this._localCameraTransceiver = null;
        this._localAudioTransceiver = null;
        this.videoSubscriptions = [];
        this.defaultMediaStream = null;
        this.peer = null;
    }
    setEncodingParameters(_params) {
        return;
    }
    static setVideoSendingBitrateKbpsForSender(sender, bitrateKbps, _logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!sender || bitrateKbps <= 0) {
                return;
            }
            const param = sender.getParameters();
            if (!param.encodings) {
                param.encodings = [{}];
            }
            for (const encodeParam of param.encodings) {
                encodeParam.maxBitrate = bitrateKbps * 1000;
            }
            yield sender.setParameters(param);
        });
    }
    static replaceAudioTrackForSender(sender, track) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!sender) {
                return false;
            }
            yield sender.replaceTrack(track);
            return true;
        });
    }
    localAudioTransceiver() {
        return this._localAudioTransceiver;
    }
    localVideoTransceiver() {
        return this._localCameraTransceiver;
    }
    setVideoSendingBitrateKbps(bitrateKbps) {
        return __awaiter(this, void 0, void 0, function* () {
            // this won't set bandwidth limitation for video in Chrome
            if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {
                return;
            }
            const sender = this._localCameraTransceiver.sender;
            yield DefaultTransceiverController.setVideoSendingBitrateKbpsForSender(sender, bitrateKbps, this.logger);
        });
    }
    setPeer(peer) {
        this.peer = peer;
    }
    reset() {
        this._localCameraTransceiver = null;
        this._localAudioTransceiver = null;
        this.videoSubscriptions = [];
        this.defaultMediaStream = null;
        this.peer = null;
    }
    useTransceivers() {
        if (!this.peer || !this.browserBehavior.requiresUnifiedPlan()) {
            return false;
        }
        return typeof this.peer.getTransceivers !== 'undefined';
    }
    hasVideoInput() {
        if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv')
            return false;
        return true;
    }
    trackIsVideoInput(track) {
        if (!this._localCameraTransceiver) {
            return false;
        }
        return (track === this._localCameraTransceiver.sender.track ||
            track === this._localCameraTransceiver.receiver.track);
    }
    setupLocalTransceivers() {
        if (!this.useTransceivers()) {
            return;
        }
        if (!this.defaultMediaStream && typeof MediaStream !== 'undefined') {
            this.defaultMediaStream = new MediaStream();
        }
        if (!this._localAudioTransceiver) {
            this._localAudioTransceiver = this.peer.addTransceiver('audio', {
                direction: 'inactive',
                streams: [this.defaultMediaStream],
            });
        }
        if (!this._localCameraTransceiver) {
            this._localCameraTransceiver = this.peer.addTransceiver('video', {
                direction: 'inactive',
                streams: [this.defaultMediaStream],
            });
        }
    }
    replaceAudioTrack(track) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._localAudioTransceiver || this._localAudioTransceiver.direction !== 'sendrecv') {
                this.logger.info(`audio transceiver direction is not set up or not activated`);
                return false;
            }
            yield this._localAudioTransceiver.sender.replaceTrack(track);
            return true;
        });
    }
    setAudioInput(track) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setTransceiverInput(this._localAudioTransceiver, track);
            return;
        });
    }
    setVideoInput(track) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setTransceiverInput(this._localCameraTransceiver, track);
            return;
        });
    }
    updateVideoTransceivers(videoStreamIndex, videosToReceive) {
        if (!this.useTransceivers()) {
            return videosToReceive.array();
        }
        // See https://blog.mozilla.org/webrtc/rtcrtptransceiver-explored/ for details on transceivers
        const transceivers = this.peer.getTransceivers();
        // Subscription index 0 is reserved for transmitting camera.
        // We mark inactive slots with 0 in the subscription array.
        this.videoSubscriptions = [0];
        videosToReceive = videosToReceive.clone();
        this.updateTransceivers(transceivers, videoStreamIndex, videosToReceive);
        this.logger.debug(() => {
            return this.debugDumpTransceivers();
        });
        return this.videoSubscriptions;
    }
    updateTransceivers(transceivers, videoStreamIndex, videosToReceive) {
        const videosRemaining = videosToReceive.array();
        // Start by handling existing videos
        // Begin counting out index in the the subscription array at 1 since the camera.
        // Always occupies position 0 (whether active or not).
        let n = 1;
        for (const transceiver of transceivers) {
            if (transceiver === this._localCameraTransceiver || !this.transceiverIsVideo(transceiver)) {
                continue;
            }
            this.videoSubscriptions[n] = 0;
            if (transceiver.direction !== 'inactive') {
                // See if we want this existing transceiver
                // by convention with the video host, msid is equal to the media section mid, prefixed with the string "v_"
                // we use this to get the streamId for the track
                const streamId = videoStreamIndex.streamIdForTrack('v_' + transceiver.mid);
                if (streamId !== undefined) {
                    for (const [index, recvStreamId] of videosRemaining.entries()) {
                        if (videoStreamIndex.StreamIdsInSameGroup(streamId, recvStreamId)) {
                            transceiver.direction = 'recvonly';
                            this.videoSubscriptions[n] = recvStreamId;
                            videosRemaining.splice(index, 1);
                            break;
                        }
                    }
                }
            }
            n += 1;
        }
        // Next fill in open slots and remove unused
        n = 1;
        for (const transceiver of transceivers) {
            if (transceiver === this._localCameraTransceiver || !this.transceiverIsVideo(transceiver)) {
                continue;
            }
            if (transceiver.direction === 'inactive' && videosRemaining.length > 0) {
                // Fill available slot
                transceiver.direction = 'recvonly';
                const streamId = videosRemaining.shift();
                this.videoSubscriptions[n] = streamId;
            }
            else {
                // Remove if no longer subscribed
                if (this.videoSubscriptions[n] === 0) {
                    transceiver.direction = 'inactive';
                }
            }
            n += 1;
        }
        // add transceivers for the remaining subscriptions
        for (const index of videosRemaining) {
            // @ts-ignore
            const transceiver = this.peer.addTransceiver('video', {
                direction: 'recvonly',
                streams: [this.defaultMediaStream],
            });
            this.videoSubscriptions.push(index);
            this.logger.info(`adding transceiver mid: ${transceiver.mid} subscription: ${index} direction: recvonly`);
        }
    }
    transceiverIsVideo(transceiver) {
        return ((transceiver.receiver &&
            transceiver.receiver.track &&
            transceiver.receiver.track.kind === 'video') ||
            (transceiver.sender && transceiver.sender.track && transceiver.sender.track.kind === 'video'));
    }
    debugDumpTransceivers() {
        let msg = '';
        let n = 0;
        for (const transceiver of this.peer.getTransceivers()) {
            if (!this.transceiverIsVideo(transceiver)) {
                continue;
            }
            msg += `transceiver index=${n} mid=${transceiver.mid} subscription=${this.videoSubscriptions[n]} direction=${transceiver.direction}\n`;
            n += 1;
        }
        return msg;
    }
    setTransceiverInput(transceiver, track) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!transceiver) {
                return;
            }
            if (track) {
                transceiver.direction = 'sendrecv';
            }
            else {
                transceiver.direction = 'inactive';
            }
            yield transceiver.sender.replaceTrack(track);
        });
    }
}
exports.default = DefaultTransceiverController;
//# sourceMappingURL=DefaultTransceiverController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/transceivercontroller/SimulcastTransceiverController.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/transceivercontroller/SimulcastTransceiverController.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultTransceiverController_1 = __webpack_require__(/*! ./DefaultTransceiverController */ "./node_modules/amazon-chime-sdk-js/build/transceivercontroller/DefaultTransceiverController.js");
class SimulcastTransceiverController extends DefaultTransceiverController_1.default {
    constructor(logger, browserBehavior) {
        super(logger, browserBehavior);
        this.videoQualityControlParameterMap = new Map();
        let scale = 4;
        for (let i = 0; i < SimulcastTransceiverController.NAME_ARR_ASCENDING.length; i++) {
            const ridName = SimulcastTransceiverController.NAME_ARR_ASCENDING[i];
            this.videoQualityControlParameterMap.set(ridName, {
                rid: ridName,
                scaleResolutionDownBy: scale,
                maxBitrate: SimulcastTransceiverController.BITRATE_ARR_ASCENDING[i] * 1000,
            });
            scale = scale / 2;
        }
    }
    setEncodingParameters(encodingParamMap) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {
                return;
            }
            const sender = this._localCameraTransceiver.sender;
            const newEncodingParams = Array.from(encodingParamMap.values());
            if (newEncodingParams.length <= 0) {
                return;
            }
            const oldParam = sender.getParameters();
            if (!oldParam.encodings) {
                oldParam.encodings = newEncodingParams;
            }
            else {
                for (let i = 0; i < oldParam.encodings.length; i++) {
                    if (oldParam.encodings[i].rid === SimulcastTransceiverController.LOW_LEVEL_NAME) {
                        oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME).maxBitrate;
                        oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME).active;
                    }
                    if (oldParam.encodings[i].rid === SimulcastTransceiverController.MID_LEVEL_NAME) {
                        oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.MID_LEVEL_NAME).maxBitrate;
                        oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.MID_LEVEL_NAME).active;
                    }
                    if (oldParam.encodings[i].rid === SimulcastTransceiverController.HIGH_LEVEL_NAME) {
                        oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME).maxBitrate;
                        oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME).active;
                    }
                }
            }
            yield sender.setParameters(oldParam);
            this.logVideoTransceiverParameters();
        });
    }
    static replaceAudioTrackForSender(sender, track) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!sender) {
                return false;
            }
            yield sender.replaceTrack(track);
            return true;
        });
    }
    setVideoSendingBitrateKbps(_bitrateKbps) {
        return __awaiter(this, void 0, void 0, function* () {
            return;
        });
    }
    setupLocalTransceivers() {
        if (!this.useTransceivers()) {
            return;
        }
        if (!this.defaultMediaStream && typeof MediaStream !== 'undefined') {
            this.defaultMediaStream = new MediaStream();
        }
        if (!this._localAudioTransceiver) {
            this._localAudioTransceiver = this.peer.addTransceiver('audio', {
                direction: 'inactive',
                streams: [this.defaultMediaStream],
            });
        }
        if (!this._localCameraTransceiver) {
            const encodingParams = Array.from(this.videoQualityControlParameterMap.values());
            this._localCameraTransceiver = this.peer.addTransceiver('video', {
                direction: 'inactive',
                streams: [this.defaultMediaStream],
                sendEncodings: encodingParams,
            });
        }
    }
    logVideoTransceiverParameters() {
        const params = this._localCameraTransceiver.sender.getParameters();
        const encodings = params.encodings;
        let msg = 'simulcast: current encoding parameters \n';
        for (const encodingParam of encodings) {
            msg += `rid=${encodingParam.rid} maxBitrate=${encodingParam.maxBitrate} active=${encodingParam.active} \n`;
        }
        this.logger.info(msg);
    }
}
exports.default = SimulcastTransceiverController;
SimulcastTransceiverController.LOW_LEVEL_NAME = 'low';
SimulcastTransceiverController.MID_LEVEL_NAME = 'mid';
SimulcastTransceiverController.HIGH_LEVEL_NAME = 'hi';
SimulcastTransceiverController.NAME_ARR_ASCENDING = ['low', 'mid', 'hi'];
SimulcastTransceiverController.BITRATE_ARR_ASCENDING = [200, 400, 1100];
//# sourceMappingURL=SimulcastTransceiverController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/versioning/Versioning.js":
/*!*************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/versioning/Versioning.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
const version_1 = __webpack_require__(/*! ./version */ "./node_modules/amazon-chime-sdk-js/build/versioning/version.js");
class Versioning {
    /**
     * Return string representation of SDK name
     */
    static get sdkName() {
        return 'amazon-chime-sdk-js';
    }
    /**
     * Return string representation of SDK version
     */
    static get sdkVersion() {
        return version_1.default.semverString;
    }
    /**
     * Return the SHA-1 of the Git commit from which this build was created.
     */
    static get buildSHA() {
        // Skip the leading 'g'.
        return version_1.default.hash.substr(1);
    }
    /**
     * Return low-resolution string representation of SDK user agent (e.g. `chrome-78`)
     */
    static get sdkUserAgentLowResolution() {
        const browserBehavior = new DefaultBrowserBehavior_1.default();
        return `${browserBehavior.name()}-${browserBehavior.majorVersion()}`;
    }
    /**
     * Return URL with versioning information appended
     */
    static urlWithVersion(url) {
        const urlWithVersion = new URL(url);
        urlWithVersion.searchParams.append(Versioning.X_AMZN_VERSION, Versioning.sdkVersion);
        urlWithVersion.searchParams.append(Versioning.X_AMZN_USER_AGENT, Versioning.sdkUserAgentLowResolution);
        return urlWithVersion.toString();
    }
}
exports.default = Versioning;
Versioning.X_AMZN_VERSION = 'X-Amzn-Version';
Versioning.X_AMZN_USER_AGENT = 'X-Amzn-User-Agent';
//# sourceMappingURL=Versioning.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/versioning/version.js":
/*!**********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/versioning/version.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.default = {
    "hash": "2b275e2",
    "raw": "v2.5.0",
    "semverString": "2.5.0"
};
//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class DefaultVideoCaptureAndEncodeParameter {
    constructor(cameraWidth, cameraHeight, cameraFrameRate, maxEncodeBitrateKbps, isSimulcast) {
        this.cameraWidth = cameraWidth;
        this.cameraHeight = cameraHeight;
        this.cameraFrameRate = cameraFrameRate;
        this.maxEncodeBitrateKbps = maxEncodeBitrateKbps;
        this.isSimulcast = isSimulcast;
    }
    equal(other) {
        let checkForEqual = other.captureWidth() === this.cameraWidth &&
            other.captureHeight() === this.cameraHeight &&
            other.captureFrameRate() === this.cameraFrameRate &&
            other.encodeBitrates().length === this.encodeBitrates().length &&
            other.encodeWidths().length === this.encodeWidths().length &&
            other.encodeHeights().length === this.encodeHeights().length;
        if (checkForEqual) {
            for (let i = 0; i < other.encodeWidths().length; i++) {
                if (other.encodeWidths()[i] !== this.encodeWidths()[i] ||
                    other.encodeHeights()[i] !== this.encodeHeights()[i] ||
                    other.encodeBitrates()[i] !== this.encodeBitrates()[i]) {
                    checkForEqual = false;
                    return checkForEqual;
                }
            }
        }
        return checkForEqual;
    }
    clone() {
        return new DefaultVideoCaptureAndEncodeParameter(this.cameraWidth, this.cameraHeight, this.cameraFrameRate, this.maxEncodeBitrateKbps, this.isSimulcast);
    }
    captureWidth() {
        return this.cameraWidth;
    }
    captureHeight() {
        return this.cameraHeight;
    }
    captureFrameRate() {
        return this.cameraFrameRate;
    }
    encodeBitrates() {
        // TODO: add simulcast layer
        return [this.maxEncodeBitrateKbps];
    }
    encodeWidths() {
        return [this.cameraWidth];
    }
    encodeHeights() {
        return [this.cameraHeight];
    }
}
exports.default = DefaultVideoCaptureAndEncodeParameter;
//# sourceMappingURL=DefaultVideoCaptureAndEncodeParameter.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultVideoStreamIdSet_1 = __webpack_require__(/*! ../videostreamidset/DefaultVideoStreamIdSet */ "./node_modules/amazon-chime-sdk-js/build/videostreamidset/DefaultVideoStreamIdSet.js");
/**
 * [[AllHighestVideoBandwidthPolicy]] implements is a rudimentary policy that simply
 * always subscribes to the highest quality video stream available
 * for all non-self participants.
 */
class AllHighestVideoBandwidthPolicy {
    constructor(selfAttendeeId) {
        this.selfAttendeeId = selfAttendeeId;
        this.reset();
    }
    reset() {
        this.optimalReceiveSet = new DefaultVideoStreamIdSet_1.default();
        this.subscribedReceiveSet = new DefaultVideoStreamIdSet_1.default();
    }
    updateIndex(videoIndex) {
        this.optimalReceiveSet = this.calculateOptimalReceiveSet(videoIndex);
    }
    updateMetrics(_clientMetricReport) { }
    wantsResubscribe() {
        return !this.subscribedReceiveSet.equal(this.optimalReceiveSet);
    }
    chooseSubscriptions() {
        this.subscribedReceiveSet = this.optimalReceiveSet.clone();
        return this.subscribedReceiveSet.clone();
    }
    calculateOptimalReceiveSet(videoIndex) {
        return videoIndex.highestQualityStreamFromEachGroupExcludingSelf(this.selfAttendeeId);
    }
}
exports.default = AllHighestVideoBandwidthPolicy;
//# sourceMappingURL=AllHighestVideoBandwidthPolicy.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/NoVideoDownlinkBandwidthPolicy.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/NoVideoDownlinkBandwidthPolicy.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultVideoStreamIdSet_1 = __webpack_require__(/*! ../videostreamidset/DefaultVideoStreamIdSet */ "./node_modules/amazon-chime-sdk-js/build/videostreamidset/DefaultVideoStreamIdSet.js");
class NoVideoDownlinkBandwidthPolicy {
    reset() { }
    updateIndex(_videoIndex) { }
    updateMetrics(_clientMetricReport) { }
    wantsResubscribe() {
        return false;
    }
    chooseSubscriptions() {
        return new DefaultVideoStreamIdSet_1.default();
    }
}
exports.default = NoVideoDownlinkBandwidthPolicy;
//# sourceMappingURL=NoVideoDownlinkBandwidthPolicy.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const ClientMetricReportDirection_1 = __webpack_require__(/*! ../clientmetricreport/ClientMetricReportDirection */ "./node_modules/amazon-chime-sdk-js/build/clientmetricreport/ClientMetricReportDirection.js");
const ContentShareConstants_1 = __webpack_require__(/*! ../contentsharecontroller/ContentShareConstants */ "./node_modules/amazon-chime-sdk-js/build/contentsharecontroller/ContentShareConstants.js");
const DefaultVideoStreamIdSet_1 = __webpack_require__(/*! ../videostreamidset/DefaultVideoStreamIdSet */ "./node_modules/amazon-chime-sdk-js/build/videostreamidset/DefaultVideoStreamIdSet.js");
class LinkMediaStats {
    constructor() {
        this.bandwidthEstimateKbps = 0;
        this.usedBandwidthKbps = 0;
        this.packetsLost = 0;
        this.nackCount = 0;
        this.rttMs = 0;
    }
}
class VideoAdaptiveProbePolicy {
    constructor(logger, tileController) {
        this.logger = logger;
        this.tileController = tileController;
        this.reset();
    }
    reset() {
        this.optimalReceiveSet = new DefaultVideoStreamIdSet_1.default();
        this.subscribedReceiveSet = new DefaultVideoStreamIdSet_1.default();
        this.logCount = 0;
        this.startupPeriod = true;
        this.usingPrevTargetRate = false;
        this.rateProbeState = "Not Probing" /* kNotProbing */;
        this.timeFirstEstimate = 0;
        this.lastUpgradeRateKbps = 0;
        this.timeBeforeAllowSubscribeMs = VideoAdaptiveProbePolicy.MIN_TIME_BETWEEN_SUBSCRIBE;
        this.timeLastProbe = Date.now();
        this.timeBeforeAllowProbeMs = VideoAdaptiveProbePolicy.MIN_TIME_BETWEEN_PROBE;
        this.downlinkStats = new LinkMediaStats();
        this.prevDownlinkStats = new LinkMediaStats();
    }
    updateIndex(videoIndex) {
        this.videoIndex = videoIndex;
    }
    updateMetrics(clientMetricReport) {
        if (this.videoIndex.allStreams().empty()) {
            return;
        }
        this.prevDownlinkStats = this.downlinkStats;
        this.downlinkStats = new LinkMediaStats();
        const metricReport = clientMetricReport.getObservableMetrics();
        this.downlinkStats.bandwidthEstimateKbps = metricReport.availableReceiveBandwidth / 1000;
        for (const ssrcStr in clientMetricReport.streamMetricReports) {
            const ssrc = Number(ssrcStr);
            if (clientMetricReport.streamMetricReports[ssrc].direction === ClientMetricReportDirection_1.default.DOWNSTREAM) {
                // Only use video stream metrics
                if (clientMetricReport.streamMetricReports[ssrc].currentMetrics.hasOwnProperty('googNacksSent') &&
                    clientMetricReport.streamMetricReports[ssrc].currentMetrics.hasOwnProperty('googFrameRateReceived')) {
                    this.downlinkStats.nackCount += clientMetricReport.countPerSecond('googNacksSent', ssrc);
                }
                if (clientMetricReport.streamMetricReports[ssrc].currentMetrics.hasOwnProperty('packetsLost') &&
                    clientMetricReport.streamMetricReports[ssrc].currentMetrics.hasOwnProperty('googFrameRateReceived')) {
                    this.downlinkStats.packetsLost += clientMetricReport.countPerSecond('packetsLost', ssrc);
                }
                if (clientMetricReport.streamMetricReports[ssrc].currentMetrics.hasOwnProperty('bytesReceived')) {
                    this.downlinkStats.usedBandwidthKbps +=
                        clientMetricReport.bitsPerSecond('bytesReceived', ssrc) / 1000;
                }
            }
        }
    }
    wantsResubscribe() {
        this.optimalReceiveSet = this.calculateOptimalReceiveSet();
        return !this.subscribedReceiveSet.equal(this.optimalReceiveSet);
    }
    chooseSubscriptions() {
        if (!this.subscribedReceiveSet.equal(this.optimalReceiveSet)) {
            this.timeLastSubscribe = Date.now();
        }
        this.subscribedReceiveSet = this.optimalReceiveSet.clone();
        this.logger.info('bwe: chooseSubscriptions ' + JSON.stringify(this.subscribedReceiveSet));
        return this.subscribedReceiveSet.clone();
    }
    calculateOptimalReceiveSet() {
        const streamSelectionSet = new DefaultVideoStreamIdSet_1.default();
        const lastProbeState = this.rateProbeState;
        const remoteInfos = this.videoIndex.remoteStreamDescriptions();
        if (remoteInfos.length === 0) {
            return streamSelectionSet;
        }
        const pausedStreamIds = new DefaultVideoStreamIdSet_1.default();
        this.handlePausedStreams(streamSelectionSet, pausedStreamIds, remoteInfos);
        const sameStreamChoices = this.availStreamsSameAsLast(remoteInfos);
        // If no major changes then don't allow subscribes for the allowed amount of time
        if (!this.startupPeriod &&
            sameStreamChoices &&
            Date.now() - this.timeLastSubscribe < this.timeBeforeAllowSubscribeMs) {
            return this.optimalReceiveSet;
        }
        // reset time before allow subscribe to default
        this.timeBeforeAllowSubscribeMs = VideoAdaptiveProbePolicy.MIN_TIME_BETWEEN_SUBSCRIBE;
        const chosenStreams = [];
        // Sort streams by bitrate asceending.
        remoteInfos.sort((a, b) => {
            if (a.maxBitrateKbps === b.maxBitrateKbps) {
                return a.streamId - b.streamId;
            }
            return a.maxBitrateKbps - b.maxBitrateKbps;
        });
        // Convert 0 avg bitrates to max and handle special cases
        for (const info of remoteInfos) {
            if (info.avgBitrateKbps === 0 || info.avgBitrateKbps > info.maxBitrateKbps) {
                // Content can be a special case
                if (info.attendeeId.endsWith(ContentShareConstants_1.default.Modality) && info.maxBitrateKbps < 100) {
                    info.maxBitrateKbps = info.avgBitrateKbps;
                }
                else {
                    info.avgBitrateKbps = info.maxBitrateKbps;
                }
            }
        }
        const targetDownlinkBitrate = this.determineTargetRate(remoteInfos);
        let deltaToNextUpgrade = 0;
        let chosenTotalBitrate = 0;
        let upgradeStream;
        // If screen share is available, then subscribe to that first before anything else
        chosenTotalBitrate += this.chooseContent(chosenStreams, remoteInfos);
        // Try to have at least one stream from every group first
        // Since the streams are sorted this will pick the lowest bitrates first
        for (const info of remoteInfos) {
            if (info.avgBitrateKbps === 0) {
                continue;
            }
            if (chosenStreams.findIndex(stream => stream.groupId === info.groupId) === -1) {
                if (chosenTotalBitrate + info.avgBitrateKbps <= targetDownlinkBitrate) {
                    chosenStreams.push(info);
                    chosenTotalBitrate += info.avgBitrateKbps;
                }
                else if (deltaToNextUpgrade === 0) {
                    // Keep track of step to next upgrade
                    deltaToNextUpgrade = info.avgBitrateKbps;
                    upgradeStream = info;
                }
            }
        }
        // Look for upgrades until we run out of bandwidth
        let lookForUpgrades = true;
        while (lookForUpgrades) {
            // We will set this to true if we find any new upgrades during the loop over the
            // chosen streams (i.e. when we do a full loop without an upgrade we will give up)
            lookForUpgrades = false;
            chosenStreams.forEach((chosenStream, index) => {
                for (const info of remoteInfos) {
                    if (info.groupId === chosenStream.groupId &&
                        info.streamId !== chosenStream.streamId &&
                        info.avgBitrateKbps > chosenStream.avgBitrateKbps) {
                        const increaseKbps = info.avgBitrateKbps - chosenStream.avgBitrateKbps;
                        if (chosenTotalBitrate + increaseKbps <= targetDownlinkBitrate) {
                            chosenTotalBitrate += increaseKbps;
                            chosenStreams[index] = info;
                            lookForUpgrades = true;
                        }
                        else if (deltaToNextUpgrade === 0) {
                            // Keep track of step to next upgrade
                            deltaToNextUpgrade = increaseKbps;
                            upgradeStream = info;
                        }
                    }
                }
            });
        }
        let subscriptionChoice = 0 /* kNewOptimal */;
        // Look for probing or override opportunities
        if (!this.startupPeriod && sameStreamChoices && deltaToNextUpgrade !== 0) {
            if (this.rateProbeState === "Probing" /* kProbing */) {
                subscriptionChoice = this.handleProbe(chosenStreams, pausedStreamIds, targetDownlinkBitrate, remoteInfos);
            }
            else {
                subscriptionChoice = this.maybeOverrideOrProbe(chosenStreams, pausedStreamIds, targetDownlinkBitrate, chosenTotalBitrate, deltaToNextUpgrade, upgradeStream);
            }
        }
        else {
            // If there was a change in streams to choose from, then cancel any probing or upgrades
            this.setProbeState("Not Probing" /* kNotProbing */);
            this.lastUpgradeRateKbps = 0;
        }
        let decisionLogStr = this.policyStateLogStr(remoteInfos, targetDownlinkBitrate);
        if (this.logCount % 15 === 0 || this.rateProbeState !== lastProbeState) {
            this.logger.info(decisionLogStr);
            this.logCount = 0;
            decisionLogStr = '';
        }
        this.logCount++;
        this.prevTargetRateKbps = targetDownlinkBitrate;
        this.prevRemoteInfos = remoteInfos;
        if (subscriptionChoice === 1 /* kPreviousOptimal */) {
            this.logger.info('bwe: keepSameSubscriptions');
            if (decisionLogStr.length > 0) {
                this.logger.info(decisionLogStr);
            }
            return this.optimalReceiveSet;
        }
        else if (subscriptionChoice === 2 /* kPreProbe */) {
            const subscribedRate = this.calculateSubscribeRate(remoteInfos, this.preProbeReceiveSet);
            this.logger.info('bwe: Use Pre-Probe subscription subscribedRate:' + subscribedRate);
            return this.preProbeReceiveSet;
        }
        for (const chosenStream of chosenStreams) {
            streamSelectionSet.add(chosenStream.streamId);
        }
        if (!this.optimalReceiveSet.equal(streamSelectionSet)) {
            if (decisionLogStr.length > 0) {
                this.logger.info(decisionLogStr);
            }
            const subscribedRate = this.calculateSubscribeRate(remoteInfos, streamSelectionSet);
            this.logger.info(`bwe: new streamSelection: ${JSON.stringify(streamSelectionSet)} subscribedRate:${subscribedRate}`);
        }
        return streamSelectionSet;
    }
    determineTargetRate(remoteInfos) {
        let targetBitrate = 0;
        // Estimated downlink bandwidth from WebRTC is dependent on actually receiving data, so if it ever got driven below the bitrate of the lowest
        // stream (a simulcast stream), and it stops receiving, it will get stuck never being able to resubscribe (as is implemented).
        let minTargetDownlinkBitrate = Number.MAX_VALUE;
        for (const info of remoteInfos) {
            if (info.avgBitrateKbps !== 0 && info.avgBitrateKbps < minTargetDownlinkBitrate) {
                minTargetDownlinkBitrate = info.avgBitrateKbps;
            }
        }
        const now = Date.now();
        // Startup phase handling.  During this period the estimate can be 0 or
        // could still be slowly hunting for a steady state.  This startup ramp up
        // can cause a series of subscribes which can be distracting. During this
        // time just use our configured default value
        if (this.downlinkStats.bandwidthEstimateKbps !== 0) {
            if (this.timeFirstEstimate === 0) {
                this.timeFirstEstimate = now;
            }
            // handle startup state where estimator is still converging.
            if (this.startupPeriod) {
                // Drop out of startup period if
                // - estimate is above default
                // - get packet loss and have a valid estimate
                // - startup period has expired and rate is not still increasing
                if (this.downlinkStats.bandwidthEstimateKbps >
                    VideoAdaptiveProbePolicy.DEFAULT_BANDWIDTH_KBPS ||
                    this.downlinkStats.packetsLost > 0 ||
                    (now - this.timeFirstEstimate > VideoAdaptiveProbePolicy.STARTUP_PERIOD_MS &&
                        this.downlinkStats.bandwidthEstimateKbps <=
                            this.prevDownlinkStats.bandwidthEstimateKbps)) {
                    this.startupPeriod = false;
                    this.prevTargetRateKbps = this.downlinkStats.bandwidthEstimateKbps;
                }
            }
            // If we are in the startup period and we haven't detected any packet loss, then
            // keep it at the default to let the estimation get to a steady state
            if (this.startupPeriod) {
                targetBitrate = VideoAdaptiveProbePolicy.DEFAULT_BANDWIDTH_KBPS;
            }
            else {
                targetBitrate = this.downlinkStats.bandwidthEstimateKbps;
            }
        }
        else {
            if (this.timeFirstEstimate === 0) {
                targetBitrate = VideoAdaptiveProbePolicy.DEFAULT_BANDWIDTH_KBPS;
            }
            else {
                targetBitrate = this.prevTargetRateKbps;
            }
        }
        targetBitrate = Math.max(minTargetDownlinkBitrate, targetBitrate);
        // Estimated downlink rate can follow actual bandwidth or fall for a short period of time
        // due to the absolute send time estimator incorrectly thinking that a delay in packets is
        // a precursor to packet loss.  We have seen too many false positives on this, so we
        // will ignore largish drops in the estimate if there is no packet loss
        if (!this.startupPeriod &&
            ((this.usingPrevTargetRate &&
                this.downlinkStats.bandwidthEstimateKbps < this.prevTargetRateKbps) ||
                this.downlinkStats.bandwidthEstimateKbps <
                    (this.prevTargetRateKbps *
                        (100 - VideoAdaptiveProbePolicy.LARGE_RATE_CHANGE_TRIGGER_PERCENT)) /
                        100 ||
                this.downlinkStats.bandwidthEstimateKbps <
                    (this.downlinkStats.usedBandwidthKbps *
                        VideoAdaptiveProbePolicy.LARGE_RATE_CHANGE_TRIGGER_PERCENT) /
                        100) &&
            this.downlinkStats.packetsLost === 0) {
            // Set target to be the same as last
            this.logger.debug(() => {
                return 'bwe: ValidateRate: Using Previous rate ' + this.prevTargetRateKbps;
            });
            this.usingPrevTargetRate = true;
            targetBitrate = this.prevTargetRateKbps;
        }
        else {
            this.usingPrevTargetRate = false;
        }
        return targetBitrate;
    }
    setProbeState(newState) {
        if (this.rateProbeState === newState)
            return;
        const now = Date.now();
        switch (newState) {
            case "Not Probing" /* kNotProbing */:
                this.timeProbePendingStart = 0;
                break;
            case "Probe Pending" /* kProbePending */:
                if (this.timeLastProbe === 0 ||
                    now - this.timeLastProbe > VideoAdaptiveProbePolicy.MIN_TIME_BETWEEN_PROBE) {
                    this.timeProbePendingStart = now;
                }
                else {
                    // Too soon to do a probe again
                    return false;
                }
                break;
            case "Probing" /* kProbing */:
                if (now - this.timeProbePendingStart > this.timeBeforeAllowProbeMs) {
                    this.timeLastProbe = now;
                    this.preProbeReceiveSet = this.subscribedReceiveSet;
                    // Increase the time allowed until the next probe
                    this.timeBeforeAllowProbeMs = Math.min(this.timeBeforeAllowProbeMs * 2, VideoAdaptiveProbePolicy.MAX_HOLD_MS_BEFORE_PROBE);
                }
                else {
                    // Too soon to do probe
                    return false;
                }
                break;
            default:
                break;
        }
        this.logger.info('bwe: setProbeState to ' + newState + ' from ' + this.rateProbeState);
        this.rateProbeState = newState;
        return true;
    }
    // Upgrade the stream id from the appropriate group or add it if it wasn't already in the list.
    // Return the added amount of bandwidth
    upgradeToStream(chosenStreams, upgradeStream) {
        for (let i = 0; i < chosenStreams.length; i++) {
            if (chosenStreams[i].groupId === upgradeStream.groupId) {
                const diffRate = upgradeStream.avgBitrateKbps - chosenStreams[i].avgBitrateKbps;
                this.logger.info('bwe: upgradeStream from ' +
                    JSON.stringify(chosenStreams[i]) +
                    ' to ' +
                    JSON.stringify(upgradeStream));
                this.lastUpgradeRateKbps = diffRate;
                chosenStreams[i] = upgradeStream;
                return diffRate;
            }
        }
        // We are adding a stream and not upgrading.
        chosenStreams.push(upgradeStream);
        this.lastUpgradeRateKbps = upgradeStream.avgBitrateKbps;
        return this.lastUpgradeRateKbps;
    }
    // Do specific behavior while we are currently in probing state and metrics
    // indicate environment is still valid to do probing.
    // Return true if the caller should not change from the previous subscriptions.
    handleProbe(chosenStreams, pausedStreamIds, targetDownlinkBitrate, remoteInfos) {
        if (this.rateProbeState !== "Probing" /* kProbing */) {
            return 0 /* kNewOptimal */;
        }
        // Don't allow probe to happen indefinitely
        if (Date.now() - this.timeLastProbe > VideoAdaptiveProbePolicy.MAX_ALLOWED_PROBE_TIME_MS) {
            this.logger.info(`bwe: Canceling probe due to timeout`);
            this.setProbeState("Not Probing" /* kNotProbing */);
            return 0 /* kNewOptimal */;
        }
        if (this.downlinkStats.packetsLost > 0) {
            this.setProbeState("Not Probing" /* kNotProbing */);
            this.timeBeforeAllowSubscribeMs = VideoAdaptiveProbePolicy.MIN_TIME_BETWEEN_SUBSCRIBE * 3;
            return 2 /* kPreProbe */;
        }
        const subscribedRate = this.calculateSubscribeRate(remoteInfos, this.optimalReceiveSet);
        if (this.chosenStreamsSameAsLast(chosenStreams, pausedStreamIds) ||
            targetDownlinkBitrate > subscribedRate) {
            let avgRate = 0;
            for (const chosenStream of chosenStreams) {
                avgRate += chosenStream.avgBitrateKbps;
            }
            if (targetDownlinkBitrate > avgRate) {
                // If target bitrate can sustain probe rate, then probe was successful.
                this.setProbeState("Not Probing" /* kNotProbing */);
                // Reset the time allowed between probes since this was successful
                this.timeBeforeAllowProbeMs = VideoAdaptiveProbePolicy.MIN_TIME_BETWEEN_PROBE;
                return 0 /* kNewOptimal */;
            }
        }
        return 1 /* kPreviousOptimal */;
    }
    maybeOverrideOrProbe(chosenStreams, pausedStreamIds, chosenTotalBitrate, targetDownlinkBitrate, deltaToNextUpgrade, upgradeStream) {
        const sameSubscriptions = this.chosenStreamsSameAsLast(chosenStreams, pausedStreamIds);
        let useLastSubscriptions = 0 /* kNewOptimal */;
        const now = Date.now();
        // We want to minimize thrashing between between low res and high res of different
        // participants due to avg bitrate fluctuations. If there hasn't been much of a change in estimated bandwidth
        // and the number of streams and their max rates are the same, then reuse the previous subscription
        const triggerPercent = targetDownlinkBitrate > VideoAdaptiveProbePolicy.LOW_BITRATE_THRESHOLD_KBPS
            ? VideoAdaptiveProbePolicy.TARGET_RATE_CHANGE_TRIGGER_PERCENT
            : VideoAdaptiveProbePolicy.TARGET_RATE_CHANGE_TRIGGER_PERCENT * 2;
        const minTargetBitrateDelta = (targetDownlinkBitrate * triggerPercent) / 100;
        if (!sameSubscriptions &&
            Math.abs(targetDownlinkBitrate - this.prevTargetRateKbps) < minTargetBitrateDelta) {
            this.logger.info('bwe: MaybeOverrideOrProbe: Reuse last decision based on delta rate. {' +
                JSON.stringify(this.subscribedReceiveSet) +
                `}`);
            useLastSubscriptions = 1 /* kPreviousOptimal */;
        }
        // If there has been packet loss, then reset to no probing state
        if (this.downlinkStats.packetsLost > this.prevDownlinkStats.packetsLost) {
            this.setProbeState("Not Probing" /* kNotProbing */);
            this.lastUpgradeRateKbps = 0;
            return useLastSubscriptions;
        }
        if (sameSubscriptions || useLastSubscriptions) {
            // If planned subscriptions are same as last, then either move to probe pending state
            // or move to probing state if enough time has passed.
            switch (this.rateProbeState) {
                case "Not Probing" /* kNotProbing */:
                    this.setProbeState("Probe Pending" /* kProbePending */);
                    break;
                case "Probe Pending" /* kProbePending */:
                    if (now - this.timeProbePendingStart > this.timeBeforeAllowProbeMs) {
                        if (this.setProbeState("Probing" /* kProbing */)) {
                            this.timeBeforeAllowSubscribeMs = 800;
                            this.upgradeToStream(chosenStreams, upgradeStream);
                            useLastSubscriptions = 0 /* kNewOptimal */;
                        }
                    }
                    break;
                default:
                    this.logger.info('bwe: MaybeOverrideOrProbe: Unhandled condition ' + this.rateProbeState);
                    break;
            }
        }
        else {
            // At this point the current expectation is to subscribe for a new set of
            // streams, and environment is not right for probing.  If target rate is within
            // the threshold of doing an upgrade, then do it and if we are lucky will be the
            // same set of streams as last and no new subscription will be done.
            this.setProbeState("Not Probing" /* kNotProbing */);
            if (targetDownlinkBitrate + minTargetBitrateDelta > chosenTotalBitrate + deltaToNextUpgrade) {
                this.logger.info('bwe: MaybeOverrideOrProbe: Upgrade since we are within threshold');
                this.upgradeToStream(chosenStreams, upgradeStream);
            }
        }
        return useLastSubscriptions;
    }
    // Utility function to find max rate of streams in current decision
    calculateSubscribeRate(streams, streamSet) {
        let subscribeRate = 0;
        for (const index of streamSet.array()) {
            const streamMatch = streams.find(stream => stream.streamId === index);
            if (streamMatch !== undefined) {
                subscribeRate += streamMatch.maxBitrateKbps;
            }
        }
        return subscribeRate;
    }
    handlePausedStreams(streamSelectionSet, pausedStreamIds, remoteInfos) {
        const remoteTiles = this.tileController.getAllRemoteVideoTiles();
        for (let i = 0; i < remoteTiles.length; i++) {
            const tile = remoteTiles[i];
            const state = tile.state();
            if (state.paused) {
                let j = remoteInfos.length;
                while (j--) {
                    if (remoteInfos[j].attendeeId === state.boundAttendeeId) {
                        this.logger.info('bwe: removed paused attendee ' +
                            state.boundAttendeeId +
                            ' streamId: ' +
                            remoteInfos[j].streamId);
                        pausedStreamIds.add(remoteInfos[j].streamId);
                        // Add the stream to the selection set to keep the tile around
                        if (this.subscribedReceiveSet.contain(remoteInfos[j].streamId)) {
                            streamSelectionSet.add(remoteInfos[j].streamId);
                        }
                        remoteInfos.splice(j, 1);
                    }
                }
            }
        }
    }
    chooseContent(chosenStreams, remoteInfos) {
        let contentRate = 0;
        for (const info of remoteInfos) {
            // For now always subscribe to content even if higher bandwidth then target
            if (info.attendeeId.endsWith(ContentShareConstants_1.default.Modality)) {
                chosenStreams.push(info);
                contentRate += info.avgBitrateKbps;
            }
        }
        return contentRate;
    }
    availStreamsSameAsLast(remoteInfos) {
        if (this.prevRemoteInfos === undefined || remoteInfos.length !== this.prevRemoteInfos.length) {
            return false;
        }
        for (const info of remoteInfos) {
            const infoMatch = this.prevRemoteInfos.find(prevInfo => prevInfo.groupId === info.groupId &&
                prevInfo.streamId === info.streamId &&
                prevInfo.maxBitrateKbps === info.maxBitrateKbps);
            if (infoMatch === undefined) {
                return false;
            }
        }
        return true;
    }
    chosenStreamsSameAsLast(chosenStreams, pausedStreamIds) {
        const lastStreams = this.optimalReceiveSet.array();
        for (const id of lastStreams) {
            if (!pausedStreamIds.contain(id) &&
                chosenStreams.findIndex(chosenStream => chosenStream.streamId === id) === -1) {
                return false;
            }
        }
        return true;
    }
    policyStateLogStr(remoteInfos, targetDownlinkBitrate) {
        const subscribedRate = this.calculateSubscribeRate(remoteInfos, this.optimalReceiveSet);
        const optimalReceiveSet = {
            targetBitrate: targetDownlinkBitrate,
            subscribedRate: subscribedRate,
            probeState: this.rateProbeState,
            startupPeriod: this.startupPeriod,
        };
        // Reduced remote info logging:
        let remoteInfoStr = `remoteInfos: [`;
        for (const info of remoteInfos) {
            remoteInfoStr += `{grpId:${info.groupId} strId:${info.streamId} maxBr:${info.maxBitrateKbps} avgBr:${info.avgBitrateKbps}}, `;
        }
        remoteInfoStr += `]`;
        const logString = `bwe: optimalReceiveSet ${JSON.stringify(optimalReceiveSet)}\n` +
            `bwe:   prev ${JSON.stringify(this.prevDownlinkStats)}\n` +
            `bwe:   now  ${JSON.stringify(this.downlinkStats)}\n` +
            `bwe:   ${remoteInfoStr}`;
        return logString;
    }
}
exports.default = VideoAdaptiveProbePolicy;
VideoAdaptiveProbePolicy.DEFAULT_BANDWIDTH_KBPS = 2800;
VideoAdaptiveProbePolicy.STARTUP_PERIOD_MS = 6000;
VideoAdaptiveProbePolicy.LARGE_RATE_CHANGE_TRIGGER_PERCENT = 20;
VideoAdaptiveProbePolicy.TARGET_RATE_CHANGE_TRIGGER_PERCENT = 15;
VideoAdaptiveProbePolicy.LOW_BITRATE_THRESHOLD_KBPS = 300;
VideoAdaptiveProbePolicy.MIN_TIME_BETWEEN_PROBE = 5000;
VideoAdaptiveProbePolicy.MIN_TIME_BETWEEN_SUBSCRIBE = 2000;
VideoAdaptiveProbePolicy.MAX_HOLD_MS_BEFORE_PROBE = 60000;
VideoAdaptiveProbePolicy.MAX_ALLOWED_PROBE_TIME_MS = 60000;
//# sourceMappingURL=VideoAdaptiveProbePolicy.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videoelementfactory/NoOpVideoElementFactory.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videoelementfactory/NoOpVideoElementFactory.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class NoOpVideoElementFactory {
    create() {
        const element = {
            clientWidth: 400,
            clientHeight: 300,
            width: 400,
            height: 300,
            videoWidth: 400,
            videoHeight: 300,
            style: {
                transform: '',
            },
            hasAttribute: () => {
                return false;
            },
            removeAttribute: () => { },
            setAttribute: () => { },
            srcObject: false,
            pause: () => { },
            play: () => {
                return Promise.resolve();
            },
        };
        // @ts-ignore
        return element;
    }
}
exports.default = NoOpVideoElementFactory;
//# sourceMappingURL=NoOpVideoElementFactory.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/CanvasVideoFrameBuffer.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/CanvasVideoFrameBuffer.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[CanvasVideoFrameBuffer]] implements [[VideoFrameBuffer]]. It internally holds an `HTMLCanvasElement`.
 */
class CanvasVideoFrameBuffer {
    constructor(canvas) {
        this.canvas = canvas;
        this.destroyed = false;
    }
    destroy() {
        this.canvas = null;
        this.destroyed = true;
    }
    asCanvasImageSource() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.destroyed) {
                return Promise.reject('canvas buffer is destroyed');
            }
            return Promise.resolve(this.canvas);
        });
    }
    asCanvasElement() {
        return this.canvas;
    }
}
exports.default = CanvasVideoFrameBuffer;
//# sourceMappingURL=CanvasVideoFrameBuffer.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/DefaultVideoFrameProcessorPipeline.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/DefaultVideoFrameProcessorPipeline.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const CanvasVideoFrameBuffer_1 = __webpack_require__(/*! ./CanvasVideoFrameBuffer */ "./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/CanvasVideoFrameBuffer.js");
const DEFAULT_FRAMERATE = 15;
/**
 * [[DefaultVideoFrameProcessorPipeline]] implements {@link VideoFrameProcessorPipeline}.
 * It constructs a buffer {@link CanvasVideoFrameBuffer} as source by default and invokes processor based on `framerate`.
 * The default output type is `MediaStream`.
 */
class DefaultVideoFrameProcessorPipeline {
    constructor(logger, stages) {
        this.logger = logger;
        this.stages = stages;
        this.fr = DEFAULT_FRAMERATE;
        // initialize with dummy inactive MediaStream to keep strict type
        this.outputMediaStream = new MediaStream();
        this.videoInput = document.createElement('video');
        this.canvasOutput = document.createElement('canvas');
        this.outputCtx = this.canvasOutput.getContext('2d');
        this.canvasInput = document.createElement('canvas');
        this.inputCtx = this.canvasInput.getContext('2d');
        this.inputVideoStream = null;
        this.sourceBuffers = [];
        this.destBuffers = [];
        this.observers = new Set();
        this.hasStarted = false;
        this.process = (_event) => __awaiter(this, void 0, void 0, function* () {
            if (!this.inputVideoStream) {
                return;
            }
            const processVideoStart = performance.now();
            // videoWidth is intrinsic video width
            if (this.videoInput.videoWidth) {
                if (this.canvasInput.width !== this.videoInput.videoWidth) {
                    this.canvasInput.width = this.videoInput.videoWidth;
                    this.canvasInput.height = this.videoInput.videoHeight;
                    this.sourceBuffers[0].height = this.canvasInput.height;
                    this.sourceBuffers[0].width = this.canvasInput.width;
                    this.sourceBuffers[0].framerate = this.framerate;
                }
                this.inputCtx.drawImage(this.videoInput, 0, 0);
            }
            // processes input buffers
            let buffers = [];
            buffers.push(this.sourceBuffers[0]);
            try {
                for (const proc of this.processors) {
                    buffers = yield proc.process(buffers);
                }
            }
            catch (_error) {
                this.forEachObserver(obs => {
                    if (obs.processingDidFailToStart) {
                        obs.processingDidFailToStart();
                    }
                });
                return;
            }
            this.destBuffers = buffers;
            let imageSource;
            try {
                imageSource = yield this.destBuffers[0].asCanvasImageSource();
            }
            catch (error) {
                if (this.inputVideoStream) {
                    this.logger.info('buffers are destroyed and pipeline could not start');
                    this.forEachObserver(obs => {
                        if (obs.processingDidFailToStart) {
                            obs.processingDidFailToStart();
                        }
                    });
                }
                return;
            }
            // finally draws the image
            const frameWidth = imageSource.width;
            const frameHeight = imageSource.height;
            if (frameWidth !== 0 && frameHeight !== 0) {
                if (this.canvasOutput.width !== frameWidth && this.canvasOutput.height !== frameHeight) {
                    this.canvasOutput.width = frameWidth;
                    this.canvasOutput.height = frameHeight;
                }
                this.outputCtx.drawImage(imageSource, 0, 0, frameWidth, frameHeight, 0, 0, frameWidth, frameHeight);
                if (!this.hasStarted) {
                    this.hasStarted = true;
                    this.forEachObserver(observer => {
                        if (observer.processingDidStart) {
                            observer.processingDidStart();
                        }
                    });
                }
            }
            // measures time
            const processVideoLatency = performance.now() - processVideoStart;
            const leave = (1000 * 2) / this.framerate - processVideoLatency; // half fps
            const nextFrameDelay = Math.max(0, 1000 / this.framerate - processVideoLatency);
            if (leave <= 0) {
                this.forEachObserver(obs => {
                    if (obs.processingLatencyTooHigh) {
                        obs.processingLatencyTooHigh(processVideoLatency);
                    }
                });
            }
            // TODO: use requestAnimationFrame which is more organic and allows browser to conserve resources by its choices.
            this.lastTimeOut = setTimeout(this.process, nextFrameDelay);
        });
    }
    destroy() {
        this.stop();
        if (this.stages) {
            for (const stage of this.stages) {
                stage.destroy();
            }
        }
    }
    get framerate() {
        return this.fr;
    }
    // A negative framerate will cause `captureStream` to throw `NotSupportedError`.
    // The setter prevents this by switching to the default framerate if less than 0.
    set framerate(value) {
        this.fr = value < 0 ? DEFAULT_FRAMERATE : value;
    }
    stop() {
        // empty stream, stop pipeline
        // null input media stream stops the pipeline.
        this.videoInput.removeEventListener('loadedmetadata', this.process);
        this.videoInput.srcObject = null;
        // clean input stream and buffers
        this.destroyInputMediaStreamAndBuffers();
        if (this.outputMediaStream) {
            for (const track of this.outputMediaStream.getVideoTracks()) {
                track.stop();
            }
        }
        // clear output stream
        this.outputMediaStream = new MediaStream();
        if (this.lastTimeOut) {
            clearTimeout(this.lastTimeOut);
            this.lastTimeOut = undefined;
        }
        if (this.hasStarted) {
            this.hasStarted = false;
            this.forEachObserver(observer => {
                if (observer.processingDidStop) {
                    observer.processingDidStop();
                }
            });
        }
    }
    addObserver(observer) {
        this.observers.add(observer);
    }
    removeObserver(observer) {
        this.observers.delete(observer);
    }
    getInputMediaStream() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.inputVideoStream;
        });
    }
    getActiveOutputMediaStream() {
        if (this.outputMediaStream && this.outputMediaStream.active) {
            return this.outputMediaStream;
        }
        return (this.outputMediaStream = this.canvasOutput.captureStream(this.framerate));
    }
    /**
     * `inputMediaStream` is by default used to construct one {@link CanvasVideoFrameBuffer}
     * The buffer will be fed into the first {@link VideoFrameProcessor}.
     */
    setInputMediaStream(inputMediaStream) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!inputMediaStream) {
                this.stop();
                return;
            }
            if (inputMediaStream.getVideoTracks().length === 0) {
                this.logger.error('No video tracks in input media stream, ignoring');
                return;
            }
            this.inputVideoStream = inputMediaStream;
            const settings = this.inputVideoStream.getVideoTracks()[0].getSettings();
            this.logger.info(`processing pipeline input stream settings ${settings}`);
            this.canvasOutput.width = settings.width;
            this.canvasOutput.height = settings.height;
            this.videoInput.addEventListener('loadedmetadata', this.process);
            this.videoInput.srcObject = this.inputVideoStream;
            // avoid iOS safari full screen video
            this.videoInput.setAttribute('playsinline', 'true');
            // create sources
            const canvasBuffer = new CanvasVideoFrameBuffer_1.default(this.canvasInput);
            this.sourceBuffers.push(canvasBuffer);
            this.videoInput.load();
            yield this.videoInput.play();
        });
    }
    set processors(stages) {
        this.stages = stages;
    }
    get processors() {
        return this.stages;
    }
    forEachObserver(observerFunc) {
        for (const observer of this.observers) {
            setTimeout(() => {
                observerFunc(observer);
            }, 0);
        }
    }
    destroyInputMediaStreamAndBuffers() {
        if (this.inputVideoStream) {
            for (const track of this.inputVideoStream.getTracks()) {
                track.stop();
            }
        }
        this.inputVideoStream = null;
        for (const buffer of this.sourceBuffers) {
            buffer.destroy();
        }
        this.sourceBuffers = [];
    }
}
exports.default = DefaultVideoFrameProcessorPipeline;
//# sourceMappingURL=DefaultVideoFrameProcessorPipeline.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/DefaultVideoTransformDevice.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/DefaultVideoTransformDevice.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
const DefaultVideoFrameProcessorPipeline_1 = __webpack_require__(/*! ./DefaultVideoFrameProcessorPipeline */ "./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/DefaultVideoFrameProcessorPipeline.js");
/**
 * [[DefaultVideoTransformDevice]] is an augmented [[VideoInputDevice]].
 * It transform the input {@link Device} with an array of {@link VideoFrameProcessor} to produce a `MediaStream`.
 */
class DefaultVideoTransformDevice {
    constructor(logger, device, processors, browserBehavior = new DefaultBrowserBehavior_1.default()) {
        this.logger = logger;
        this.device = device;
        this.processors = processors;
        this.browserBehavior = browserBehavior;
        this.observers = new Set();
        this.pipe = new DefaultVideoFrameProcessorPipeline_1.default(this.logger, this.processors);
        this.pipe.addObserver(this);
    }
    /**
     * getter for `outputMediaStream`.
     * `outputMediaStream` is returned by internal {@link VideoFrameProcessorPipeline}.
     * It is possible, but unlikely, that this accessor will throw.
     */
    get outputMediaStream() {
        return this.pipe.outputMediaStream;
    }
    /**
     * `chooseNewInnerDevice` preserves the inner pipeline and processing state and switches
     * the inner device. Since the pipeline and processors are shared with the new transform device
     * only one transform device can be used.
     */
    chooseNewInnerDevice(newDevice) {
        const newTransformDevice = new DefaultVideoTransformDevice(this.logger, newDevice, this.processors, this.browserBehavior);
        newTransformDevice.pipe = this.pipe;
        return newTransformDevice;
    }
    /**
     * Return the inner device as provided during construction.
     */
    getInnerDevice() {
        return this.device;
    }
    intrinsicDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            const trackConstraints = {};
            // Empty string and null.
            if (!this.device) {
                return trackConstraints;
            }
            // Device ID.
            if (typeof this.device === 'string') {
                if (this.browserBehavior.requiresNoExactMediaStreamConstraints()) {
                    trackConstraints.deviceId = this.device;
                }
                else {
                    trackConstraints.deviceId = { exact: this.device };
                }
                return trackConstraints;
            }
            if (this.device.id) {
                // Nothing we can do.
                return this.device;
            }
            // It's constraints.
            return Object.assign(Object.assign({}, this.device), trackConstraints);
        });
    }
    /**
     * Create {@link VideoFrameProcessorPipeline} if there is not a existing one and start video processors.
     * Returns output `MediaStream` produced by {@link VideoFrameProcessorPipeline}.
     */
    transformStream(mediaStream) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.pipe.setInputMediaStream(mediaStream);
            this.inputMediaStream = mediaStream;
            return this.pipe.getActiveOutputMediaStream();
        });
    }
    /**
     * onOutputStreamDisconnect is called when device controller wants to detach
     * the transform device. The default behavior is to stop the output
     * media stream and release the input the media stream. If the input media stream
     * is the provided device, it will not be released.
     */
    onOutputStreamDisconnect() {
        this.logger.info('DefaultVideoTransformDevice: detach stopping input media stream');
        const deviceIsMediaStream = this.device && this.device.id;
        // Stop processing but keep the pipe and processors
        this.pipe.stop();
        // Turn off the camera, unless device is a MediaStream
        if (!deviceIsMediaStream) {
            if (this.inputMediaStream) {
                for (const track of this.inputMediaStream.getVideoTracks()) {
                    track.stop();
                }
            }
        }
    }
    /**
     * Dispose of the inner workings of the transform device, including pipeline and processors.
     * `stop` can only be called when the transform device is not used by device controller anymore.
     * After `stop` is called, all transform devices which share the pipeline must be discarded.
     */
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.inputMediaStream) {
                for (const track of this.inputMediaStream.getVideoTracks()) {
                    track.stop();
                }
            }
            this.pipe.destroy();
            this.inputMediaStream = null;
        });
    }
    /**
     * Add an observer to receive notifications about lifecycle events.
     * See {@link DefaultVideoTransformDeviceObserver} for details.
     * If the observer has already been added, this method call has no effect.
     */
    addObserver(observer) {
        this.observers.add(observer);
    }
    /**
     * Remove an existing observer. If the observer has not been previously. this method call has no effect.
     */
    removeObserver(observer) {
        this.observers.add(observer);
    }
    processingDidStart() {
        this.logger.info('video transform device processing started');
        this.forEachObserver(observer => {
            if (observer.processingDidStart) {
                observer.processingDidStart();
            }
        });
    }
    processingLatencyTooHigh(latencyMs) {
        this.forEachObserver(observer => {
            if (observer.processingLatencyTooHigh) {
                observer.processingLatencyTooHigh(latencyMs);
            }
        });
    }
    processingDidFailToStart() {
        this.logger.info('video transform device processing failed to start');
        this.forEachObserver(observer => {
            if (observer.processingDidFailToStart) {
                observer.processingDidFailToStart();
            }
        });
    }
    processingDidStop() {
        this.logger.info('video transform device processing stopped');
        this.forEachObserver(observer => {
            if (observer.processingDidStop) {
                observer.processingDidStop();
            }
        });
    }
    forEachObserver(observerFunc) {
        for (const observer of this.observers) {
            setTimeout(() => {
                observerFunc(observer);
            }, 0);
        }
    }
}
exports.default = DefaultVideoTransformDevice;
//# sourceMappingURL=DefaultVideoTransformDevice.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/NoOpVideoFrameProcessor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videoframeprocessor/NoOpVideoFrameProcessor.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[NoOpVideoFrameProcessor]] implements [[VideoFrameProcessor]].
 * It's a no-op processor and input is passed to output directly.
 */
class NoOpVideoFrameProcessor {
    process(buffers) {
        return __awaiter(this, void 0, void 0, function* () {
            return buffers;
        });
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            return;
        });
    }
}
exports.default = NoOpVideoFrameProcessor;
//# sourceMappingURL=NoOpVideoFrameProcessor.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videosource/VideoSource.js":
/*!***************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videosource/VideoSource.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[VideoSource]] contains the information of a video source.
 */
class VideoSource {
}
exports.default = VideoSource;
//# sourceMappingURL=VideoSource.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videostreamidset/DefaultVideoStreamIdSet.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videostreamidset/DefaultVideoStreamIdSet.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[DefaultVideoStreamIdSet]] implements [[VideoStreamIdSet]].
 */
class DefaultVideoStreamIdSet {
    constructor(ids) {
        this.ids = new Set(ids);
    }
    add(streamId) {
        this.ids.add(streamId);
    }
    array() {
        const values = Array.from(this.ids.values());
        return values.sort((a, b) => a - b);
    }
    contain(streamId) {
        return this.ids.has(streamId);
    }
    empty() {
        return this.ids.size === 0;
    }
    size() {
        return this.ids.size;
    }
    equal(other) {
        if (!other) {
            return this.ids.size === 0;
        }
        const x = this.array();
        const y = other.array();
        if (x.length !== y.length) {
            return false;
        }
        for (let i = 0; i < x.length; i++) {
            if (x[i] !== y[i]) {
                return false;
            }
        }
        return true;
    }
    clone() {
        return new DefaultVideoStreamIdSet(this.array());
    }
    remove(streamId) {
        this.ids.delete(streamId);
    }
    toJSON() {
        return this.array();
    }
}
exports.default = DefaultVideoStreamIdSet;
//# sourceMappingURL=DefaultVideoStreamIdSet.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/DefaultVideoStreamIndex.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videostreamindex/DefaultVideoStreamIndex.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const DefaultVideoStreamIdSet_1 = __webpack_require__(/*! ../videostreamidset/DefaultVideoStreamIdSet */ "./node_modules/amazon-chime-sdk-js/build/videostreamidset/DefaultVideoStreamIdSet.js");
const VideoStreamDescription_1 = __webpack_require__(/*! ./VideoStreamDescription */ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/VideoStreamDescription.js");
/**
 * [[DefaultVideoStreamIndex]] implements [[VideoStreamIndex]] to facilitate video stream subscription
 * and includes query functions for stream id and attendee id.
 */
class DefaultVideoStreamIndex {
    constructor(logger) {
        this.logger = logger;
        this.currentIndex = null;
        this.indexForSubscribe = null;
        this.currentSubscribeAck = null;
        // These are based on the index at the time of the last Subscribe Ack
        this.subscribeTrackToStreamMap = null;
        this.subscribeStreamToAttendeeMap = null;
        this.subscribeStreamToExternalUserIdMap = null;
        this.subscribeSsrcToStreamMap = null;
        // These are based on the most up to date index
        this.streamToAttendeeMap = null;
        this.streamToExternalUserIdMap = null;
        this.videoStreamDescription = new VideoStreamDescription_1.default();
        this.videoStreamDescription.trackLabel = 'AmazonChimeExpressVideo';
        this.videoStreamDescription.streamId = 2;
        this.videoStreamDescription.groupId = 2;
    }
    localStreamDescriptions() {
        // localStreamDescriptions are used to construct IndexFrame
        // old behavior for single video is to have streamId and groupId trackLabel fixed as the follows
        return [this.videoStreamDescription.clone()];
    }
    remoteStreamDescriptions() {
        if (!this.currentIndex || !this.currentIndex.sources) {
            return [];
        }
        const streamInfos = [];
        this.currentIndex.sources.forEach(source => {
            const description = new VideoStreamDescription_1.default();
            description.attendeeId = source.attendeeId;
            description.groupId = source.groupId;
            description.streamId = source.streamId;
            description.maxBitrateKbps = source.maxBitrateKbps;
            description.avgBitrateKbps = Math.floor(source.avgBitrateBps / 1000);
            streamInfos.push(description);
        });
        return streamInfos;
    }
    integrateUplinkPolicyDecision(param) {
        if (!!param && param.length) {
            const encodingParam = param[0];
            this.videoStreamDescription.maxBitrateKbps = encodingParam.maxBitrate / 1000;
            this.videoStreamDescription.maxFrameRate = encodingParam.maxFramerate;
        }
    }
    integrateIndexFrame(indexFrame) {
        this.currentIndex = indexFrame;
        this.streamToAttendeeMap = null;
        this.streamToExternalUserIdMap = null;
    }
    subscribeFrameSent() {
        // This is called just as a Subscribe is being sent.  Save corresponding Index
        this.indexForSubscribe = this.currentIndex;
    }
    integrateSubscribeAckFrame(subscribeAck) {
        this.currentSubscribeAck = subscribeAck;
        // These are valid until the next Subscribe Ack even if the index is updated
        this.subscribeTrackToStreamMap = this.buildTrackToStreamMap(this.currentSubscribeAck);
        this.subscribeSsrcToStreamMap = this.buildSSRCToStreamMap(this.currentSubscribeAck);
        this.subscribeStreamToAttendeeMap = this.buildStreamToAttendeeMap(this.indexForSubscribe);
        this.subscribeStreamToExternalUserIdMap = this.buildStreamExternalUserIdMap(this.indexForSubscribe);
    }
    integrateBitratesFrame(bitrates) {
        if (this.currentIndex) {
            for (const bitrate of bitrates.bitrates) {
                const source = this.currentIndex.sources.find(source => source.streamId === bitrate.sourceStreamId);
                if (source !== undefined) {
                    source.avgBitrateBps = bitrate.avgBitrateBps;
                }
            }
        }
    }
    allStreams() {
        const set = new DefaultVideoStreamIdSet_1.default();
        if (this.currentIndex) {
            for (const source of this.currentIndex.sources) {
                set.add(source.streamId);
            }
        }
        return set;
    }
    allVideoSendingSourcesExcludingSelf(selfAttendeeId) {
        const videoSources = [];
        const attendeeSet = new Set();
        if (this.currentIndex) {
            if (this.currentIndex.sources && this.currentIndex.sources.length) {
                for (const stream of this.currentIndex.sources) {
                    const { attendeeId, externalUserId, mediaType } = stream;
                    if (attendeeId !== selfAttendeeId && mediaType === SignalingProtocol_js_1.SdkStreamMediaType.VIDEO) {
                        if (!attendeeSet.has(attendeeId)) {
                            videoSources.push({ attendee: { attendeeId, externalUserId } });
                            attendeeSet.add(attendeeId);
                        }
                    }
                }
            }
        }
        return videoSources;
    }
    streamSelectionUnderBandwidthConstraint(selfAttendeeId, largeTileAttendeeIds, smallTileAttendeeIds, bandwidthKbps) {
        const newAttendees = new Set();
        if (this.currentIndex) {
            for (const stream of this.currentIndex.sources) {
                if (stream.attendeeId === selfAttendeeId || stream.mediaType !== SignalingProtocol_js_1.SdkStreamMediaType.VIDEO) {
                    continue;
                }
                if (!largeTileAttendeeIds.has(stream.attendeeId) &&
                    !smallTileAttendeeIds.has(stream.attendeeId)) {
                    newAttendees.add(stream.attendeeId);
                }
            }
        }
        const attendeeToStreamDescriptorMap = this.buildAttendeeToSortedStreamDescriptorMapExcludingSelf(selfAttendeeId);
        const selectionMap = new Map();
        let usage = 0;
        attendeeToStreamDescriptorMap.forEach((streams, attendeeId) => {
            selectionMap.set(attendeeId, streams[0]);
            usage += streams[0].maxBitrateKbps;
        });
        usage = this.trySelectHighBitrateForAttendees(attendeeToStreamDescriptorMap, largeTileAttendeeIds, usage, bandwidthKbps, selectionMap);
        this.trySelectHighBitrateForAttendees(attendeeToStreamDescriptorMap, newAttendees, usage, bandwidthKbps, selectionMap);
        const streamSelectionSet = new DefaultVideoStreamIdSet_1.default();
        for (const source of selectionMap.values()) {
            streamSelectionSet.add(source.streamId);
        }
        return streamSelectionSet;
    }
    highestQualityStreamFromEachGroupExcludingSelf(selfAttendeeId) {
        const set = new DefaultVideoStreamIdSet_1.default();
        if (this.currentIndex) {
            const maxes = new Map();
            for (const source of this.currentIndex.sources) {
                if (source.attendeeId === selfAttendeeId || source.mediaType !== SignalingProtocol_js_1.SdkStreamMediaType.VIDEO) {
                    continue;
                }
                if (!maxes.has(source.groupId) ||
                    source.maxBitrateKbps > maxes.get(source.groupId).maxBitrateKbps) {
                    maxes.set(source.groupId, source);
                }
            }
            for (const source of maxes.values()) {
                set.add(source.streamId);
            }
        }
        return set;
    }
    numberOfVideoPublishingParticipantsExcludingSelf(selfAttendeeId) {
        return this.highestQualityStreamFromEachGroupExcludingSelf(selfAttendeeId).array().length;
    }
    numberOfParticipants() {
        if (!!this.currentIndex.numParticipants) {
            return this.currentIndex.numParticipants;
        }
        return -1;
    }
    attendeeIdForTrack(trackId) {
        const streamId = this.streamIdForTrack(trackId);
        if (streamId === undefined || !this.subscribeStreamToAttendeeMap) {
            this.logger.warn(`no attendee found for track ${trackId}`);
            return '';
        }
        const attendeeId = this.subscribeStreamToAttendeeMap.get(streamId);
        if (!attendeeId) {
            this.logger.info(`track ${trackId} (stream ${streamId}) does not correspond to a known attendee`);
            return '';
        }
        return attendeeId;
    }
    externalUserIdForTrack(trackId) {
        const streamId = this.streamIdForTrack(trackId);
        if (streamId === undefined || !this.subscribeStreamToExternalUserIdMap) {
            this.logger.warn(`no external user id found for track ${trackId}`);
            return '';
        }
        const externalUserId = this.subscribeStreamToExternalUserIdMap.get(streamId);
        if (!externalUserId) {
            this.logger.info(`track ${trackId} (stream ${streamId}) does not correspond to a known externalUserId`);
            return '';
        }
        return externalUserId;
    }
    attendeeIdForStreamId(streamId) {
        if (!this.streamToAttendeeMap) {
            if (this.currentIndex) {
                this.streamToAttendeeMap = this.buildStreamToAttendeeMap(this.currentIndex);
            }
            else {
                return '';
            }
        }
        const attendeeId = this.streamToAttendeeMap.get(streamId);
        if (!attendeeId) {
            this.logger.info(`stream ${streamId}) does not correspond to a known attendee`);
            return '';
        }
        return attendeeId;
    }
    groupIdForStreamId(streamId) {
        for (const source of this.currentIndex.sources) {
            if (source.streamId === streamId) {
                return source.groupId;
            }
        }
        // If wasn't found in current index, then it could be in index used in last subscribe
        if (!!this.indexForSubscribe) {
            for (const source of this.indexForSubscribe.sources) {
                if (source.streamId === streamId) {
                    return source.groupId;
                }
            }
        }
        return undefined;
    }
    StreamIdsInSameGroup(streamId1, streamId2) {
        if (this.groupIdForStreamId(streamId1) === this.groupIdForStreamId(streamId2)) {
            return true;
        }
        return false;
    }
    streamIdForTrack(trackId) {
        if (!this.subscribeTrackToStreamMap) {
            return undefined;
        }
        return this.subscribeTrackToStreamMap.get(trackId);
    }
    streamIdForSSRC(ssrcId) {
        if (!this.subscribeSsrcToStreamMap) {
            return undefined;
        }
        return this.subscribeSsrcToStreamMap.get(ssrcId);
    }
    streamsPausedAtSource() {
        const paused = new DefaultVideoStreamIdSet_1.default();
        if (this.currentIndex) {
            for (const streamId of this.currentIndex.pausedAtSourceIds) {
                paused.add(streamId);
            }
        }
        return paused;
    }
    buildTrackToStreamMap(subscribeAck) {
        const map = new Map();
        this.logger.debug(() => `trackMap ${JSON.stringify(subscribeAck.tracks)}`);
        for (const trackMapping of subscribeAck.tracks) {
            if (trackMapping.trackLabel.length > 0 && trackMapping.streamId > 0) {
                map.set(trackMapping.trackLabel, trackMapping.streamId);
            }
        }
        return map;
    }
    buildSSRCToStreamMap(subscribeAck) {
        const map = new Map();
        this.logger.debug(() => `ssrcMap ${JSON.stringify(subscribeAck.tracks)}`);
        for (const trackMapping of subscribeAck.tracks) {
            if (trackMapping.trackLabel.length > 0 && trackMapping.streamId > 0) {
                map.set(trackMapping.ssrc, trackMapping.streamId);
            }
        }
        return map;
    }
    buildStreamToAttendeeMap(indexFrame) {
        const map = new Map();
        if (indexFrame) {
            for (const source of indexFrame.sources) {
                map.set(source.streamId, source.attendeeId);
            }
        }
        return map;
    }
    buildStreamExternalUserIdMap(indexFrame) {
        const map = new Map();
        if (indexFrame) {
            for (const source of indexFrame.sources) {
                if (!!source.externalUserId) {
                    map.set(source.streamId, source.externalUserId);
                }
            }
        }
        return map;
    }
    trySelectHighBitrateForAttendees(attendeeToStreamDescriptorMap, highAttendees, currentUsage, bandwidthKbps, currentSelectionRef) {
        for (const attendeeId of highAttendees) {
            if (currentUsage >= bandwidthKbps) {
                break;
            }
            if (attendeeToStreamDescriptorMap.has(attendeeId)) {
                const streams = attendeeToStreamDescriptorMap.get(attendeeId);
                for (const l of streams.reverse()) {
                    if (currentUsage - currentSelectionRef.get(attendeeId).maxBitrateKbps + l.maxBitrateKbps <
                        bandwidthKbps) {
                        currentUsage =
                            currentUsage - currentSelectionRef.get(attendeeId).maxBitrateKbps + l.maxBitrateKbps;
                        currentSelectionRef.set(attendeeId, l);
                        break;
                    }
                }
            }
        }
        return currentUsage;
    }
    buildAttendeeToSortedStreamDescriptorMapExcludingSelf(selfAttendeeId) {
        const attendeeToStreamDescriptorMap = new Map();
        if (this.currentIndex) {
            for (const source of this.currentIndex.sources) {
                if (source.attendeeId === selfAttendeeId || source.mediaType !== SignalingProtocol_js_1.SdkStreamMediaType.VIDEO) {
                    continue;
                }
                if (attendeeToStreamDescriptorMap.has(source.attendeeId)) {
                    attendeeToStreamDescriptorMap.get(source.attendeeId).push(source);
                }
                else {
                    attendeeToStreamDescriptorMap.set(source.attendeeId, [source]);
                }
            }
        }
        attendeeToStreamDescriptorMap.forEach((streams, _attendeeId) => {
            streams.sort((stream1, stream2) => {
                if (stream1.maxBitrateKbps > stream2.maxBitrateKbps) {
                    return 1;
                }
                else if (stream1.maxBitrateKbps < stream2.maxBitrateKbps) {
                    return -1;
                }
                else {
                    return 0;
                }
            });
        });
        return attendeeToStreamDescriptorMap;
    }
}
exports.default = DefaultVideoStreamIndex;
//# sourceMappingURL=DefaultVideoStreamIndex.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/SimulcastVideoStreamIndex.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videostreamindex/SimulcastVideoStreamIndex.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
const DefaultVideoStreamIndex_1 = __webpack_require__(/*! ./DefaultVideoStreamIndex */ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/DefaultVideoStreamIndex.js");
const VideoStreamDescription_1 = __webpack_require__(/*! ./VideoStreamDescription */ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/VideoStreamDescription.js");
/**
 * [[SimulcastTransceiverController]] implements [[VideoStreamIndex]] to facilitate video stream
 * subscription and includes query functions for stream id and attendee id.
 */
class SimulcastVideoStreamIndex extends DefaultVideoStreamIndex_1.default {
    constructor(logger) {
        super(logger);
        this.streamIdToBitrateKbpsMap = new Map();
        this._localStreamInfos = [];
        this._lastBitRateMsgTime = Date.now();
    }
    localStreamDescriptions() {
        const clonedDescriptions = [];
        this._localStreamInfos.forEach(desc => {
            clonedDescriptions.push(desc.clone());
        });
        return clonedDescriptions;
    }
    integrateUplinkPolicyDecision(encodingParams) {
        // Reuse local streams (that might already have stream IDs allocated) until
        // there are no more and then add as many new local streams as needed
        let hasStreamsToReuse = true;
        let localStreamIndex = 0;
        for (let i = 0; i < encodingParams.length; i++) {
            const targetMaxBitrateKbps = encodingParams[i].maxBitrate / 1000;
            const targetMaxFrameRate = encodingParams[i].maxFramerate;
            if (!hasStreamsToReuse || i === this._localStreamInfos.length) {
                hasStreamsToReuse = false;
                const newInfo = new VideoStreamDescription_1.default();
                newInfo.maxBitrateKbps = targetMaxBitrateKbps;
                newInfo.maxFrameRate = targetMaxFrameRate;
                newInfo.disabledByUplinkPolicy = targetMaxBitrateKbps === 0 ? true : false;
                if (targetMaxBitrateKbps !== 0) {
                    newInfo.timeEnabled = Date.now();
                }
                this._localStreamInfos.push(newInfo);
                localStreamIndex++;
                continue;
            }
            if (this._localStreamInfos[localStreamIndex].maxBitrateKbps === 0 &&
                targetMaxBitrateKbps > 0) {
                this._localStreamInfos[localStreamIndex].timeEnabled = Date.now();
            }
            this._localStreamInfos[localStreamIndex].maxBitrateKbps = targetMaxBitrateKbps;
            this._localStreamInfos[localStreamIndex].maxFrameRate = targetMaxFrameRate;
            this._localStreamInfos[localStreamIndex].disabledByUplinkPolicy =
                targetMaxBitrateKbps === 0 ? true : false;
            if (this._localStreamInfos[localStreamIndex].disabledByUplinkPolicy === true) {
                this._localStreamInfos[localStreamIndex].disabledByWebRTC = false;
            }
            localStreamIndex++;
        }
        if (hasStreamsToReuse) {
            // splice is zero-based, remove stream starting from localStreamIndex
            this._localStreamInfos.splice(localStreamIndex);
        }
    }
    integrateBitratesFrame(bitrateFrame) {
        super.integrateBitratesFrame(bitrateFrame);
        const stillSending = new Set();
        const existingSet = new Set(this.streamIdToBitrateKbpsMap.keys());
        for (const bitrateMsg of bitrateFrame.bitrates) {
            stillSending.add(bitrateMsg.sourceStreamId);
            this.streamIdToBitrateKbpsMap.set(bitrateMsg.sourceStreamId, Math.trunc(bitrateMsg.avgBitrateBps / 1000));
        }
        for (const id of existingSet) {
            if (!stillSending.has(id)) {
                const avgBitrateBps = this.streamIdToBitrateKbpsMap.get(id);
                if (avgBitrateBps === SimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE) {
                    this.streamIdToBitrateKbpsMap.set(id, SimulcastVideoStreamIndex.RECENTLY_INACTIVE_STREAM_BITRATE);
                }
                else {
                    this.streamIdToBitrateKbpsMap.set(id, SimulcastVideoStreamIndex.NOT_SENDING_STREAM_BITRATE);
                }
            }
        }
        for (let i = 0; i < this._localStreamInfos.length; i++) {
            this._localStreamInfos[i].disabledByWebRTC = false;
            const streamId = this._localStreamInfos[i].streamId;
            if (this._localStreamInfos[i].disabledByUplinkPolicy) {
                continue;
            }
            if (this.streamIdToBitrateKbpsMap.has(streamId)) {
                const avgBitrateKbps = this.streamIdToBitrateKbpsMap.get(streamId);
                if (avgBitrateKbps === SimulcastVideoStreamIndex.NOT_SENDING_STREAM_BITRATE &&
                    this._lastBitRateMsgTime - this._localStreamInfos[i].timeEnabled >
                        SimulcastVideoStreamIndex.BitratesMsgFrequencyMs) {
                    this._localStreamInfos[i].disabledByWebRTC = true;
                }
            }
            else {
                // Do not flag as disabled if it was recently enabled
                if (this._lastBitRateMsgTime - this._localStreamInfos[i].timeEnabled >
                    SimulcastVideoStreamIndex.BitratesMsgFrequencyMs) {
                    this._localStreamInfos[i].disabledByWebRTC = true;
                }
            }
        }
        this._lastBitRateMsgTime = Date.now();
        this.logLocalStreamDescriptions();
    }
    logLocalStreamDescriptions() {
        let msg = '';
        for (const desc of this._localStreamInfos) {
            msg += `streamId=${desc.streamId} maxBitrate=${desc.maxBitrateKbps} disabledByWebRTC=${desc.disabledByWebRTC} disabledByUplink=${desc.disabledByUplinkPolicy}\n`;
        }
        this.logger.debug(() => {
            return msg;
        });
    }
    integrateIndexFrame(indexFrame) {
        super.integrateIndexFrame(indexFrame);
        const newIndexStreamIdSet = new Set();
        const existingSet = new Set(this.streamIdToBitrateKbpsMap.keys());
        for (const stream of this.currentIndex.sources) {
            if (stream.mediaType !== SignalingProtocol_js_1.SdkStreamMediaType.VIDEO) {
                continue;
            }
            newIndexStreamIdSet.add(stream.streamId);
            if (!this.streamIdToBitrateKbpsMap.has(stream.streamId)) {
                this.streamIdToBitrateKbpsMap.set(stream.streamId, SimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE);
            }
        }
        for (const id of existingSet) {
            if (!newIndexStreamIdSet.has(id)) {
                this.streamIdToBitrateKbpsMap.delete(id);
            }
        }
    }
    integrateSubscribeAckFrame(subscribeAck) {
        super.integrateSubscribeAckFrame(subscribeAck);
        if (!subscribeAck.allocations || subscribeAck.allocations === undefined) {
            return;
        }
        let localStreamStartIndex = 0;
        for (const allocation of subscribeAck.allocations) {
            // track label is what we offered to the server
            if (this._localStreamInfos.length < localStreamStartIndex + 1) {
                this.logger.info('simulcast: allocation has more than number of local streams');
                break;
            }
            this._localStreamInfos[localStreamStartIndex].groupId = allocation.groupId;
            this._localStreamInfos[localStreamStartIndex].streamId = allocation.streamId;
            if (!this.streamIdToBitrateKbpsMap.has(allocation.streamId)) {
                this.streamIdToBitrateKbpsMap.set(allocation.streamId, SimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE);
            }
            localStreamStartIndex++;
        }
    }
}
exports.default = SimulcastVideoStreamIndex;
// First time when the bitrate of a stream id is missing from bitrate message, mark it as UNSEEN
SimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE = -2;
// Second time when the bitrate is missing, mark it as recently inactive
SimulcastVideoStreamIndex.RECENTLY_INACTIVE_STREAM_BITRATE = -1;
// Third time when bitrate is missing, mark it as not sending
SimulcastVideoStreamIndex.NOT_SENDING_STREAM_BITRATE = 0;
SimulcastVideoStreamIndex.BitratesMsgFrequencyMs = 4000;
//# sourceMappingURL=SimulcastVideoStreamIndex.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videostreamindex/VideoStreamDescription.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videostreamindex/VideoStreamDescription.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const SignalingProtocol_js_1 = __webpack_require__(/*! ../signalingprotocol/SignalingProtocol.js */ "./node_modules/amazon-chime-sdk-js/build/signalingprotocol/SignalingProtocol.js");
class VideoStreamDescription {
    constructor(attendeeId, groupId, streamId, maxBitrateKbps, avgBitrateKbps) {
        this.attendeeId = '';
        this.groupId = 0;
        this.streamId = 0;
        this.ssrc = 0;
        this.trackLabel = '';
        this.maxBitrateKbps = 0;
        // average bitrate is updated every 2 seconds via bitrates messages
        this.avgBitrateKbps = 0;
        this.maxFrameRate = 0;
        this.timeEnabled = 0;
        this.disabledByWebRTC = false;
        this.disabledByUplinkPolicy = false;
        this.attendeeId = attendeeId;
        this.groupId = groupId;
        this.streamId = streamId;
        this.maxBitrateKbps = maxBitrateKbps;
        this.avgBitrateKbps = avgBitrateKbps;
    }
    clone() {
        const newInfo = new VideoStreamDescription();
        newInfo.attendeeId = this.attendeeId;
        newInfo.groupId = this.groupId;
        newInfo.streamId = this.streamId;
        newInfo.ssrc = this.ssrc;
        newInfo.trackLabel = this.trackLabel;
        newInfo.maxBitrateKbps = this.maxBitrateKbps;
        newInfo.avgBitrateKbps = this.avgBitrateKbps;
        newInfo.maxFrameRate = this.maxFrameRate;
        newInfo.timeEnabled = this.timeEnabled;
        newInfo.disabledByWebRTC = this.disabledByWebRTC;
        newInfo.disabledByUplinkPolicy = this.disabledByUplinkPolicy;
        return newInfo;
    }
    toStreamDescriptor() {
        const descriptor = SignalingProtocol_js_1.SdkStreamDescriptor.create();
        descriptor.mediaType = SignalingProtocol_js_1.SdkStreamMediaType.VIDEO;
        descriptor.trackLabel = this.trackLabel;
        descriptor.attendeeId = this.attendeeId;
        descriptor.streamId = this.streamId;
        descriptor.groupId = this.groupId;
        descriptor.framerate = this.maxFrameRate;
        descriptor.maxBitrateKbps =
            this.disabledByUplinkPolicy || this.disabledByWebRTC ? 0 : this.maxBitrateKbps;
        descriptor.avgBitrateBps = this.avgBitrateKbps;
        return descriptor;
    }
}
exports.default = VideoStreamDescription;
//# sourceMappingURL=VideoStreamDescription.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videotile/DefaultVideoTile.js":
/*!******************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videotile/DefaultVideoTile.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
const DefaultModality_1 = __webpack_require__(/*! ../modality/DefaultModality */ "./node_modules/amazon-chime-sdk-js/build/modality/DefaultModality.js");
const AsyncScheduler_1 = __webpack_require__(/*! ../scheduler/AsyncScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js");
const VideoTileState_1 = __webpack_require__(/*! ./VideoTileState */ "./node_modules/amazon-chime-sdk-js/build/videotile/VideoTileState.js");
class DefaultVideoTile {
    constructor(tileId, localTile, tileController, devicePixelRatioMonitor) {
        this.tileController = tileController;
        this.devicePixelRatioMonitor = devicePixelRatioMonitor;
        this.tileState = new VideoTileState_1.default();
        this.tileState.tileId = tileId;
        this.tileState.localTile = localTile;
        this.devicePixelRatioMonitor.registerObserver(this);
    }
    static connectVideoStreamToVideoElement(videoStream, videoElement, localTile) {
        const transform = localTile && videoStream.getVideoTracks()[0].getSettings().facingMode !== 'environment'
            ? 'rotateY(180deg)'
            : '';
        DefaultVideoTile.setVideoElementFlag(videoElement, 'disablePictureInPicture', localTile);
        DefaultVideoTile.setVideoElementFlag(videoElement, 'disableRemotePlayback', localTile);
        if (videoElement.style.transform !== transform) {
            videoElement.style.transform = transform;
        }
        if (videoElement.hasAttribute('controls')) {
            videoElement.removeAttribute('controls');
        }
        if (!videoElement.hasAttribute('autoplay')) {
            videoElement.setAttribute('autoplay', 'true');
        }
        // playsinline is needed for video to play in iPhone in non-fullscreen mode.
        // See https://developer.apple.com/documentation/webkit/safari_tools_and_features/delivering_video_content_for_safari#3030250
        if (!videoElement.hasAttribute('playsinline')) {
            videoElement.setAttribute('playsinline', 'true');
        }
        // Note that setting the *attribute* 'muted' affects whether the element
        // is muted *by default* (`.defaultMuted`), not whether it is currently muted (`.muted`).
        // https://html.spec.whatwg.org/#dom-media-defaultmuted
        if (!videoElement.hasAttribute('muted')) {
            // The default value…
            videoElement.setAttribute('muted', 'true');
            // … and the value right now.
            videoElement.muted = true;
        }
        if (videoElement.srcObject !== videoStream) {
            videoElement.srcObject = videoStream;
        }
        if (new DefaultBrowserBehavior_1.default().requiresVideoElementWorkaround()) {
            new AsyncScheduler_1.default().start(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    yield videoElement.play();
                }
                catch (error) { }
            }));
        }
    }
    static disconnectVideoStreamFromVideoElement(videoElement, dueToPause) {
        if (!videoElement) {
            return;
        }
        if (dueToPause) {
            videoElement.srcObject = null;
            videoElement.style.transform = '';
        }
        else {
            if (!videoElement.srcObject) {
                return;
            }
            videoElement.pause();
            videoElement.style.transform = '';
            DefaultVideoTile.setVideoElementFlag(videoElement, 'disablePictureInPicture', false);
            DefaultVideoTile.setVideoElementFlag(videoElement, 'disableRemotePlayback', false);
            // We must remove all the tracks from the MediaStream before
            // clearing the `srcObject` to prevent Safari from crashing.
            const mediaStream = videoElement.srcObject;
            const tracks = mediaStream.getTracks();
            for (const track of tracks) {
                track.stop();
                mediaStream.removeTrack(track);
            }
            // Need to yield the message loop before clearing `srcObject` to
            // prevent Safari from crashing.
            if (new DefaultBrowserBehavior_1.default().requiresVideoElementWorkaround()) {
                new AsyncScheduler_1.default().start(() => {
                    videoElement.srcObject = null;
                });
            }
            else {
                videoElement.srcObject = null;
            }
        }
    }
    destroy() {
        this.devicePixelRatioMonitor.removeObserver(this);
        if (this.tileState.boundVideoElement &&
            this.tileState.boundVideoElement.srcObject === this.tileState.boundVideoStream) {
            DefaultVideoTile.disconnectVideoStreamFromVideoElement(this.tileState.boundVideoElement, false);
        }
        this.tileState = new VideoTileState_1.default();
    }
    devicePixelRatioChanged(newDevicePixelRatio) {
        this.tileState.devicePixelRatio = newDevicePixelRatio;
        this.sendTileStateUpdate();
    }
    id() {
        return this.tileState.tileId;
    }
    state() {
        return this.tileState.clone();
    }
    stateRef() {
        return this.tileState;
    }
    bindVideoStream(attendeeId, localTile, mediaStream, contentWidth, contentHeight, streamId, externalUserId) {
        let tileUpdated = false;
        if (this.tileState.boundAttendeeId !== attendeeId) {
            this.tileState.boundAttendeeId = attendeeId;
            if (new DefaultModality_1.default(attendeeId).hasModality(DefaultModality_1.default.MODALITY_CONTENT)) {
                this.tileState.isContent = true;
            }
            tileUpdated = true;
        }
        if (this.tileState.boundExternalUserId !== externalUserId) {
            this.tileState.boundExternalUserId = externalUserId;
            tileUpdated = true;
        }
        if (this.tileState.localTile !== localTile) {
            this.tileState.localTile = localTile;
            tileUpdated = true;
        }
        if (this.tileState.boundVideoStream !== mediaStream) {
            this.tileState.boundVideoStream = mediaStream;
            tileUpdated = true;
        }
        if (this.tileState.videoStreamContentWidth !== contentWidth) {
            this.tileState.videoStreamContentWidth = contentWidth;
            tileUpdated = true;
        }
        if (this.tileState.videoStreamContentHeight !== contentHeight) {
            this.tileState.videoStreamContentHeight = contentHeight;
            tileUpdated = true;
        }
        if (this.tileState.streamId !== streamId) {
            this.tileState.streamId = streamId;
            tileUpdated = true;
        }
        if (tileUpdated) {
            this.sendTileStateUpdate();
        }
    }
    bindVideoElement(videoElement) {
        let tileUpdated = false;
        if (this.tileState.boundVideoElement !== videoElement) {
            this.tileState.boundVideoElement = videoElement;
            tileUpdated = true;
        }
        if (this.tileState.boundVideoElement !== null) {
            if (this.tileState.videoElementCSSWidthPixels !== videoElement.clientWidth) {
                this.tileState.videoElementCSSWidthPixels = videoElement.clientWidth;
                tileUpdated = true;
            }
            if (this.tileState.videoElementCSSHeightPixels !== videoElement.clientHeight) {
                this.tileState.videoElementCSSHeightPixels = videoElement.clientHeight;
                tileUpdated = true;
            }
        }
        else {
            this.tileState.videoElementCSSWidthPixels = null;
            this.tileState.videoElementCSSHeightPixels = null;
        }
        if (tileUpdated) {
            this.sendTileStateUpdate();
        }
    }
    pause() {
        if (!this.tileState.paused) {
            this.tileState.paused = true;
            this.sendTileStateUpdate();
        }
    }
    unpause() {
        if (this.tileState.paused) {
            this.tileState.paused = false;
            this.sendTileStateUpdate();
        }
    }
    markPoorConnection() {
        if (this.tileState.poorConnection) {
            return false;
        }
        this.tileState.poorConnection = true;
        this.sendTileStateUpdate();
        return true;
    }
    unmarkPoorConnection() {
        if (!this.tileState.poorConnection) {
            return false;
        }
        this.tileState.poorConnection = false;
        this.sendTileStateUpdate();
        return true;
    }
    capture() {
        if (!this.tileState.active) {
            return null;
        }
        const canvas = document.createElement('canvas');
        const video = this.tileState.boundVideoElement;
        canvas.width = video.videoWidth || video.width;
        canvas.height = video.videoHeight || video.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        return ctx.getImageData(0, 0, canvas.width, canvas.height);
    }
    sendTileStateUpdate() {
        this.updateActiveState();
        this.updateVideoStreamOnVideoElement();
        this.updateVideoElementPhysicalPixels();
        this.tileController.sendTileStateUpdate(this.state());
    }
    updateActiveState() {
        this.tileState.active = !!(!this.tileState.paused &&
            !this.tileState.poorConnection &&
            this.tileState.boundAttendeeId &&
            this.tileState.boundVideoElement &&
            this.tileState.boundVideoStream);
    }
    updateVideoElementPhysicalPixels() {
        if (typeof this.tileState.videoElementCSSWidthPixels === 'number' &&
            typeof this.tileState.videoElementCSSHeightPixels === 'number') {
            this.tileState.videoElementPhysicalWidthPixels =
                this.tileState.devicePixelRatio * this.tileState.videoElementCSSWidthPixels;
            this.tileState.videoElementPhysicalHeightPixels =
                this.tileState.devicePixelRatio * this.tileState.videoElementCSSHeightPixels;
        }
        else {
            this.tileState.videoElementPhysicalWidthPixels = null;
            this.tileState.videoElementPhysicalHeightPixels = null;
        }
    }
    updateVideoStreamOnVideoElement() {
        if (this.tileState.active) {
            DefaultVideoTile.connectVideoStreamToVideoElement(this.tileState.boundVideoStream, this.tileState.boundVideoElement, this.tileState.localTile);
        }
        else {
            DefaultVideoTile.disconnectVideoStreamFromVideoElement(this.tileState.boundVideoElement, this.tileState.paused);
        }
    }
    static setVideoElementFlag(videoElement, flag, value) {
        if (flag in videoElement) {
            // @ts-ignore
            videoElement[flag] = value;
        }
    }
}
exports.default = DefaultVideoTile;
//# sourceMappingURL=DefaultVideoTile.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videotile/VideoTileState.js":
/*!****************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videotile/VideoTileState.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * [[VideoTileState]] encapsulates the state of a [[VideoTile]]
 */
class VideoTileState {
    constructor() {
        /**
         * The unique identifier for the [[VideoTile]] managed by [[VideoTileController]]. Each attendee can have at most one tileId.
         */
        this.tileId = null;
        /**
         * Indication of whether tile is associated with local video.
         */
        this.localTile = false;
        /**
         * Indication of whether the tile associated with the local attendee has started to play.
         */
        this.localTileStarted = false;
        /**
         * Indication of whether the tile has content-sharing video.
         */
        this.isContent = false;
        /**
         * Indication of whether the tile has active video stream.
         */
        this.active = false;
        /**
         * Indication of whether the tile has paused video stream.
         */
        this.paused = false;
        /**
         * Indication of whether the remote video is paused at publishing attendee. This field is not supported.
         */
        this.poorConnection = false;
        /**
         * The attendee id associated with the [[VideoTile]].
         */
        this.boundAttendeeId = null;
        /**
         * The user id associated with the [[VideoTile]].
         */
        this.boundExternalUserId = null;
        /**
         * The video stream bound with the [[VideoTile]].
         */
        this.boundVideoStream = null;
        /**
         * The HTMLVideoElement bound with the [[VideoTile]].
         */
        this.boundVideoElement = null;
        /**
         * The nameplate for the [[VideoTile]]. SDK users should use boundExternalUserId for user id instead of this field.
         */
        this.nameplate = null;
        /**
         * The intrinsic width of the video stream upon binding with the [[VideoTile]].
         * Video stream intrinsic width could change and developers should use HTMLVideoElement listener for actual intrinsic width.
         */
        this.videoStreamContentWidth = null;
        /**
         * The intrinsic height of the video stream upon binding with the [[VideoTile]]
         * Video stream intrinsic height could change and developers should use HTMLVideoElement listener for actual intrinsic height.
         */
        this.videoStreamContentHeight = null;
        /**
         * The CSS width in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].
         */
        this.videoElementCSSWidthPixels = null;
        /**
         * The CSS height in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].
         */
        this.videoElementCSSHeightPixels = null;
        /**
         * The device pixel ratio of the current display monitor.
         */
        this.devicePixelRatio = 0;
        /**
         * The physical width in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].
         */
        this.videoElementPhysicalWidthPixels = null;
        /**
         * The physical height in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].
         */
        this.videoElementPhysicalHeightPixels = null;
        /**
         * The unique identifier published by server to associate with bound video stream. It is defined in [[SignalingProtocol.proto]].
         * Developers should avoid using this field directly.
         */
        this.streamId = null;
    }
    clone() {
        const cloned = new VideoTileState();
        cloned.tileId = this.tileId;
        cloned.localTile = this.localTile;
        cloned.isContent = this.isContent;
        cloned.active = this.active;
        cloned.paused = this.paused;
        cloned.poorConnection = this.poorConnection;
        cloned.boundAttendeeId = this.boundAttendeeId;
        cloned.boundExternalUserId = this.boundExternalUserId;
        cloned.boundVideoStream = this.boundVideoStream;
        cloned.boundVideoElement = this.boundVideoElement;
        cloned.nameplate = this.nameplate;
        cloned.videoStreamContentWidth = this.videoStreamContentWidth;
        cloned.videoStreamContentHeight = this.videoStreamContentHeight;
        cloned.videoElementCSSWidthPixels = this.videoElementCSSWidthPixels;
        cloned.videoElementCSSHeightPixels = this.videoElementCSSHeightPixels;
        cloned.devicePixelRatio = this.devicePixelRatio;
        cloned.videoElementPhysicalWidthPixels = this.videoElementPhysicalWidthPixels;
        cloned.videoElementPhysicalHeightPixels = this.videoElementPhysicalHeightPixels;
        cloned.streamId = this.streamId;
        return cloned;
    }
}
exports.default = VideoTileState;
//# sourceMappingURL=VideoTileState.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videotilecontroller/DefaultVideoTileController.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videotilecontroller/DefaultVideoTileController.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultDevicePixelRatioMonitor_1 = __webpack_require__(/*! ../devicepixelratiomonitor/DefaultDevicePixelRatioMonitor */ "./node_modules/amazon-chime-sdk-js/build/devicepixelratiomonitor/DefaultDevicePixelRatioMonitor.js");
const DevicePixelRatioWindowSource_1 = __webpack_require__(/*! ../devicepixelratiosource/DevicePixelRatioWindowSource */ "./node_modules/amazon-chime-sdk-js/build/devicepixelratiosource/DevicePixelRatioWindowSource.js");
const Maybe_1 = __webpack_require__(/*! ../maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
class DefaultVideoTileController {
    constructor(tileFactory, audioVideoController, logger) {
        this.tileFactory = tileFactory;
        this.audioVideoController = audioVideoController;
        this.logger = logger;
        this.tileMap = new Map();
        this.nextTileId = 1;
        this.currentLocalTile = null;
        this.currentPausedTilesByIds = new Set();
        this.devicePixelRatioMonitor = new DefaultDevicePixelRatioMonitor_1.default(new DevicePixelRatioWindowSource_1.default(), logger);
    }
    bindVideoElement(tileId, videoElement) {
        const tile = this.getVideoTile(tileId);
        if (tile === null) {
            this.logger.warn(`Ignoring video element binding for unknown tile id ${tileId}`);
            return;
        }
        tile.bindVideoElement(videoElement);
    }
    unbindVideoElement(tileId) {
        this.bindVideoElement(tileId, null);
    }
    startLocalVideoTile() {
        const tile = this.findOrCreateLocalVideoTile();
        this.currentLocalTile.stateRef().localTileStarted = true;
        this.audioVideoController.update();
        return tile.id();
    }
    stopLocalVideoTile() {
        if (!this.currentLocalTile) {
            return;
        }
        this.currentLocalTile.stateRef().localTileStarted = false;
        this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);
        this.audioVideoController.update();
    }
    hasStartedLocalVideoTile() {
        return !!(this.currentLocalTile && this.currentLocalTile.stateRef().localTileStarted);
    }
    removeLocalVideoTile() {
        if (this.currentLocalTile) {
            this.removeVideoTile(this.currentLocalTile.id());
        }
    }
    getLocalVideoTile() {
        return this.currentLocalTile;
    }
    pauseVideoTile(tileId) {
        const tile = this.getVideoTile(tileId);
        if (tile) {
            if (!this.currentPausedTilesByIds.has(tileId)) {
                this.audioVideoController.pauseReceivingStream(tile.stateRef().streamId);
                this.currentPausedTilesByIds.add(tileId);
            }
            tile.pause();
        }
    }
    unpauseVideoTile(tileId) {
        const tile = this.getVideoTile(tileId);
        if (tile) {
            if (this.currentPausedTilesByIds.has(tileId)) {
                this.audioVideoController.resumeReceivingStream(tile.stateRef().streamId);
                this.currentPausedTilesByIds.delete(tileId);
            }
            tile.unpause();
        }
    }
    getVideoTile(tileId) {
        return this.tileMap.has(tileId) ? this.tileMap.get(tileId) : null;
    }
    getVideoTileArea(tile) {
        const state = tile.state();
        let tileHeight = 0;
        let tileWidth = 0;
        if (state.boundVideoElement) {
            tileHeight = state.boundVideoElement.clientHeight * state.devicePixelRatio;
            tileWidth = state.boundVideoElement.clientWidth * state.devicePixelRatio;
        }
        return tileHeight * tileWidth;
    }
    getAllRemoteVideoTiles() {
        const result = new Array();
        this.tileMap.forEach((tile, tileId) => {
            if (!this.currentLocalTile || tileId !== this.currentLocalTile.id()) {
                result.push(tile);
            }
        });
        return result;
    }
    getAllVideoTiles() {
        return Array.from(this.tileMap.values());
    }
    addVideoTile(localTile = false) {
        const tileId = this.nextTileId;
        this.nextTileId += 1;
        const tile = this.tileFactory.makeTile(tileId, localTile, this, this.devicePixelRatioMonitor);
        this.tileMap.set(tileId, tile);
        return tile;
    }
    removeVideoTile(tileId) {
        if (!this.tileMap.has(tileId)) {
            return;
        }
        const tile = this.tileMap.get(tileId);
        if (this.currentLocalTile === tile) {
            this.currentLocalTile = null;
        }
        tile.destroy();
        this.tileMap.delete(tileId);
        this.audioVideoController.forEachObserver((observer) => {
            Maybe_1.default.of(observer.videoTileWasRemoved).map(f => f.bind(observer)(tileId));
        });
    }
    removeVideoTilesByAttendeeId(attendeeId) {
        const tilesRemoved = [];
        for (const tile of this.getAllVideoTiles()) {
            const state = tile.state();
            if (state.boundAttendeeId === attendeeId) {
                this.removeVideoTile(state.tileId);
                tilesRemoved.push(state.tileId);
            }
        }
        return tilesRemoved;
    }
    removeAllVideoTiles() {
        const tileIds = Array.from(this.tileMap.keys());
        for (const tileId of tileIds) {
            this.removeVideoTile(tileId);
        }
    }
    sendTileStateUpdate(tileState) {
        this.audioVideoController.forEachObserver((observer) => {
            Maybe_1.default.of(observer.videoTileDidUpdate).map(f => f.bind(observer)(tileState));
        });
    }
    haveVideoTilesWithStreams() {
        for (const tile of this.getAllVideoTiles()) {
            if (tile.state().boundVideoStream) {
                return true;
            }
        }
        return false;
    }
    haveVideoTileForAttendeeId(attendeeId) {
        for (const tile of this.getAllVideoTiles()) {
            const state = tile.state();
            if (state.boundAttendeeId === attendeeId) {
                return true;
            }
        }
        return false;
    }
    captureVideoTile(tileId) {
        const tile = this.getVideoTile(tileId);
        if (!tile) {
            return null;
        }
        return tile.capture();
    }
    findOrCreateLocalVideoTile() {
        if (this.currentLocalTile) {
            return this.currentLocalTile;
        }
        this.currentLocalTile = this.addVideoTile(true);
        this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);
        return this.currentLocalTile;
    }
}
exports.default = DefaultVideoTileController;
//# sourceMappingURL=DefaultVideoTileController.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videotilefactory/DefaultVideoTileFactory.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videotilefactory/DefaultVideoTileFactory.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultVideoTile_1 = __webpack_require__(/*! ../videotile/DefaultVideoTile */ "./node_modules/amazon-chime-sdk-js/build/videotile/DefaultVideoTile.js");
class DefaultVideoTileFactory {
    makeTile(tileId, localTile, tileController, devicePixelRatioMonitor) {
        return new DefaultVideoTile_1.default(tileId, localTile, tileController, devicePixelRatioMonitor);
    }
}
exports.default = DefaultVideoTileFactory;
//# sourceMappingURL=DefaultVideoTileFactory.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/BitrateParameters.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/BitrateParameters.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class BitrateParameters {
}
exports.default = BitrateParameters;
//# sourceMappingURL=BitrateParameters.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Maybe_1 = __webpack_require__(/*! ../maybe/Maybe */ "./node_modules/amazon-chime-sdk-js/build/maybe/Maybe.js");
const AsyncScheduler_1 = __webpack_require__(/*! ../scheduler/AsyncScheduler */ "./node_modules/amazon-chime-sdk-js/build/scheduler/AsyncScheduler.js");
const SimulcastLayers_1 = __webpack_require__(/*! ../simulcastlayers/SimulcastLayers */ "./node_modules/amazon-chime-sdk-js/build/simulcastlayers/SimulcastLayers.js");
const SimulcastTransceiverController_1 = __webpack_require__(/*! ../transceivercontroller/SimulcastTransceiverController */ "./node_modules/amazon-chime-sdk-js/build/transceivercontroller/SimulcastTransceiverController.js");
const DefaultVideoCaptureAndEncodeParameter_1 = __webpack_require__(/*! ../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter */ "./node_modules/amazon-chime-sdk-js/build/videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter.js");
const BitrateParameters_1 = __webpack_require__(/*! ./BitrateParameters */ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/BitrateParameters.js");
/**
 * [[DefaultSimulcastUplinkPolicy]] determines capture and encode
 *  parameters that reacts to estimated uplink bandwidth
 */
class DefaultSimulcastUplinkPolicy {
    constructor(selfAttendeeId, logger) {
        this.selfAttendeeId = selfAttendeeId;
        this.logger = logger;
        this.numSenders = 0;
        this.numParticipants = -1;
        this.newQualityMap = new Map();
        this.currentQualityMap = new Map();
        this.newActiveStreams = 1 /* kHiAndLow */;
        this.currentActiveStreams = 1 /* kHiAndLow */;
        this.lastUplinkBandwidthKbps = DefaultSimulcastUplinkPolicy.defaultUplinkBandwidthKbps;
        this.startTimeMs = 0;
        this.lastUpdatedMs = Date.now();
        this.videoIndex = null;
        this.currLocalDescriptions = [];
        this.nextLocalDescriptions = [];
        this.observerQueue = new Set();
        this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, true);
        this.parametersInEffect = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, true);
        this.lastUplinkBandwidthKbps = DefaultSimulcastUplinkPolicy.defaultUplinkBandwidthKbps;
        this.currentQualityMap = this.fillEncodingParamWithBitrates([300, 0, 1200]);
        this.newQualityMap = this.fillEncodingParamWithBitrates([300, 0, 1200]);
    }
    updateConnectionMetric({ uplinkKbps = 0 }) {
        if (isNaN(uplinkKbps)) {
            return;
        }
        // Check if startup period in order to ignore estimate when video first enabled.
        // If only audio was active then the estimate will be very low
        if (this.startTimeMs === 0) {
            this.startTimeMs = Date.now();
        }
        if (Date.now() - this.startTimeMs < DefaultSimulcastUplinkPolicy.startupDurationMs) {
            this.lastUplinkBandwidthKbps = DefaultSimulcastUplinkPolicy.defaultUplinkBandwidthKbps;
        }
        else {
            this.lastUplinkBandwidthKbps = uplinkKbps;
        }
        this.logger.debug(() => {
            return `simulcast: uplink policy update metrics ${this.lastUplinkBandwidthKbps}`;
        });
        let holdTime = DefaultSimulcastUplinkPolicy.holdDownDurationMs;
        if (this.currentActiveStreams === 3 /* kLow */) {
            holdTime = DefaultSimulcastUplinkPolicy.holdDownDurationMs * 2;
        }
        else if ((this.currentActiveStreams === 2 /* kMidAndLow */ &&
            uplinkKbps <= DefaultSimulcastUplinkPolicy.kMidDisabledRate) ||
            (this.currentActiveStreams === 1 /* kHiAndLow */ &&
                uplinkKbps <= DefaultSimulcastUplinkPolicy.kHiDisabledRate)) {
            holdTime = DefaultSimulcastUplinkPolicy.holdDownDurationMs / 2;
        }
        if (Date.now() < this.lastUpdatedMs + holdTime) {
            return;
        }
        this.newQualityMap = this.calculateEncodingParameters(false);
    }
    calculateEncodingParameters(numSendersChanged) {
        // bitrates parameter min is not used for now
        const newBitrates = [
            new BitrateParameters_1.default(),
            new BitrateParameters_1.default(),
            new BitrateParameters_1.default(),
        ];
        let hysteresisIncrease = 0, hysteresisDecrease = 0;
        if (this.currentActiveStreams === 0 /* kHi */) {
            // Don't trigger redetermination based on rate if only one simulcast stream
            hysteresisIncrease = this.lastUplinkBandwidthKbps + 1;
            hysteresisDecrease = 0;
        }
        else if (this.currentActiveStreams === 1 /* kHiAndLow */) {
            hysteresisIncrease = 2400;
            hysteresisDecrease = DefaultSimulcastUplinkPolicy.kHiDisabledRate;
        }
        else if (this.currentActiveStreams === 2 /* kMidAndLow */) {
            hysteresisIncrease = 1000;
            hysteresisDecrease = DefaultSimulcastUplinkPolicy.kMidDisabledRate;
        }
        else {
            hysteresisIncrease = 300;
            hysteresisDecrease = 0;
        }
        if (numSendersChanged ||
            this.lastUplinkBandwidthKbps >= hysteresisIncrease ||
            this.lastUplinkBandwidthKbps <= hysteresisDecrease) {
            if (this.numParticipants >= 0 && this.numParticipants <= 2) {
                // Simulcast disabled
                this.newActiveStreams = 0 /* kHi */;
                newBitrates[0].maxBitrateKbps = 0;
                newBitrates[1].maxBitrateKbps = 0;
                newBitrates[2].maxBitrateKbps = 1200;
            }
            else if (this.numSenders <= 4 &&
                this.lastUplinkBandwidthKbps >= DefaultSimulcastUplinkPolicy.kHiDisabledRate) {
                // 320x192+ (640x384)  + 1280x768
                this.newActiveStreams = 1 /* kHiAndLow */;
                newBitrates[0].maxBitrateKbps = 300;
                newBitrates[1].maxBitrateKbps = 0;
                newBitrates[2].maxBitrateKbps = 1200;
            }
            else if (this.lastUplinkBandwidthKbps >= DefaultSimulcastUplinkPolicy.kMidDisabledRate) {
                // 320x192 + 640x384 + (1280x768)
                this.newActiveStreams = 2 /* kMidAndLow */;
                newBitrates[0].maxBitrateKbps = this.lastUplinkBandwidthKbps >= 350 ? 200 : 150;
                newBitrates[1].maxBitrateKbps = this.numSenders <= 6 ? 600 : 350;
                newBitrates[2].maxBitrateKbps = 0;
            }
            else {
                // 320x192 + 640x384 + (1280x768)
                this.newActiveStreams = 3 /* kLow */;
                newBitrates[0].maxBitrateKbps = 300;
                newBitrates[1].maxBitrateKbps = 0;
                newBitrates[2].maxBitrateKbps = 0;
            }
            const bitrates = newBitrates.map((v, _i, _a) => {
                return v.maxBitrateKbps;
            });
            this.newQualityMap = this.fillEncodingParamWithBitrates(bitrates);
            if (!this.encodingParametersEqual()) {
                this.logger.info(`simulcast: policy:calculateEncodingParameters bw:${this.lastUplinkBandwidthKbps} numSources:${this.numSenders} numClients:${this.numParticipants} newQualityMap: ${this.getQualityMapString(this.newQualityMap)}`);
            }
        }
        return this.newQualityMap;
    }
    chooseMediaTrackConstraints() {
        // Changing MediaTrackConstraints causes a restart of video input and possible small
        // scaling changes.  Always use 720p for now
        const trackConstraint = {
            width: { ideal: 1280 },
            height: { ideal: 768 },
            frameRate: { ideal: 15 },
        };
        return trackConstraint;
    }
    chooseEncodingParameters() {
        this.currentQualityMap = this.newQualityMap;
        this.currentActiveStreams = this.newActiveStreams;
        if (this.activeStreamsToPublish !== this.newActiveStreams) {
            this.activeStreamsToPublish = this.newActiveStreams;
            this.publishEncodingSimulcastLayer();
        }
        return this.currentQualityMap;
    }
    updateIndex(videoIndex) {
        // the +1 for self is assuming that we intend to send video, since
        // the context here is VideoUplinkBandwidthPolicy
        const numSenders = videoIndex.numberOfVideoPublishingParticipantsExcludingSelf(this.selfAttendeeId) + 1;
        const numParticipants = videoIndex.numberOfParticipants();
        const numSendersChanged = numSenders !== this.numSenders;
        const numParticipantsChanged = (numParticipants > 2 && this.numParticipants <= 2) ||
            (numParticipants <= 2 && this.numParticipants > 2);
        this.numSenders = numSenders;
        this.numParticipants = numParticipants;
        this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(this.captureWidth(), this.captureHeight(), this.captureFrameRate(), this.maxBandwidthKbps(), false);
        this.videoIndex = videoIndex;
        this.newQualityMap = this.calculateEncodingParameters(numSendersChanged || numParticipantsChanged);
    }
    wantsResubscribe() {
        let constraintDiff = !this.encodingParametersEqual();
        this.nextLocalDescriptions = this.videoIndex.localStreamDescriptions();
        for (let i = 0; i < this.nextLocalDescriptions.length; i++) {
            const streamId = this.nextLocalDescriptions[i].streamId;
            if (streamId !== 0 && !!streamId) {
                const prevIndex = this.currLocalDescriptions.findIndex(val => {
                    return val.streamId === streamId;
                });
                if (prevIndex !== -1) {
                    if (this.nextLocalDescriptions[i].disabledByWebRTC !==
                        this.currLocalDescriptions[prevIndex].disabledByWebRTC) {
                        constraintDiff = true;
                    }
                }
            }
        }
        if (constraintDiff) {
            this.lastUpdatedMs = Date.now();
        }
        this.currLocalDescriptions = this.nextLocalDescriptions;
        return constraintDiff;
    }
    compareEncodingParameter(encoding1, encoding2) {
        return JSON.stringify(encoding1) === JSON.stringify(encoding2);
    }
    encodingParametersEqual() {
        let different = false;
        for (const ridName of SimulcastTransceiverController_1.default.NAME_ARR_ASCENDING) {
            different =
                different ||
                    !this.compareEncodingParameter(this.newQualityMap.get(ridName), this.currentQualityMap.get(ridName));
            if (different) {
                break;
            }
        }
        return !different;
    }
    chooseCaptureAndEncodeParameters() {
        // should deprecate in this policy
        this.parametersInEffect = this.optimalParameters.clone();
        return this.parametersInEffect.clone();
    }
    captureWidth() {
        // should deprecate in this policy
        const width = 1280;
        return width;
    }
    captureHeight() {
        // should deprecate in this policy
        const height = 768;
        return height;
    }
    captureFrameRate() {
        // should deprecate in this policy
        return 15;
    }
    maxBandwidthKbps() {
        // should deprecate in this policy
        return 1400;
    }
    setIdealMaxBandwidthKbps(_idealMaxBandwidthKbps) {
        // should deprecate in this policy
    }
    setHasBandwidthPriority(_hasBandwidthPriority) {
        // should deprecate in this policy
    }
    fillEncodingParamWithBitrates(bitratesKbps) {
        const newMap = new Map();
        const toBps = 1000;
        const nameArr = SimulcastTransceiverController_1.default.NAME_ARR_ASCENDING;
        const bitrateArr = bitratesKbps;
        let scale = 4;
        for (let i = 0; i < nameArr.length; i++) {
            const ridName = nameArr[i];
            newMap.set(ridName, {
                rid: ridName,
                active: bitrateArr[i] > 0 ? true : false,
                scaleResolutionDownBy: scale,
                maxBitrate: bitrateArr[i] * toBps,
            });
            scale = scale / 2;
        }
        return newMap;
    }
    getQualityMapString(params) {
        let qualityString = '';
        const localDescriptions = this.videoIndex.localStreamDescriptions();
        if (localDescriptions.length === 3) {
            params.forEach((value) => {
                let disabledByWebRTC = false;
                if (value.rid === 'low')
                    disabledByWebRTC = localDescriptions[0].disabledByWebRTC;
                else if (value.rid === 'mid')
                    disabledByWebRTC = localDescriptions[1].disabledByWebRTC;
                else
                    disabledByWebRTC = localDescriptions[2].disabledByWebRTC;
                qualityString += `{ rid: ${value.rid} active:${value.active} disabledByWebRTC: ${disabledByWebRTC} maxBitrate:${value.maxBitrate}}`;
            });
        }
        return qualityString;
    }
    getEncodingSimulcastLayer(activeStreams) {
        switch (activeStreams) {
            case 0 /* kHi */:
                return SimulcastLayers_1.default.High;
            case 1 /* kHiAndLow */:
                return SimulcastLayers_1.default.LowAndHigh;
            case 2 /* kMidAndLow */:
                return SimulcastLayers_1.default.LowAndMedium;
            case 3 /* kLow */:
                return SimulcastLayers_1.default.Low;
        }
    }
    publishEncodingSimulcastLayer() {
        const simulcastLayers = this.getEncodingSimulcastLayer(this.activeStreamsToPublish);
        this.forEachObserver(observer => {
            Maybe_1.default.of(observer.encodingSimulcastLayersDidChange).map(f => f.bind(observer)(simulcastLayers));
        });
    }
    addObserver(observer) {
        this.logger.info('adding simulcast uplink observer');
        this.observerQueue.add(observer);
    }
    removeObserver(observer) {
        this.logger.info('removing simulcast uplink observer');
        this.observerQueue.delete(observer);
    }
    forEachObserver(observerFunc) {
        for (const observer of this.observerQueue) {
            new AsyncScheduler_1.default().start(() => {
                if (this.observerQueue.has(observer)) {
                    observerFunc(observer);
                }
            });
        }
    }
}
exports.default = DefaultSimulcastUplinkPolicy;
DefaultSimulcastUplinkPolicy.defaultUplinkBandwidthKbps = 1200;
DefaultSimulcastUplinkPolicy.startupDurationMs = 6000;
DefaultSimulcastUplinkPolicy.holdDownDurationMs = 4000;
DefaultSimulcastUplinkPolicy.defaultMaxFrameRate = 15;
// Current rough estimates where webrtc disables streams
DefaultSimulcastUplinkPolicy.kHiDisabledRate = 700;
DefaultSimulcastUplinkPolicy.kMidDisabledRate = 240;
//# sourceMappingURL=DefaultSimulcastUplinkPolicy.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultVideoCaptureAndEncodeParameter_1 = __webpack_require__(/*! ../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter */ "./node_modules/amazon-chime-sdk-js/build/videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter.js");
/** NScaleVideoUplinkBandwidthPolicy implements capture and encode
 *  parameters that are nearly equivalent to those chosen by the
 *  traditional native clients, except for a modification to
 *  maxBandwidthKbps described below. */
class NScaleVideoUplinkBandwidthPolicy {
    constructor(selfAttendeeId) {
        this.selfAttendeeId = selfAttendeeId;
        this.numParticipants = 0;
        this.idealMaxBandwidthKbps = 1400;
        this.hasBandwidthPriority = false;
        this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);
        this.parametersInEffect = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);
    }
    updateConnectionMetric(_metrics) {
        return;
    }
    chooseMediaTrackConstraints() {
        return {};
    }
    chooseEncodingParameters() {
        return new Map();
    }
    updateIndex(videoIndex) {
        // the +1 for self is assuming that we intend to send video, since
        // the context here is VideoUplinkBandwidthPolicy
        this.numParticipants =
            videoIndex.numberOfVideoPublishingParticipantsExcludingSelf(this.selfAttendeeId) + 1;
        this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(this.captureWidth(), this.captureHeight(), this.captureFrameRate(), this.maxBandwidthKbps(), false);
    }
    wantsResubscribe() {
        return !this.parametersInEffect.equal(this.optimalParameters);
    }
    chooseCaptureAndEncodeParameters() {
        this.parametersInEffect = this.optimalParameters.clone();
        return this.parametersInEffect.clone();
    }
    captureWidth() {
        let width = 640;
        if (this.numParticipants > 4) {
            width = 320;
        }
        return width;
    }
    captureHeight() {
        let height = 384;
        if (this.numParticipants > 4) {
            height = 192;
        }
        return height;
    }
    captureFrameRate() {
        return 15;
    }
    maxBandwidthKbps() {
        if (this.hasBandwidthPriority) {
            return Math.trunc(this.idealMaxBandwidthKbps);
        }
        let rate = 0;
        if (this.numParticipants <= 2) {
            rate = this.idealMaxBandwidthKbps;
        }
        else if (this.numParticipants <= 4) {
            rate = (this.idealMaxBandwidthKbps * 2) / 3;
        }
        else {
            rate = ((544 / 11 + 14880 / (11 * this.numParticipants)) / 600) * this.idealMaxBandwidthKbps;
        }
        return Math.trunc(rate);
    }
    setIdealMaxBandwidthKbps(idealMaxBandwidthKbps) {
        this.idealMaxBandwidthKbps = idealMaxBandwidthKbps;
    }
    setHasBandwidthPriority(hasBandwidthPriority) {
        this.hasBandwidthPriority = hasBandwidthPriority;
    }
}
exports.default = NScaleVideoUplinkBandwidthPolicy;
//# sourceMappingURL=NScaleVideoUplinkBandwidthPolicy.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/NoVideoUplinkBandwidthPolicy.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/videouplinkbandwidthpolicy/NoVideoUplinkBandwidthPolicy.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultVideoCaptureAndEncodeParameter_1 = __webpack_require__(/*! ../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter */ "./node_modules/amazon-chime-sdk-js/build/videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter.js");
class NoVideoUplinkBandwidthPolicy {
    constructor() { }
    updateConnectionMetric(_metrics) { }
    chooseMediaTrackConstraints() {
        return {};
    }
    chooseEncodingParameters() {
        return new Map();
    }
    updateIndex(_videoIndex) { }
    wantsResubscribe() {
        return false;
    }
    chooseCaptureAndEncodeParameters() {
        return new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);
    }
    maxBandwidthKbps() {
        return 0;
    }
    setIdealMaxBandwidthKbps(_idealMaxBandwidthKbps) { }
    setHasBandwidthPriority(_hasBandwidthPriority) { }
}
exports.default = NoVideoUplinkBandwidthPolicy;
//# sourceMappingURL=NoVideoUplinkBandwidthPolicy.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/voicefocus/LoggerAdapter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/voicefocus/LoggerAdapter.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/** @internal */
function stringify(args) {
    return args
        .map((v) => {
        if (typeof v === 'object') {
            return JSON.stringify(v);
        }
        return `${v}`;
    })
        .join(' ');
}
/** @internal */
class LoggerAdapter {
    constructor(base) {
        this.base = base;
    }
    debug(...args) {
        this.base.debug(stringify(args));
    }
    info(...args) {
        this.base.info(stringify(args));
    }
    warn(...args) {
        this.base.warn(stringify(args));
    }
    error(...args) {
        this.base.error(stringify(args));
    }
}
exports.default = LoggerAdapter;
//# sourceMappingURL=LoggerAdapter.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/voicefocus/VoiceFocusDeviceTransformer.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/voicefocus/VoiceFocusDeviceTransformer.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VoiceFocusDeviceTransformer = void 0;
const voicefocus_1 = __webpack_require__(/*! ../../libs/voicefocus/voicefocus */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/voicefocus.js");
const Versioning_1 = __webpack_require__(/*! ../versioning/Versioning */ "./node_modules/amazon-chime-sdk-js/build/versioning/Versioning.js");
const LoggerAdapter_1 = __webpack_require__(/*! ./LoggerAdapter */ "./node_modules/amazon-chime-sdk-js/build/voicefocus/LoggerAdapter.js");
const VoiceFocusTransformDevice_1 = __webpack_require__(/*! ./VoiceFocusTransformDevice */ "./node_modules/amazon-chime-sdk-js/build/voicefocus/VoiceFocusTransformDevice.js");
const VoiceFocusTransformDeviceDelegate_1 = __webpack_require__(/*! ./VoiceFocusTransformDeviceDelegate */ "./node_modules/amazon-chime-sdk-js/build/voicefocus/VoiceFocusTransformDeviceDelegate.js");
/**
 * `VoiceFocusDeviceTransformer` is used to create {@link VoiceFocusTransformDevice|transform devices}
 * that apply Amazon Voice Focus noise suppression to audio input.
 *
 * This transformer captures relevant configuration. You should check for support, initialize,
 * and then create a device as follows:
 *
 * ```
 * const deviceID = null;
 *
 * // This check for support is cheap and quick, and should be used to gate use
 * // of this feature.
 * if (!(await VoiceFocusDeviceTransformer.isSupported()) {
 *   console.log('Amazon Voice Focus not supported in this browser.');
 *   return deviceID;
 * }
 *
 * let transformer: VoiceFocusDeviceTransformer;
 * try {
 *   // This operation can fail in ways that do not indicate no support,
 *   // but do indicate an inability to apply Amazon Voice Focus. Trying again
 *   // might succeed.
 *   transformer = await VoiceFocusDeviceTransformer.create({});
 * } catch (e) {
 *   // Something went wrong.
 *   console.log('Unable to instantiate Amazon Voice Focus.');
 *   return deviceID;
 * }
 *
 * if (!transformer.isSupported()) {
 *   // The transformer will fall through, but your UI might care.
 *   console.log('Amazon Voice Focus not supported in this browser.');
 * }
 *
 * return await transformer.createTransformDevice(deviceID);
 * ```
 */
class VoiceFocusDeviceTransformer {
    constructor(spec, { preload = true, logger, fetchBehavior = VoiceFocusDeviceTransformer.defaultFetchBehavior(), }) {
        this.spec = spec;
        this.supported = true;
        this.logger = logger;
        this.vfLogger = logger ? new LoggerAdapter_1.default(logger) : undefined;
        this.preload = preload;
        this.fetchBehavior = fetchBehavior;
        // If the user didn't specify one, add the default, which is
        // identified by the major and minor SDK version.
        this.spec = VoiceFocusDeviceTransformer.augmentSpec(this.spec);
    }
    /**
     * Quickly check whether Amazon Voice Focus is supported on this platform.
     *
     * This will return `false` if key technologies are absent. A value of `true` does not
     * necessarily mean that adding Amazon Voice Focus will succeed: it is still possible that the
     * configuration of the page or the CPU speed of the device are limiting factors.
     *
     * `VoiceFocusDeviceTransformer.create` will return an instance whose `isSupported()`
     * method more accurately reflects whether Amazon Voice Focus is supported in the current environment.
     *
     * This method will only reject if you provide invalid inputs.
     *
     * @param spec An optional asset group and URL paths to use when fetching. You can pass
     *             a complete `VoiceFocusSpec` here for convenience, matching the signature of `create`.
     * @param options Additional named arguments, including `logger`.
     */
    static isSupported(spec, options) {
        const fetchBehavior = VoiceFocusDeviceTransformer.defaultFetchBehavior();
        const logger = (options === null || options === void 0 ? void 0 : options.logger) ? new LoggerAdapter_1.default(options.logger) : undefined;
        const opts = {
            fetchBehavior,
            logger,
        };
        return voicefocus_1.VoiceFocus.isSupported(VoiceFocusDeviceTransformer.augmentSpec(spec), opts);
    }
    /**
     * Create a transformer that can apply Amazon Voice Focus noise suppression to a device.
     *
     * This method will reject if the provided spec is invalid, or if the process of
     * checking for support or estimating fails (e.g., because the network is unreachable).
     *
     * If Amazon Voice Focus is not supported on this device, this call will not reject and
     * `isSupported()` will return `false` on the returned instance. That instance will
     * pass through devices unmodified.
     *
     * @param spec A definition of how you want Amazon Voice Focus to behave. See the declaration of
     *             {@link VoiceFocusSpec}` for details.
     * @param options Additional named arguments, including `logger` and `preload`.
     */
    static create(spec = {}, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const transformer = new VoiceFocusDeviceTransformer(spec, options);
            // This also preps the first VoiceFocus instance.
            yield transformer.init();
            return transformer;
        });
    }
    /**
     * Return whether this transformer is able to function in this environment.
     * If not, calls to
     * {@link VoiceFocusDeviceTransformer.createTransformDevice|createTransformDevice}`
     * will pass through an unmodified device.
     */
    isSupported() {
        return this.supported;
    }
    /**
     * Apply Amazon Voice Focus to the selected {@link Device}.
     *
     * If this is a stream, it should be one that does not include other noise suppression features,
     * and you should consider whether to disable automatic gain control (AGC) on the stream, because
     * it can interact with noise suppression.
     *
     * @returns a device promise. This will always resolve to either a
     *          {@link VoiceFocusTransformDevice} or undefined; it will never reject.
     */
    createTransformDevice(device, nodeOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.supported) {
                // Fall back.
                return undefined;
            }
            try {
                const preload = true;
                const [vf, delegate] = yield this.allocateVoiceFocus(preload);
                return new VoiceFocusTransformDevice_1.default(device, vf, delegate, nodeOptions);
            }
            catch (e) {
                // Fall back.
                /* istanbul ignore next */
                return undefined;
            }
        });
    }
    static augmentSpec(spec) {
        if (!spec || (!spec.assetGroup && !spec.revisionID)) {
            return Object.assign(Object.assign({}, spec), { assetGroup: VoiceFocusDeviceTransformer.currentSDKAssetGroup() });
        }
        return spec;
    }
    configure() {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                fetchBehavior: this.fetchBehavior,
                logger: this.vfLogger,
            };
            return voicefocus_1.VoiceFocus.configure(this.spec, options);
        });
    }
    init() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.configuration = this.configure();
            const config = yield this.configuration;
            if (!config.supported) {
                // No need to init: it won't work.
                this.supported = false;
                return;
            }
            // We initialize the first one right now, which makes it easier to detect
            // possible failures.
            // This can throw for malformed input. Pass that up the chain.
            this.pendingVoiceFocus = this.createVoiceFocus(config, this.preload);
            try {
                yield this.pendingVoiceFocus;
            }
            catch (e) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(`Unable to initialize Amazon Voice Focus: ${e}`);
                this.supported = false;
            }
        });
    }
    createVoiceFocus(config, preload) {
        return __awaiter(this, void 0, void 0, function* () {
            const delegate = new VoiceFocusTransformDeviceDelegate_1.default();
            const vf = yield voicefocus_1.VoiceFocus.init(config, { delegate, preload, logger: this.vfLogger });
            return [vf, delegate];
        });
    }
    allocateVoiceFocus(preload) {
        return __awaiter(this, void 0, void 0, function* () {
            // A little safety.
            /* istanbul ignore next */
            if (!this.supported) {
                throw new Error('Not supported.');
            }
            if (this.pendingVoiceFocus) {
                // Use the one we already have, and free the slot for any future execution.
                const vf = this.pendingVoiceFocus;
                this.pendingVoiceFocus = undefined;
                return vf;
            }
            return this.createVoiceFocus(yield this.configuration, preload);
        });
    }
    static majorVersion() {
        return Versioning_1.default.sdkVersion.match(/^[1-9][0-9]*\.(?:0|[1-9][0-9]*)/)[0];
    }
    static majorMinorVersion() {
        return Versioning_1.default.sdkVersion.match(/^[1-9][0-9]*\.(?:0|(?:[1-9][0-9]*))\.(?:0|[1-9][0-9]*)/)[0];
    }
    static currentSDKAssetGroup() {
        // Just on the off chance someone does something silly, handle
        // malformed version strings here.
        const v = this.majorVersion();
        // Just a little safety.
        /* istanbul ignore next */
        if (!v) {
            return `stable-v1`;
        }
        return `sdk-${v}`;
    }
    // Note that we use query strings here, not headers, in order to make these requests 'simple' and
    // avoid the need for CORS preflights.
    // Be very, very careful if you choose to add headers here. You should never need to.
    static defaultFetchBehavior() {
        // Just a little safety.
        /* istanbul ignore next */
        const version = VoiceFocusDeviceTransformer.majorMinorVersion() || 'unknown';
        const ua = Versioning_1.default.sdkUserAgentLowResolution;
        return {
            escapedQueryString: `sdk=${encodeURIComponent(version)}&ua=${encodeURIComponent(ua)}`,
        };
    }
}
exports.VoiceFocusDeviceTransformer = VoiceFocusDeviceTransformer;
exports.default = VoiceFocusDeviceTransformer;
//# sourceMappingURL=VoiceFocusDeviceTransformer.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/voicefocus/VoiceFocusTransformDevice.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/voicefocus/VoiceFocusTransformDevice.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const DefaultBrowserBehavior_1 = __webpack_require__(/*! ../browserbehavior/DefaultBrowserBehavior */ "./node_modules/amazon-chime-sdk-js/build/browserbehavior/DefaultBrowserBehavior.js");
/**
 * A device that augments an {@link Device} to apply Amazon Voice Focus
 * noise suppression to an audio input.
 */
class VoiceFocusTransformDevice {
    /** @internal */
    constructor(device, voiceFocus, delegate, nodeOptions, failed = false, node = undefined, browserBehavior = new DefaultBrowserBehavior_1.default()) {
        this.device = device;
        this.voiceFocus = voiceFocus;
        this.delegate = delegate;
        this.nodeOptions = nodeOptions;
        this.failed = failed;
        this.node = node;
        this.browserBehavior = browserBehavior;
    }
    /**
     * Return the inner device as provided during construction, or updated via
     * {@link chooseNewInnerDevice}. Do not confuse this method with {@link intrinsicDevice}.
     */
    getInnerDevice() {
        return this.device;
    }
    /**
     * Disable the audio node while muted to reduce CPU usage.
     *
     * @param muted whether the audio device should be muted.
     */
    mute(muted) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.node) {
                return;
            }
            if (muted) {
                yield this.node.disable();
            }
            else {
                yield this.node.enable();
            }
        });
    }
    /**
     * Dispose of the inner workings of the transform device. After this method is called
     * you will need to create a new device to use Amazon Voice Focus again.
     */
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.node) {
                return;
            }
            this.node.disconnect();
            yield this.node.stop();
        });
    }
    /**
     * If you wish to choose a different inner device, but continue to use Amazon Voice Focus, you
     * can use this method to efficiently create a new device that will reuse
     * the same internal state. Only one of the two devices can be used at a time: switch
     * between them using {@link DeviceController.chooseAudioInputDevice}.
     *
     * If the same device is passed as is currently in use, `this` is returned.
     *
     * @param inner The new inner device to use.
     */
    chooseNewInnerDevice(inner) {
        return __awaiter(this, void 0, void 0, function* () {
            // If the new device is 'default', always recreate. Chrome can switch out
            // the real device underneath us.
            if (this.device === inner && !isDefaultDevice(inner)) {
                return this;
            }
            return new VoiceFocusTransformDevice(inner, this.voiceFocus, this.delegate, this.nodeOptions, this.failed, this.node, this.browserBehavior);
        });
    }
    intrinsicDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.failed) {
                return this.device;
            }
            // Turn the Device into constraints with appropriate AGC settings.
            const trackConstraints = {
                echoCancellation: true,
                // @ts-ignore
                googEchoCancellation: true,
                // @ts-ignore
                googEchoCancellation2: true,
                noiseSuppression: false,
                // @ts-ignore
                googNoiseSuppression: false,
                // @ts-ignore
                googHighpassFilter: false,
                // @ts-ignore
                googNoiseSuppression2: false,
            };
            let useBuiltInAGC;
            if (this.nodeOptions && this.nodeOptions.agc !== undefined) {
                useBuiltInAGC = this.nodeOptions.agc.useBuiltInAGC;
            }
            else {
                useBuiltInAGC = true;
            }
            trackConstraints.autoGainControl = useBuiltInAGC;
            // @ts-ignore
            trackConstraints.googAutoGainControl = useBuiltInAGC;
            // @ts-ignore
            trackConstraints.googAutoGainControl2 = useBuiltInAGC;
            // Empty string and null.
            if (!this.device) {
                return trackConstraints;
            }
            // Device ID.
            if (typeof this.device === 'string') {
                /* istanbul ignore if */
                if (this.browserBehavior.requiresNoExactMediaStreamConstraints()) {
                    trackConstraints.deviceId = this.device;
                }
                else {
                    trackConstraints.deviceId = { exact: this.device };
                }
                return trackConstraints;
            }
            // It's a stream.
            if (this.device.id) {
                // Nothing we can do.
                return this.device;
            }
            // It's constraints.
            return Object.assign(Object.assign({}, this.device), trackConstraints);
        });
    }
    createAudioNode(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const agc = { useVoiceFocusAGC: false };
            const options = Object.assign({ enabled: true, agc }, this.nodeOptions);
            try {
                this.node = yield this.voiceFocus.createNode(context, options);
                const start = this.node;
                const end = this.node;
                return { start, end };
            }
            catch (e) {
                // It's better to return some audio stream than nothing.
                this.failed = true;
                this.delegate.onFallback(this, e);
                throw e;
            }
        });
    }
    /**
     * Add an observer to receive notifications about Amazon Voice Focus lifecycle events.
     * See {@link VoiceFocusTransformDeviceObserver} for details.
     * If the observer has already been added, this method call has no effect.
     */
    addObserver(observer) {
        this.delegate.addObserver(observer);
    }
    /**
     * Remove an existing observer. If the observer has not been previously {@link
     * VoiceFocusTransformDevice.addObserver|added}, this method call has no effect.
     */
    removeObserver(observer) {
        this.delegate.removeObserver(observer);
    }
}
function isDefaultDevice(device) {
    if (device === 'default') {
        return true;
    }
    if (!device || typeof device !== 'object') {
        return false;
    }
    if ('deviceId' in device && device.deviceId === 'default') {
        return true;
    }
    if ('id' in device && device.id === 'default') {
        return true;
    }
    return false;
}
exports.default = VoiceFocusTransformDevice;
//# sourceMappingURL=VoiceFocusTransformDevice.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/voicefocus/VoiceFocusTransformDeviceDelegate.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/voicefocus/VoiceFocusTransformDeviceDelegate.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
/** @internal */
class VoiceFocusTransformDeviceDelegate {
    constructor() {
        this.observers = new Set();
    }
    addObserver(observer) {
        this.observers.add(observer);
    }
    removeObserver(observer) {
        this.observers.delete(observer);
    }
    /** @internal */
    onFallback(device, e) {
        var _a;
        for (const observer of this.observers) {
            (_a = observer.voiceFocusFellBackToInnerStream) === null || _a === void 0 ? void 0 : _a.call(observer, device, e);
        }
    }
    onCPUWarning() {
        var _a;
        for (const observer of this.observers) {
            (_a = observer.voiceFocusInsufficientResources) === null || _a === void 0 ? void 0 : _a.call(observer);
        }
    }
}
exports.default = VoiceFocusTransformDeviceDelegate;
//# sourceMappingURL=VoiceFocusTransformDeviceDelegate.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/volumeindicatoradapter/DefaultVolumeIndicatorAdapter.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/volumeindicatoradapter/DefaultVolumeIndicatorAdapter.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
class DefaultVolumeIndicatorAdapter {
    constructor(logger, realtimeController, minVolumeDecibels, maxVolumeDecibels) {
        this.logger = logger;
        this.realtimeController = realtimeController;
        this.minVolumeDecibels = minVolumeDecibels;
        this.maxVolumeDecibels = maxVolumeDecibels;
        this.streamIdToAttendeeId = {};
        this.streamIdToExternalUserId = {};
        this.warnedAboutMissingStreamIdMapping = {};
        this.attendeeIdToStreamId = {};
        this.sessionReconnected = false;
    }
    onReconnect() {
        this.sessionReconnected = true;
    }
    sendRealtimeUpdatesForAudioStreamIdInfo(info) {
        let streamIndex = 0;
        for (const stream of info.streams) {
            const hasAttendeeId = !!stream.attendeeId;
            const hasExternalUserId = !!stream.externalUserId;
            const hasMuted = stream.hasOwnProperty('muted');
            const hasDropped = !!stream.dropped;
            if (hasAttendeeId) {
                if (!!this.attendeeIdToStreamId[stream.attendeeId] &&
                    this.attendeeIdToStreamId[stream.attendeeId] < stream.audioStreamId) {
                    delete this.attendeeIdToStreamId[stream.attendeeId];
                }
                this.streamIdToAttendeeId[stream.audioStreamId] = stream.attendeeId;
                const externalUserId = hasExternalUserId ? stream.externalUserId : stream.attendeeId;
                this.streamIdToExternalUserId[stream.audioStreamId] = externalUserId;
                this.attendeeIdToStreamId[stream.attendeeId] = stream.audioStreamId;
                this.realtimeController.realtimeSetAttendeeIdPresence(stream.attendeeId, true, externalUserId, false, { attendeeIndex: streamIndex++, attendeesInFrame: info.streams.length });
            }
            if (hasMuted) {
                const attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];
                const externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];
                this.realtimeController.realtimeUpdateVolumeIndicator(attendeeId, null, stream.muted, null, externalUserId);
            }
            if (!hasAttendeeId && !hasMuted) {
                const attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];
                if (attendeeId) {
                    const externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];
                    delete this.streamIdToAttendeeId[stream.audioStreamId];
                    delete this.streamIdToExternalUserId[stream.audioStreamId];
                    delete this.warnedAboutMissingStreamIdMapping[stream.audioStreamId];
                    if (this.attendeeIdToStreamId[attendeeId] === stream.audioStreamId) {
                        delete this.attendeeIdToStreamId[attendeeId];
                    }
                    let attendeeHasNewStreamId = false;
                    for (const otherStreamId of Object.keys(this.streamIdToAttendeeId)) {
                        const otherStreamIdNumber = parseInt(otherStreamId);
                        if (otherStreamIdNumber > stream.audioStreamId &&
                            this.streamIdToAttendeeId[otherStreamIdNumber] === attendeeId) {
                            attendeeHasNewStreamId = true;
                            break;
                        }
                    }
                    if (!attendeeHasNewStreamId) {
                        this.realtimeController.realtimeSetAttendeeIdPresence(attendeeId, false, externalUserId, hasDropped, { attendeeIndex: streamIndex++, attendeesInFrame: info.streams.length });
                    }
                }
            }
        }
        if (this.sessionReconnected) {
            this.cleanUpState(info);
            this.sessionReconnected = false;
        }
    }
    cleanUpState(info) {
        const localAttendeeIds = Object.values(this.streamIdToAttendeeId);
        const remoteAttendeeIds = info.streams.map(stream => stream.attendeeId);
        const deletedAttendeeIds = localAttendeeIds.filter(id => {
            return !remoteAttendeeIds.includes(id);
        });
        for (const [index, deletedAttendeeId] of deletedAttendeeIds.entries()) {
            const streamId = this.attendeeIdToStreamId[deletedAttendeeId];
            const externalUserId = this.streamIdToExternalUserId[streamId];
            delete this.streamIdToAttendeeId[streamId];
            delete this.streamIdToExternalUserId[streamId];
            delete this.warnedAboutMissingStreamIdMapping[streamId];
            delete this.attendeeIdToStreamId[deletedAttendeeId];
            // The reconnect event does not have information whether the attendee is dropped/left.
            // Defaulting to attendee leaving the meeting
            this.realtimeController.realtimeSetAttendeeIdPresence(deletedAttendeeId, false, externalUserId, false, { attendeeIndex: index, attendeesInFrame: deletedAttendeeId.length });
        }
    }
    sendRealtimeUpdatesForAudioMetadata(metadata) {
        let volumes = null;
        let signalStrengths = null;
        for (const state of metadata.attendeeStates) {
            const attendeeId = this.attendeeIdForStreamId(state.audioStreamId);
            if (state.hasOwnProperty('volume')) {
                if (volumes === null) {
                    volumes = {};
                }
                if (attendeeId !== null) {
                    // @ts-ignore: TODO fix this protobufjs issue
                    volumes[attendeeId] = this.normalizedVolume(state);
                }
            }
            if (state.hasOwnProperty('signalStrength')) {
                if (signalStrengths === null) {
                    signalStrengths = {};
                }
                if (attendeeId !== null) {
                    // @ts-ignore: TODO fix this protobufjs issue
                    signalStrengths[attendeeId] = this.normalizedSignalStrength(state);
                }
            }
        }
        this.applyRealtimeUpdatesForAudioMetadata(volumes, signalStrengths);
    }
    normalizedVolume(state) {
        const dBVolume = -state.volume;
        const normalized = 1.0 - (dBVolume - this.maxVolumeDecibels) / (this.minVolumeDecibels - this.maxVolumeDecibels);
        const clipped = Math.min(Math.max(normalized, 0.0), 1.0);
        return clipped;
    }
    normalizedSignalStrength(state) {
        const normalized = state.signalStrength / DefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS;
        const clipped = Math.min(Math.max(normalized, 0.0), 1.0);
        return clipped;
    }
    applyRealtimeUpdatesForAudioMetadata(volumes, signalStrengths) {
        for (const streamId in this.streamIdToAttendeeId) {
            const attendeeId = this.streamIdToAttendeeId[streamId];
            const externalUserId = this.streamIdToExternalUserId[streamId];
            let volumeUpdate = null;
            let signalStrengthUpdate = null;
            if (volumes !== null) {
                if (volumes.hasOwnProperty(attendeeId)) {
                    volumeUpdate = volumes[attendeeId];
                }
                else {
                    volumeUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME;
                }
            }
            if (signalStrengths !== null) {
                if (signalStrengths.hasOwnProperty(attendeeId)) {
                    signalStrengthUpdate = signalStrengths[attendeeId];
                }
                else {
                    signalStrengthUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH;
                }
            }
            if (volumeUpdate !== null || signalStrengthUpdate !== null) {
                this.realtimeController.realtimeUpdateVolumeIndicator(attendeeId, volumeUpdate, null, signalStrengthUpdate, externalUserId);
            }
        }
    }
    attendeeIdForStreamId(streamId) {
        if (streamId === 0) {
            return null;
        }
        const attendeeId = this.streamIdToAttendeeId[streamId];
        if (attendeeId) {
            return attendeeId;
        }
        if (!this.warnedAboutMissingStreamIdMapping[streamId]) {
            this.warnedAboutMissingStreamIdMapping[streamId] = true;
            this.logger.warn(`volume indicator stream id ${streamId} seen before being defined`);
        }
        return null;
    }
}
exports.default = DefaultVolumeIndicatorAdapter;
DefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS = 2;
DefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME = 0;
DefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH = 1;
//# sourceMappingURL=DefaultVolumeIndicatorAdapter.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/websocketadapter/DefaultWebSocketAdapter.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/websocketadapter/DefaultWebSocketAdapter.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Versioning_1 = __webpack_require__(/*! ../versioning/Versioning */ "./node_modules/amazon-chime-sdk-js/build/versioning/Versioning.js");
const WebSocketReadyState_1 = __webpack_require__(/*! ./WebSocketReadyState */ "./node_modules/amazon-chime-sdk-js/build/websocketadapter/WebSocketReadyState.js");
class DefaultWebSocketAdapter {
    constructor(logger) {
        this.logger = logger;
    }
    create(url, protocols, isSignedUrl) {
        this.connection = new WebSocket(isSignedUrl ? url : Versioning_1.default.urlWithVersion(url), protocols);
        this.connection.binaryType = 'arraybuffer';
    }
    send(message) {
        try {
            if (message instanceof Uint8Array) {
                this.connection.send(message.buffer);
            }
            else {
                this.connection.send(message);
            }
            return true;
        }
        catch (err) {
            this.logger.debug(() => `send error: ${err.message}, websocket state=${WebSocketReadyState_1.default[this.readyState()]}`);
            return false;
        }
    }
    close(code, reason) {
        this.connection.close(code, reason);
    }
    destroy() {
        this.connection = null;
    }
    addEventListener(handler, eventListener) {
        this.connection.addEventListener(handler, eventListener);
    }
    readyState() {
        if (!this.connection) {
            return WebSocketReadyState_1.default.None;
        }
        switch (this.connection.readyState) {
            case WebSocket.CONNECTING:
                return WebSocketReadyState_1.default.Connecting;
            case WebSocket.OPEN:
                return WebSocketReadyState_1.default.Open;
            case WebSocket.CLOSING:
                return WebSocketReadyState_1.default.Closing;
            case WebSocket.CLOSED:
                return WebSocketReadyState_1.default.Closed;
        }
    }
}
exports.default = DefaultWebSocketAdapter;
//# sourceMappingURL=DefaultWebSocketAdapter.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/build/websocketadapter/WebSocketReadyState.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/build/websocketadapter/WebSocketReadyState.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebSocketReadyState = void 0;
var WebSocketReadyState;
(function (WebSocketReadyState) {
    WebSocketReadyState[WebSocketReadyState["None"] = 0] = "None";
    WebSocketReadyState[WebSocketReadyState["Connecting"] = 1] = "Connecting";
    WebSocketReadyState[WebSocketReadyState["Open"] = 2] = "Open";
    WebSocketReadyState[WebSocketReadyState["Closing"] = 3] = "Closing";
    WebSocketReadyState[WebSocketReadyState["Closed"] = 4] = "Closed";
})(WebSocketReadyState = exports.WebSocketReadyState || (exports.WebSocketReadyState = {}));
exports.default = WebSocketReadyState;
//# sourceMappingURL=WebSocketReadyState.js.map

/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/decider.js":
/*!*********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/libs/voicefocus/decider.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.decideModel = exports.measureAndDecideExecutionApproach = void 0;
const loader_js_1 = __webpack_require__(/*! ./loader.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/loader.js");
const support_js_1 = __webpack_require__(/*! ./support.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/support.js");
const DEFAULT_EXECUTION_QUANTA = 3;
const SIMD_SCORE_FIXED_POINT = 2.50;
const WASM_SCORE_FIXED_POINT = 2.63;
const SINGLE_INLINE_SCORE_MULTIPLIER = 0.6;
const QUALITY_MULTIPLE_QUANTA_SCORE_MULTIPLIER = 0.65;
const INTERACTIVITY_MULTIPLE_QUANTA_SCORE_MULTIPLIER = 0.5;
const WORKER_SCORE_MULTIPLIER = 0.7;
const PERFORMANCE_THRESHOLDS = {
    wasm: {
        noSupport: 0.07,
        inline: {
            c100: 1,
            c50: 0.36,
            c20: 0.16,
            c10: 0.07,
        },
        worker: {
            c100: 0.5,
            c50: 0.18,
            c20: 0.08,
            c10: 0.06,
        },
    },
    simd: {
        noSupport: 0.10,
        inline: {
            c100: 1,
            c50: 0.43,
            c20: 0.3,
            c10: 0.2,
        },
        worker: {
            c100: 0.5,
            c50: 0.21,
            c20: 0.15,
            c10: 0.10,
        },
    },
};
class Estimator {
    constructor(fetchConfig, logger) {
        this.fetchConfig = fetchConfig;
        this.logger = logger;
        const workerURL = `${fetchConfig.paths.workers}estimator-v1.js`;
        this.fetchBehavior = { headers: fetchConfig.headers, escapedQueryString: fetchConfig.escapedQueryString };
        this.worker = loader_js_1.loadWorker(workerURL, 'VoiceFocusEstimator', this.fetchBehavior, logger);
    }
    roundtrip(toSend, receive, expectedKey) {
        return new Promise((resolve, reject) => {
            this.worker.then(worker => {
                let listener;
                listener = (event) => {
                    const { message, key } = event.data;
                    if (message === receive && key === expectedKey) {
                        worker.removeEventListener('message', listener);
                        resolve(event.data);
                    }
                };
                worker.addEventListener('message', listener);
                worker.postMessage(toSend);
            }).catch(e => {
                var _a;
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error('Failed to load worker.', e);
                reject(e);
            });
        });
    }
    supportsSIMD(url) {
        const key = 'simd';
        const path = url || `${this.fetchConfig.paths.wasm}simd-v1.wasm`;
        const toSend = {
            message: 'supports-simd',
            fetchBehavior: this.fetchBehavior,
            path,
            key,
        };
        return this.roundtrip(toSend, 'simd-support', key)
            .then(data => data.supports);
    }
    measure(simd, budget) {
        const benchWASM = `${this.fetchConfig.paths.wasm}bench-v1.wasm`;
        const benchSIMD = `${this.fetchConfig.paths.wasm}bench-v1_simd.wasm`;
        const path = simd ? benchSIMD : benchWASM;
        const key = `bench:${simd}`;
        const toSend = {
            message: 'measure',
            fetchBehavior: this.fetchBehavior,
            budget,
            path,
            key,
        };
        return this.roundtrip(toSend, 'measurement', key)
            .then(data => {
            if (data.measurement) {
                return data.measurement;
            }
            throw new Error('Failed to measure.');
        });
    }
    stop() {
        this.worker.then(worker => {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('Stopping estimator worker.');
            worker.terminate();
        }).catch(e => {
        });
    }
}
const inlineScoreMultiplier = (executionQuanta, usagePreference) => {
    if (executionQuanta === 1) {
        return SINGLE_INLINE_SCORE_MULTIPLIER;
    }
    if (usagePreference === 'quality') {
        return QUALITY_MULTIPLE_QUANTA_SCORE_MULTIPLIER * executionQuanta;
    }
    return INTERACTIVITY_MULTIPLE_QUANTA_SCORE_MULTIPLIER * executionQuanta;
};
const decideExecutionApproach = ({ supportsSIMD, supportsSAB, duration, executionPreference = 'auto', simdPreference, variantPreference = 'auto', usagePreference, executionQuantaPreference = DEFAULT_EXECUTION_QUANTA, }, allThresholds = PERFORMANCE_THRESHOLDS, logger) => {
    const forceSIMD = (simdPreference === 'force');
    const useSIMD = forceSIMD || (simdPreference !== 'disable' && supportsSIMD);
    const checkScores = duration !== -1;
    const baseScore = checkScores ? (useSIMD ? SIMD_SCORE_FIXED_POINT : WASM_SCORE_FIXED_POINT) / duration : 0;
    const thresholds = useSIMD ? allThresholds.simd : allThresholds.wasm;
    const inlineScore = checkScores ? inlineScoreMultiplier(executionQuantaPreference, usagePreference) * baseScore : 0;
    const workerScore = checkScores ? WORKER_SCORE_MULTIPLIER * baseScore : 0;
    const unsupported = (reason) => {
        return {
            supported: false,
            reason,
        };
    };
    if (checkScores) {
        if (baseScore < thresholds.noSupport) {
            return unsupported(`Performance score ${baseScore} worse than threshold ${thresholds.noSupport}.`);
        }
    }
    else {
        if ((executionPreference === 'auto') ||
            (variantPreference === 'auto')) {
            return unsupported(`Missing explicit execution (${executionPreference}) or variant (${variantPreference}) preference, but no scoring performed.`);
        }
    }
    logger === null || logger === void 0 ? void 0 : logger.debug(`Bench duration ${duration} yields inline score ${inlineScore} and worker score ${workerScore}.`);
    const succeed = (processor, executionApproach, variant) => {
        return {
            supported: true,
            useSIMD,
            processor,
            executionApproach,
            variant,
            executionQuanta: (executionApproach === 'inline' ? executionQuantaPreference : undefined),
        };
    };
    const resolveVariant = (score, variant, lookup) => {
        if (variant !== 'auto') {
            if (!checkScores || score > lookup[variant]) {
                return variant;
            }
            return 'failed';
        }
        if (score > lookup.c100) {
            return 'c100';
        }
        if (score > lookup.c50) {
            return 'c50';
        }
        if (score > lookup.c20) {
            return 'c20';
        }
        if (score > lookup.c10) {
            return 'c10';
        }
        return 'failed';
    };
    const reducePreference = (preference) => {
        switch (preference || 'auto') {
            case 'auto': {
                let inlineOption = reducePreference('inline');
                let workerOption = reducePreference('worker');
                logger === null || logger === void 0 ? void 0 : logger.debug(`Reducing auto preference: ${JSON.stringify(inlineOption)} vs ${JSON.stringify(workerOption)}`);
                if (inlineOption.supported === false) {
                    return workerOption;
                }
                if (workerOption.supported === false) {
                    return workerOption;
                }
                if (inlineOption.variant === workerOption.variant || inlineOption.variant === 'c50') {
                    return inlineOption;
                }
                return workerOption;
            }
            case 'worker': {
                if (support_js_1.supportsSharedArrayBuffer(globalThis, window, logger)) {
                    return reducePreference('worker-sab');
                }
                return reducePreference('worker-postMessage');
            }
            case 'inline': {
                const variant = resolveVariant(inlineScore, variantPreference, thresholds.inline);
                if (variant === 'failed') {
                    return unsupported(`Performance score ${inlineScore} not sufficient for inline use with variant preference ${variantPreference}.`);
                }
                ;
                return succeed('voicefocus-inline-processor', 'inline', variant);
            }
            case 'worker-sab': {
                if (!supportsSAB) {
                    const reason = 'Requested worker-sab but no SharedArrayBuffer support.';
                    logger === null || logger === void 0 ? void 0 : logger.warn(reason);
                    return { supported: false, reason };
                }
                const variant = resolveVariant(workerScore, variantPreference, thresholds.worker);
                if (variant === 'failed') {
                    return unsupported(`Performance score ${workerScore} not sufficient for worker use with variant preference ${variantPreference}.`);
                }
                ;
                return succeed('voicefocus-worker-sab-processor', 'worker-sab', variant);
            }
            case 'worker-postMessage': {
                const variant = resolveVariant(workerScore, variantPreference, thresholds.worker);
                if (variant === 'failed') {
                    return unsupported(`Performance score ${workerScore} not sufficient for worker use.`);
                }
                ;
                return succeed('voicefocus-worker-postMessage-processor', 'worker-postMessage', variant);
            }
        }
    };
    return reducePreference(executionPreference);
};
const featureCheck = (forceSIMD, fetchConfig, logger, estimator) => __awaiter(void 0, void 0, void 0, function* () {
    const supports = {
        supportsSIMD: forceSIMD,
        supportsSAB: support_js_1.supportsSharedArrayBuffer(globalThis, window, logger),
        duration: -1,
    };
    if (forceSIMD) {
        logger === null || logger === void 0 ? void 0 : logger.info('Supports SIMD: true (force)');
        return supports;
    }
    const cleanup = !estimator;
    const e = estimator || new Estimator(fetchConfig, logger);
    try {
        const useSIMD = !support_js_1.isOldChrome(window, logger) && (yield e.supportsSIMD());
        logger === null || logger === void 0 ? void 0 : logger.info(`Supports SIMD: ${useSIMD} (force: ${forceSIMD})`);
        supports.supportsSIMD = useSIMD;
        return supports;
    }
    finally {
        if (cleanup) {
            e.stop();
        }
    }
});
const estimateAndFeatureCheck = (forceSIMD, fetchConfig, estimatorBudget, logger) => __awaiter(void 0, void 0, void 0, function* () {
    const estimator = new Estimator(fetchConfig, logger);
    try {
        const supports = yield featureCheck(forceSIMD, fetchConfig, logger, estimator);
        if (supports.supportsSIMD) {
            try {
                supports.duration = yield estimator.measure(true, estimatorBudget);
                logger === null || logger === void 0 ? void 0 : logger.info('SIMD timing:', supports.duration);
                return supports;
            }
            catch (e) {
                logger === null || logger === void 0 ? void 0 : logger.warn('Failed SIMD estimation; falling back to non-SIMD.');
                supports.supportsSIMD = false;
            }
        }
        supports.duration = yield estimator.measure(false, estimatorBudget);
        logger === null || logger === void 0 ? void 0 : logger.info('No-SIMD timing:', supports.duration);
        return supports;
    }
    catch (e) {
        logger === null || logger === void 0 ? void 0 : logger.error('Could not feature check.', e);
        throw e;
    }
    finally {
        estimator.stop();
    }
});
const measureAndDecideExecutionApproach = (spec, fetchConfig, logger, thresholds = PERFORMANCE_THRESHOLDS) => __awaiter(void 0, void 0, void 0, function* () {
    let executionPreference = spec.executionPreference;
    const { usagePreference, variantPreference, simdPreference, estimatorBudget, executionQuantaPreference, } = spec;
    if (usagePreference === 'interactivity' && executionPreference !== 'inline') {
        logger === null || logger === void 0 ? void 0 : logger.debug(`Overriding execution preference ${executionPreference} to reflect interactivity preference.`);
        executionPreference = 'inline';
    }
    const forceSIMD = simdPreference === 'force';
    const knownModel = variantPreference !== 'auto';
    const knownExecution = executionPreference !== 'auto';
    let supports;
    try {
        if (knownModel && knownExecution) {
            supports = yield featureCheck(forceSIMD, fetchConfig, logger);
        }
        else {
            supports = yield estimateAndFeatureCheck(forceSIMD, fetchConfig, estimatorBudget, logger);
        }
    }
    catch (e) {
        logger === null || logger === void 0 ? void 0 : logger.error('Could not load estimator.', e);
        throw new Error('Could not load Voice Focus estimator.');
    }
    return decideExecutionApproach(Object.assign(Object.assign({}, supports), { simdPreference,
        executionPreference,
        variantPreference,
        usagePreference,
        executionQuantaPreference }), thresholds, logger);
});
exports.measureAndDecideExecutionApproach = measureAndDecideExecutionApproach;
const decideModel = ({ category, name, variant, simd }) => {
    return `${category}-${name}-${variant}-v1${simd ? '_simd' : ''}`;
};
exports.decideModel = decideModel;


/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/fetch.js":
/*!*******************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/libs/voicefocus/fetch.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isValidRevisionID = exports.isValidAssetGroup = exports.addQueryParams = exports.withQueryString = exports.withRequestHeaders = exports.fetchWithBehavior = void 0;
function fetchWithBehavior(url, init, fetchBehavior) {
    if (!fetchBehavior) {
        return fetch(url, init);
    }
    const withQuery = withQueryString(url, fetchBehavior);
    const withHeaders = withRequestHeaders(init, fetchBehavior);
    return fetch(withQuery, withHeaders);
}
exports.fetchWithBehavior = fetchWithBehavior;
function withRequestHeaders(init, fetchBehavior) {
    if (!(fetchBehavior === null || fetchBehavior === void 0 ? void 0 : fetchBehavior.headers)) {
        return init;
    }
    if (!init) {
        return {
            headers: fetchBehavior.headers,
        };
    }
    return Object.assign(Object.assign({}, init), { headers: Object.assign(Object.assign({}, init.headers || {}), fetchBehavior.headers) });
}
exports.withRequestHeaders = withRequestHeaders;
function withQueryString(url, fetchBehavior) {
    if (!(fetchBehavior === null || fetchBehavior === void 0 ? void 0 : fetchBehavior.escapedQueryString)) {
        return url;
    }
    const hasQuery = url.lastIndexOf('?') !== -1;
    return `${url}${hasQuery ? '&' : '?'}${fetchBehavior.escapedQueryString}`;
}
exports.withQueryString = withQueryString;
function addQueryParams(fetchBehavior, queryParams) {
    const keys = Object.keys(queryParams);
    if (!keys.length) {
        return fetchBehavior;
    }
    const params = new URLSearchParams(fetchBehavior === null || fetchBehavior === void 0 ? void 0 : fetchBehavior.escapedQueryString);
    for (const key of keys) {
        params.append(key, queryParams[key]);
    }
    return Object.assign(Object.assign({}, fetchBehavior), { escapedQueryString: params.toString() });
}
exports.addQueryParams = addQueryParams;
function isValidAssetGroup(assetGroup) {
    return !!assetGroup && /^[-.a-zA-Z0-9]+$/.test(assetGroup);
}
exports.isValidAssetGroup = isValidAssetGroup;
function isValidRevisionID(revisionID) {
    return !!revisionID && /^[123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ]{22}$/.test(revisionID);
}
exports.isValidRevisionID = isValidRevisionID;


/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/loader.js":
/*!********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/libs/voicefocus/loader.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadWorker = void 0;
const fetch_js_1 = __webpack_require__(/*! ./fetch.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/fetch.js");
const WORKER_FETCH_OPTIONS = {
    method: 'GET',
    mode: 'cors',
    credentials: 'omit',
    redirect: 'follow',
    referrerPolicy: 'no-referrer',
};
const loadWorker = (workerURL, name, fetchBehavior, logger) => {
    logger === null || logger === void 0 ? void 0 : logger.debug(`Loading ${name} worker from ${workerURL}.`);
    let workerURLIsSameOrigin = false;
    try {
        workerURLIsSameOrigin = self.origin === (new URL(workerURL)).origin;
    }
    catch (e) {
        logger === null || logger === void 0 ? void 0 : logger.error('Could not compare origins.', e);
    }
    if (workerURLIsSameOrigin) {
        const workerURLWithQuery = fetch_js_1.withQueryString(workerURL, fetchBehavior);
        return Promise.resolve(new Worker(workerURLWithQuery, { name }));
    }
    return fetch_js_1.fetchWithBehavior(workerURL, WORKER_FETCH_OPTIONS, fetchBehavior).then((res) => {
        if (res.ok) {
            return res.blob()
                .then((blob) => new Worker(window.URL.createObjectURL(blob)));
        }
        throw new Error('Fetch failed.');
    });
};
exports.loadWorker = loadWorker;


/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/support.js":
/*!*********************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/libs/voicefocus/support.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isOldChrome = exports.supportsWASMStreaming = exports.supportsSharedArrayBuffer = exports.supportsWASM = exports.supportsAudioWorklet = exports.supportsWorker = exports.supportsVoiceFocusWorker = exports.supportsWASMPostMessage = exports.isSafari = void 0;
const loader_js_1 = __webpack_require__(/*! ./loader.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/loader.js");
const isSafari = (global = globalThis) => {
    const ua = global.navigator.userAgent;
    const hasSafari = ua.match(/Safari\//);
    const hasChrome = ua.match(/Chrom(?:e|ium)\//);
    return !!(hasSafari && !hasChrome);
};
exports.isSafari = isSafari;
const supportsWASMPostMessage = (global = globalThis) => {
    return !exports.isSafari(global);
};
exports.supportsWASMPostMessage = supportsWASMPostMessage;
const supportsVoiceFocusWorker = (scope = globalThis, fetchConfig, logger) => __awaiter(void 0, void 0, void 0, function* () {
    if (!exports.supportsWorker(scope, logger)) {
        return false;
    }
    const workerURL = `${fetchConfig.paths.workers}worker-v1.js`;
    try {
        const worker = yield loader_js_1.loadWorker(workerURL, 'VoiceFocusTestWorker', fetchConfig, logger);
        try {
            worker.terminate();
        }
        catch (e) {
            logger === null || logger === void 0 ? void 0 : logger.debug('Failed to terminate worker.', e);
        }
        return true;
    }
    catch (e) {
        logger === null || logger === void 0 ? void 0 : logger.info('Failed to fetch and instantiate test worker', e);
        return false;
    }
});
exports.supportsVoiceFocusWorker = supportsVoiceFocusWorker;
const supportsWorker = (scope = globalThis, logger) => {
    try {
        return !!scope.Worker;
    }
    catch (e) {
        logger === null || logger === void 0 ? void 0 : logger.info('Does not support Worker', e);
        return false;
    }
};
exports.supportsWorker = supportsWorker;
const supportsAudioWorklet = (scope = globalThis, logger) => {
    try {
        return !!scope.AudioWorklet && !!scope.AudioWorkletNode;
    }
    catch (e) {
        logger === null || logger === void 0 ? void 0 : logger.info('Does not support Audio Worklet', e);
        return false;
    }
};
exports.supportsAudioWorklet = supportsAudioWorklet;
const supportsWASM = (scope = globalThis, logger) => {
    try {
        return !!scope.WebAssembly && (!!scope.WebAssembly.compile || !!scope.WebAssembly.compileStreaming);
    }
    catch (e) {
        logger === null || logger === void 0 ? void 0 : logger.info('Does not support WASM', e);
        return false;
    }
};
exports.supportsWASM = supportsWASM;
const supportsSharedArrayBuffer = (scope = globalThis, window = globalThis, logger) => {
    try {
        return !!scope.SharedArrayBuffer && (!!window.chrome || !!scope.crossOriginIsolated);
    }
    catch (e) {
        logger === null || logger === void 0 ? void 0 : logger.info('Does not support SharedArrayBuffer.');
        return false;
    }
};
exports.supportsSharedArrayBuffer = supportsSharedArrayBuffer;
const supportsWASMStreaming = (scope = globalThis, logger) => {
    var _a;
    try {
        return !!((_a = scope.WebAssembly) === null || _a === void 0 ? void 0 : _a.compileStreaming);
    }
    catch (e) {
        logger === null || logger === void 0 ? void 0 : logger.info('Does not support WASM streaming compilation', e);
        return false;
    }
};
exports.supportsWASMStreaming = supportsWASMStreaming;
const isOldChrome = (global = globalThis, logger) => {
    try {
        if (!global.chrome) {
            return false;
        }
    }
    catch (e) {
    }
    const versionCheck = global.navigator.userAgent.match(/Chrom(?:e|ium)\/([0-9]+)/);
    if (!versionCheck) {
        logger === null || logger === void 0 ? void 0 : logger.debug('Unknown Chrome version.');
        return true;
    }
    return true;
};
exports.isOldChrome = isOldChrome;


/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/types.js":
/*!*******************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/libs/voicefocus/types.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VoiceFocusAudioWorkletNode = void 0;
class VoiceFocusAudioWorkletNode extends ((typeof globalThis !== 'undefined' && globalThis['AudioWorkletNode']) ||
    class Sadness {
    }) {
}
exports.VoiceFocusAudioWorkletNode = VoiceFocusAudioWorkletNode;


/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/voicefocus.js":
/*!************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/libs/voicefocus/voicefocus.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAudioInput = exports.createAudioContext = exports.VoiceFocus = void 0;
const decider_js_1 = __webpack_require__(/*! ./decider.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/decider.js");
const fetch_js_1 = __webpack_require__(/*! ./fetch.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/fetch.js");
const loader_js_1 = __webpack_require__(/*! ./loader.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/loader.js");
const support_js_1 = __webpack_require__(/*! ./support.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/support.js");
const worklet_inline_node_js_1 = __webpack_require__(/*! ./worklet-inline-node.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/worklet-inline-node.js");
const worklet_worker_sab_node_js_1 = __webpack_require__(/*! ./worklet-worker-sab-node.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/worklet-worker-sab-node.js");
const worklet_worker_postMessage_node_js_1 = __webpack_require__(/*! ./worklet-worker-postMessage-node.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/worklet-worker-postMessage-node.js");
const DEFAULT_AGC_DISABLED_SETTING = {
    useVoiceFocusAGC: false,
    useBuiltInAGC: true,
};
const DEFAULT_AGC_SETTING = DEFAULT_AGC_DISABLED_SETTING;
const DEFAULT_ASSET_GROUP = 'stable-v1';
const DEFAULT_CDN = 'https://static.sdkassets.chime.aws/';
const DEFAULT_PATHS = {
    processors: `${DEFAULT_CDN}processors/`,
    workers: `${DEFAULT_CDN}workers/`,
    wasm: `${DEFAULT_CDN}wasm/`,
    models: `${DEFAULT_CDN}wasm/`,
};
const DEFAULT_CONTEXT_HINT = {
    latencyHint: 0,
};
const BASE_AUDIO_CONSTRAINTS = {
    channelCount: 1,
    echoCancellation: true,
    googEchoCancellation: true,
    noiseSuppression: false,
    googNoiseSuppression: false,
    googHighpassFilter: false,
    googTypingNoiseDetection: false,
};
const DEFAULT_AUDIO_CONSTRAINTS_WITH_BUILTIN_AGC = Object.assign(Object.assign({}, BASE_AUDIO_CONSTRAINTS), { autoGainControl: true, googAutoGainControl: true, googAutoGainControl2: true });
const DEFAULT_AUDIO_CONSTRAINTS_WITHOUT_BUILTIN_AGC = Object.assign(Object.assign({}, BASE_AUDIO_CONSTRAINTS), { autoGainControl: false, googAutoGainControl: false, googAutoGainControl2: false });
const PROCESSORS = {
    'voicefocus-worker-sab-processor': {
        file: 'worklet-worker-sab-processor-v1.js',
        node: worklet_worker_sab_node_js_1.default,
    },
    'voicefocus-worker-postMessage-processor': {
        file: 'worklet-worker-postMessage-processor-v1.js',
        node: worklet_worker_postMessage_node_js_1.default,
    },
    'voicefocus-inline-processor': {
        file: 'worklet-inline-processor-v1.js',
        node: worklet_inline_node_js_1.default,
    },
};
const validateAssetSpec = (assetGroup, revisionID) => {
    if (assetGroup !== undefined && !fetch_js_1.isValidAssetGroup(assetGroup)) {
        throw new Error(`Invalid asset group ${assetGroup}`);
    }
    if (revisionID !== undefined && !fetch_js_1.isValidRevisionID(revisionID)) {
        throw new Error(`Invalid revision ID ${revisionID}`);
    }
};
const mungeConstraints = (constraints, agc) => {
    let defaultConstraints;
    if (agc.useBuiltInAGC) {
        defaultConstraints = DEFAULT_AUDIO_CONSTRAINTS_WITH_BUILTIN_AGC;
    }
    else {
        defaultConstraints = DEFAULT_AUDIO_CONSTRAINTS_WITHOUT_BUILTIN_AGC;
    }
    if (!constraints) {
        return { audio: defaultConstraints };
    }
    if (!constraints.audio) {
        return constraints;
    }
    if (constraints.video) {
        throw new Error('Not adding Voice Focus to multi-device getUserMedia call.');
    }
    return Object.assign(Object.assign({}, constraints), { audio: constraints.audio === true ? defaultConstraints : Object.assign(Object.assign({}, constraints.audio), defaultConstraints) });
};
class VoiceFocus {
    constructor(worker, processorURL, nodeConstructor, nodeOptions, executionQuanta) {
        this.processorURL = processorURL;
        this.nodeConstructor = nodeConstructor;
        this.nodeOptions = nodeOptions;
        this.executionQuanta = executionQuanta;
        this.internal = {
            worker,
            nodeOptions,
        };
    }
    static isSupported(spec, options) {
        const { fetchBehavior, logger } = options || {};
        if (typeof globalThis === 'undefined') {
            logger === null || logger === void 0 ? void 0 : logger.debug('Browser does not have globalThis.');
            return Promise.resolve(false);
        }
        if (!support_js_1.supportsAudioWorklet(globalThis, logger)) {
            logger === null || logger === void 0 ? void 0 : logger.debug('Browser does not support Audio Worklet.');
            return Promise.resolve(false);
        }
        if (!support_js_1.supportsWASM(globalThis, logger)) {
            logger === null || logger === void 0 ? void 0 : logger.debug('Browser does not support WASM.');
            return Promise.resolve(false);
        }
        if (!support_js_1.supportsWASMStreaming(globalThis, logger)) {
            logger === null || logger === void 0 ? void 0 : logger.debug('Browser does not support streaming WASM compilation.');
        }
        const { assetGroup = DEFAULT_ASSET_GROUP, revisionID, paths = DEFAULT_PATHS, } = spec || {};
        validateAssetSpec(assetGroup, revisionID);
        const assetConfig = revisionID ? { revisionID } : { assetGroup };
        const updatedFetchBehavior = fetch_js_1.addQueryParams(fetchBehavior, assetConfig);
        const fetchConfig = Object.assign(Object.assign({}, updatedFetchBehavior), { paths });
        return support_js_1.supportsVoiceFocusWorker(globalThis, fetchConfig, logger);
    }
    static mungeExecutionPreference(preference, logger) {
        const isAuto = (preference === undefined || preference === 'auto');
        if (support_js_1.isSafari(globalThis)) {
            if (isAuto || preference === 'inline') {
                return 'inline';
            }
            if (!isAuto) {
                throw new Error(`Unsupported execution preference ${preference}`);
            }
        }
        if (preference === 'worker-sab' && !support_js_1.supportsSharedArrayBuffer(globalThis, globalThis, logger)) {
            throw new Error(`Unsupported execution preference ${preference}`);
        }
        return preference || 'auto';
    }
    static configure(spec, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { fetchBehavior, logger } = options || {};
            const { category = 'voicefocus', name = 'default', variant: variantPreference = 'auto', assetGroup = DEFAULT_ASSET_GROUP, revisionID, simd = 'detect', executionPreference = 'auto', executionQuantaPreference, usagePreference = 'interactivity', estimatorBudget = 100, paths = DEFAULT_PATHS, thresholds, } = spec || {};
            logger === null || logger === void 0 ? void 0 : logger.debug('Configuring Voice Focus with spec', spec);
            if (category !== undefined && category !== 'voicefocus') {
                throw new Error(`Unrecognized category ${category}`);
            }
            if (name !== undefined && name !== 'default') {
                throw new Error(`Unrecognized feature name ${name}`);
            }
            if (variantPreference !== undefined && !['auto', 'c100', 'c50', 'c20', 'c10'].includes(variantPreference)) {
                throw new Error(`Unrecognized feature variant ${variantPreference}`);
            }
            if (executionQuantaPreference !== undefined && ![1, 2, 3].includes(executionQuantaPreference)) {
                throw new Error(`Unrecognized execution quanta preference ${executionQuantaPreference}`);
            }
            validateAssetSpec(assetGroup, revisionID);
            if (simd !== undefined && !['detect', 'force', 'disable'].includes(simd)) {
                throw new Error(`Unrecognized SIMD option ${simd}`);
            }
            if (executionPreference !== undefined && !['auto', 'inline', 'worker', 'worker-sab', 'worker-postMessage'].includes(executionPreference)) {
                throw new Error(`Unrecognized execution preference ${executionPreference}`);
            }
            if (usagePreference !== undefined && !['quality', 'interactivity'].includes(usagePreference)) {
                throw new Error(`Unrecognized usage preference ${usagePreference}`);
            }
            const executionSpec = {
                executionPreference: this.mungeExecutionPreference(executionPreference, logger),
                usagePreference,
                executionQuantaPreference,
                variantPreference,
                simdPreference: simd,
                estimatorBudget,
            };
            const assetConfig = revisionID ? { revisionID } : { assetGroup };
            const updatedFetchBehavior = fetch_js_1.addQueryParams(fetchBehavior, assetConfig);
            const fetchConfig = Object.assign({ paths }, updatedFetchBehavior);
            const executionDefinition = yield decider_js_1.measureAndDecideExecutionApproach(executionSpec, fetchConfig, logger, thresholds);
            if (executionDefinition.supported === false) {
                return { supported: false, reason: executionDefinition.reason };
            }
            logger === null || logger === void 0 ? void 0 : logger.info('Decided execution approach', executionDefinition);
            const { useSIMD, processor, variant, executionQuanta } = executionDefinition;
            return {
                fetchConfig,
                model: {
                    category: category || 'voicefocus',
                    name: name || 'default',
                    variant,
                    simd: useSIMD,
                },
                processor,
                executionQuanta,
                supported: true,
            };
        });
    }
    static init(configuration, { delegate, preload = true, logger, }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (configuration.supported === false) {
                throw new Error('Voice Focus not supported. Reason: ' + configuration.reason);
            }
            const { model, processor, fetchConfig, executionQuanta, } = configuration;
            const { simd } = model;
            const { paths } = fetchConfig;
            if (processor !== 'voicefocus-inline-processor' &&
                processor !== 'voicefocus-worker-postMessage-processor' &&
                processor !== 'voicefocus-worker-sab-processor') {
                throw new Error(`Unknown processor ${processor}`);
            }
            const modelFile = decider_js_1.decideModel(model);
            logger === null || logger === void 0 ? void 0 : logger.debug(`Decided model ${modelFile}.`);
            const modelURL = `${paths.models}${modelFile}.wasm`;
            const audioBufferURL = `${paths.wasm}audio_buffer-v1${simd ? '_simd' : ''}.wasm`;
            const resamplerURL = `${paths.wasm}resampler-v1${simd ? '_simd' : ''}.wasm`;
            const workerURL = `${paths.workers}worker-v1.js`;
            const { file, node } = PROCESSORS[processor];
            const processorURL = `${paths.processors}${file}`;
            const worker = yield loader_js_1.loadWorker(workerURL, 'VoiceFocusWorker', fetchConfig, logger);
            if (preload) {
                logger === null || logger === void 0 ? void 0 : logger.debug('Preloading', modelURL);
                let message = support_js_1.supportsWASMPostMessage(globalThis) ? 'get-module' : 'get-module-buffer';
                worker.postMessage({
                    message,
                    preload: true,
                    key: 'model',
                    fetchBehavior: fetchConfig,
                    path: modelURL,
                });
            }
            const nodeOptions = {
                processor,
                worker,
                audioBufferURL,
                resamplerURL,
                fetchBehavior: fetchConfig,
                modelURL,
                delegate,
            };
            const factory = new VoiceFocus(worker, processorURL, node, nodeOptions, executionQuanta);
            return Promise.resolve(factory);
        });
    }
    createNode(context, options) {
        var _a;
        const { voiceFocusSampleRate = (context.sampleRate === 16000 ? 16000 : 48000), enabled = true, agc = DEFAULT_AGC_SETTING, } = options || {};
        const processorOptions = {
            voiceFocusSampleRate,
            enabled,
            sendBufferCount: 10,
            prefill: 6,
            agc,
            executionQuanta: this.executionQuanta,
        };
        const url = fetch_js_1.withQueryString(this.processorURL, (_a = this.nodeOptions) === null || _a === void 0 ? void 0 : _a.fetchBehavior);
        return context.audioWorklet
            .addModule(url)
            .then(() => new (this.nodeConstructor)(context, Object.assign(Object.assign({}, this.nodeOptions), { processorOptions })));
    }
    applyToStream(stream, context, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const source = context.createMediaStreamSource(stream);
            const node = yield this.applyToSourceNode(source, context, options);
            const destination = context.createMediaStreamDestination();
            node.connect(destination);
            return {
                node,
                source,
                destination,
                stream: destination.stream,
            };
        });
    }
    applyToSourceNode(source, context, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const node = yield this.createNode(context, options);
            source.connect(node);
            return node;
        });
    }
}
exports.VoiceFocus = VoiceFocus;
const createAudioContext = (contextHint = DEFAULT_CONTEXT_HINT) => {
    return new (window.AudioContext || window.webkitAudioContext)(contextHint);
};
exports.createAudioContext = createAudioContext;
const getAudioInput = (context, inputOptions, voiceFocusOptions) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const { constraints, spec, delegate, preload = true, options } = inputOptions;
    const { logger } = voiceFocusOptions;
    const config = yield VoiceFocus.configure(spec, voiceFocusOptions);
    if (!config.supported) {
        (_a = voiceFocusOptions.logger) === null || _a === void 0 ? void 0 : _a.warn('Voice Focus not supported; returning standard stream.');
        return window.navigator.mediaDevices.getUserMedia(constraints);
    }
    const factory = yield VoiceFocus.init(config, { delegate, preload, logger });
    const agc = ((_b = inputOptions.options) === null || _b === void 0 ? void 0 : _b.agc) || DEFAULT_AGC_SETTING;
    const input = yield window.navigator.mediaDevices.getUserMedia(mungeConstraints(constraints, agc));
    return factory.applyToStream(input, context, options).then(result => result.stream);
});
exports.getAudioInput = getAudioInput;


/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/worklet-inline-node.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/libs/voicefocus/worklet-inline-node.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const support_js_1 = __webpack_require__(/*! ./support.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/support.js");
const types_js_1 = __webpack_require__(/*! ./types.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/types.js");
class VoiceFocusInlineNode extends types_js_1.VoiceFocusAudioWorkletNode {
    constructor(context, options) {
        super(context, options.processor, options);
        const { modelURL, worker, fetchBehavior, logger, } = options;
        this.logger = logger;
        this.port.onmessage = this.onProcessorMessage.bind(this);
        if (logger)
            logger.debug('VoiceFocusInlineNode:', modelURL);
        this.worker = worker;
        this.worker.onmessage = this.onWorkerMessage.bind(this);
        const message = support_js_1.supportsWASMPostMessage(globalThis) ? 'get-module' : 'get-module-buffer';
        this.worker.postMessage({
            message,
            key: 'model',
            fetchBehavior,
            path: modelURL,
        });
    }
    onModuleBufferLoaded(buffer, key) {
        this.port.postMessage({ message: 'module-buffer', buffer, key });
    }
    onModuleLoaded(module, key) {
        this.port.postMessage({ message: 'module', module, key });
    }
    enable() {
        return __awaiter(this, void 0, void 0, function* () {
            this.port.postMessage({ message: 'enable' });
        });
    }
    disable() {
        return __awaiter(this, void 0, void 0, function* () {
            this.port.postMessage({ message: 'disable' });
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.port.postMessage({ message: 'stop' });
            this.disconnect();
        });
    }
    onProcessorMessage(event) {
        var _a;
        const data = event.data;
        switch (data.message) {
            case 'cpu':
                break;
            default:
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('Ignoring processor message.');
        }
    }
    onWorkerMessage(event) {
        const data = event.data;
        switch (data.message) {
            case 'module-buffer':
                if (!data.buffer || !data.key) {
                    return;
                }
                this.onModuleBufferLoaded(data.buffer, data.key);
                break;
            case 'module':
                if (!data.module || !data.key) {
                    return;
                }
                this.onModuleLoaded(data.module, data.key);
                break;
            case 'stopped':
                if (this.worker) {
                    this.worker.terminate();
                }
                break;
            default:
                return;
        }
    }
}
exports.default = VoiceFocusInlineNode;


/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/worklet-worker-postMessage-node.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/libs/voicefocus/worklet-worker-postMessage-node.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const support_js_1 = __webpack_require__(/*! ./support.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/support.js");
const types_js_1 = __webpack_require__(/*! ./types.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/types.js");
class VoiceFocusWorkerPostMessageNode extends types_js_1.VoiceFocusAudioWorkletNode {
    constructor(context, options) {
        super(context, options.processor, options);
        const { modelURL, audioBufferURL, worker, fetchBehavior, delegate, } = options;
        this.delegate = delegate;
        this.worker = worker;
        this.worker.onmessage = this.onWorkerMessage.bind(this);
        this.port.onmessage = this.onProcessorMessage.bind(this);
        this.worker.postMessage({
            message: 'init',
            approach: 'postMessage',
            frames: context.sampleRate === 16000 ? 160 : 480,
            enabled: options.processorOptions.enabled,
            agc: options.processorOptions.agc,
            fetchBehavior,
            model: modelURL,
        });
        const message = support_js_1.supportsWASMPostMessage(globalThis) ? 'get-module' : 'get-module-buffer';
        this.worker.postMessage({
            message,
            key: 'buffer',
            fetchBehavior,
            path: audioBufferURL,
        });
    }
    enable() {
        return __awaiter(this, void 0, void 0, function* () {
            this.worker.postMessage({ message: 'enable' });
        });
    }
    disable() {
        return __awaiter(this, void 0, void 0, function* () {
            this.worker.postMessage({ message: 'disable' });
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.worker.postMessage({ message: 'stop' });
            }
            catch (e) {
            }
            this.disconnect();
        });
    }
    onWorkerMessage(event) {
        var _a;
        const data = event.data;
        switch (data.message) {
            case 'ready':
                this.port.postMessage({ message: 'ready', shared: data.shared }, data.shared ? Object.values(data.shared) : []);
                break;
            case 'data':
                if (!data.buffer) {
                    return;
                }
                this.port.postMessage({ message: 'data', buffer: data.buffer }, [data.buffer]);
                break;
            case 'stopped':
                this.worker.terminate();
                break;
            case 'module-buffer':
            case 'module':
                this.port.postMessage(data);
                break;
            case 'cpu':
                (_a = this.delegate) === null || _a === void 0 ? void 0 : _a.onCPUWarning();
                break;
            case 'processing':
                this.port.postMessage(data);
                break;
            default:
                return;
        }
    }
    onProcessorMessage(event) {
        var _a;
        const data = event.data;
        switch (data.message) {
            case 'data':
                if (!data.buffer) {
                    return;
                }
                this.worker.postMessage({ message: 'data', buffer: data.buffer }, [data.buffer]);
                break;
            case 'cpu':
                (_a = this.delegate) === null || _a === void 0 ? void 0 : _a.onCPUWarning();
                break;
            case 'prepare-for-frames':
                this.worker.postMessage(data);
                break;
            default:
                return;
        }
    }
}
exports.default = VoiceFocusWorkerPostMessageNode;


/***/ }),

/***/ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/worklet-worker-sab-node.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/amazon-chime-sdk-js/libs/voicefocus/worklet-worker-sab-node.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const support_js_1 = __webpack_require__(/*! ./support.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/support.js");
const types_js_1 = __webpack_require__(/*! ./types.js */ "./node_modules/amazon-chime-sdk-js/libs/voicefocus/types.js");
const INDICES = {
    ready: 0,
    enabled: 1,
};
const STATES = {
    disabled: 0,
    enabled: 1,
    stopped: 2,
};
class VoiceFocusWorkerBufferNode extends types_js_1.VoiceFocusAudioWorkletNode {
    constructor(context, options) {
        super(context, options.processor, options);
        const { modelURL, resamplerURL, worker, fetchBehavior, delegate, } = options;
        this.delegate = delegate;
        this.worker = worker;
        this.worker.onmessage = this.onWorkerMessage.bind(this);
        this.port.onmessage = this.onProcessorMessage.bind(this);
        this.worker.postMessage({
            message: 'init',
            approach: 'sab',
            frames: context.sampleRate === 16000 ? 160 : 480,
            enabled: options.processorOptions.enabled,
            model: modelURL,
        });
        const message = support_js_1.supportsWASMPostMessage(globalThis) ? 'get-module' : 'get-module-buffer';
        this.worker.postMessage({
            message,
            key: 'resampler',
            fetchBehavior,
            path: resamplerURL,
        });
    }
    enable() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state) {
                Atomics.store(this.state, INDICES.enabled, STATES.enabled);
                Atomics.notify(this.state, INDICES.ready, 1);
            }
            else {
                this.worker.postMessage({ message: 'enable' });
            }
        });
    }
    disable() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state) {
                Atomics.store(this.state, INDICES.enabled, STATES.disabled);
                Atomics.notify(this.state, INDICES.ready, 1);
            }
            else {
                this.worker.postMessage({ message: 'disable' });
            }
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state) {
                Atomics.store(this.state, INDICES.enabled, STATES.stopped);
                Atomics.notify(this.state, INDICES.ready, 1);
            }
            else {
                try {
                    this.worker.postMessage({ message: 'stop' });
                }
                catch (e) {
                }
            }
            this.disconnect();
        });
    }
    onWorkerMessage(event) {
        var _a;
        const data = event.data;
        switch (data.message) {
            case 'ready':
                if (!data.shared) {
                    throw new Error('No shared state.');
                }
                this.state = new Int32Array(data.shared.state);
                this.port.postMessage(data);
                break;
            case 'stopped':
                this.worker.terminate();
                break;
            case 'module-buffer':
            case 'module':
                this.port.postMessage(data);
                break;
            case 'cpu':
                (_a = this.delegate) === null || _a === void 0 ? void 0 : _a.onCPUWarning();
                break;
            case 'processing':
                this.port.postMessage(data);
                break;
            default:
                return;
        }
    }
    onProcessorMessage(event) {
        var _a;
        const data = event.data;
        switch (data.message) {
            case 'cpu':
                (_a = this.delegate) === null || _a === void 0 ? void 0 : _a.onCPUWarning();
                break;
            case 'prepare-for-frames':
                this.worker.postMessage(data);
                break;
            default:
        }
    }
}
exports.default = VoiceFocusWorkerBufferNode;


/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! process/browser */ "./node_modules/process/browser.js");


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ./bootstrap */ "./resources/js/bootstrap.js");

__webpack_require__(/*! alpinejs */ "./node_modules/alpinejs/dist/alpine.js");

window.chime = __webpack_require__(/*! amazon-chime-sdk-js */ "./node_modules/amazon-chime-sdk-js/build/index.js");

/***/ }),

/***/ "./resources/js/bootstrap.js":
/*!***********************************!*\
  !*** ./resources/js/bootstrap.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

window._ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

window.axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */
// import Echo from 'laravel-echo';
// window.Pusher = require('pusher-js');
// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: process.env.MIX_PUSHER_APP_KEY,
//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,
//     forceTLS: true
// });

/***/ }),

/***/ "./node_modules/detect-browser/es/index.js":
/*!*************************************************!*\
  !*** ./node_modules/detect-browser/es/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserInfo": () => (/* binding */ BrowserInfo),
/* harmony export */   "NodeInfo": () => (/* binding */ NodeInfo),
/* harmony export */   "SearchBotDeviceInfo": () => (/* binding */ SearchBotDeviceInfo),
/* harmony export */   "BotInfo": () => (/* binding */ BotInfo),
/* harmony export */   "ReactNativeInfo": () => (/* binding */ ReactNativeInfo),
/* harmony export */   "detect": () => (/* binding */ detect),
/* harmony export */   "browserName": () => (/* binding */ browserName),
/* harmony export */   "parseUserAgent": () => (/* binding */ parseUserAgent),
/* harmony export */   "detectOS": () => (/* binding */ detectOS),
/* harmony export */   "getNodeVersion": () => (/* binding */ getNodeVersion)
/* harmony export */ });
/* provided dependency */ var process = __webpack_require__(/*! process/browser */ "./node_modules/process/browser.js");
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var BrowserInfo = /** @class */ (function () {
    function BrowserInfo(name, version, os) {
        this.name = name;
        this.version = version;
        this.os = os;
        this.type = 'browser';
    }
    return BrowserInfo;
}());

var NodeInfo = /** @class */ (function () {
    function NodeInfo(version) {
        this.version = version;
        this.type = 'node';
        this.name = 'node';
        this.os = process.platform;
    }
    return NodeInfo;
}());

var SearchBotDeviceInfo = /** @class */ (function () {
    function SearchBotDeviceInfo(name, version, os, bot) {
        this.name = name;
        this.version = version;
        this.os = os;
        this.bot = bot;
        this.type = 'bot-device';
    }
    return SearchBotDeviceInfo;
}());

var BotInfo = /** @class */ (function () {
    function BotInfo() {
        this.type = 'bot';
        this.bot = true; // NOTE: deprecated test name instead
        this.name = 'bot';
        this.version = null;
        this.os = null;
    }
    return BotInfo;
}());

var ReactNativeInfo = /** @class */ (function () {
    function ReactNativeInfo() {
        this.type = 'react-native';
        this.name = 'react-native';
        this.version = null;
        this.os = null;
    }
    return ReactNativeInfo;
}());

// tslint:disable-next-line:max-line-length
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
    ['aol', /AOLShield\/([0-9\._]+)/],
    ['edge', /Edge\/([0-9\._]+)/],
    ['edge-ios', /EdgiOS\/([0-9\._]+)/],
    ['yandexbrowser', /YaBrowser\/([0-9\._]+)/],
    ['kakaotalk', /KAKAOTALK\s([0-9\.]+)/],
    ['samsung', /SamsungBrowser\/([0-9\.]+)/],
    ['silk', /\bSilk\/([0-9._-]+)\b/],
    ['miui', /MiuiBrowser\/([0-9\.]+)$/],
    ['beaker', /BeakerBrowser\/([0-9\.]+)/],
    ['edge-chromium', /EdgA?\/([0-9\.]+)/],
    [
        'chromium-webview',
        /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/,
    ],
    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
    ['phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/],
    ['crios', /CriOS\/([0-9\.]+)(:?\s|$)/],
    ['firefox', /Firefox\/([0-9\.]+)(?:\s|$)/],
    ['fxios', /FxiOS\/([0-9\.]+)/],
    ['opera-mini', /Opera Mini.*Version\/([0-9\.]+)/],
    ['opera', /Opera\/([0-9\.]+)(?:\s|$)/],
    ['opera', /OPR\/([0-9\.]+)(:?\s|$)/],
    ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
    ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
    ['ie', /MSIE\s(7\.0)/],
    ['bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/],
    ['android', /Android\s([0-9\.]+)/],
    ['ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/],
    ['safari', /Version\/([0-9\._]+).*Safari/],
    ['facebook', /FBAV\/([0-9\.]+)/],
    ['instagram', /Instagram\s([0-9\.]+)/],
    ['ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/],
    ['ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
    ['searchbot', SEARCHBOX_UA_REGEX],
];
var operatingSystemRules = [
    ['iOS', /iP(hone|od|ad)/],
    ['Android OS', /Android/],
    ['BlackBerry OS', /BlackBerry|BB10/],
    ['Windows Mobile', /IEMobile/],
    ['Amazon OS', /Kindle/],
    ['Windows 3.11', /Win16/],
    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],
    ['Windows 98', /(Windows 98)|(Win98)/],
    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],
    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],
    ['Windows Server 2003', /(Windows NT 5.2)/],
    ['Windows Vista', /(Windows NT 6.0)/],
    ['Windows 7', /(Windows NT 6.1)/],
    ['Windows 8', /(Windows NT 6.2)/],
    ['Windows 8.1', /(Windows NT 6.3)/],
    ['Windows 10', /(Windows NT 10.0)/],
    ['Windows ME', /Windows ME/],
    ['Open BSD', /OpenBSD/],
    ['Sun OS', /SunOS/],
    ['Chrome OS', /CrOS/],
    ['Linux', /(Linux)|(X11)/],
    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],
    ['QNX', /QNX/],
    ['BeOS', /BeOS/],
    ['OS/2', /OS\/2/],
];
function detect(userAgent) {
    if (!!userAgent) {
        return parseUserAgent(userAgent);
    }
    if (typeof document === 'undefined' &&
        typeof navigator !== 'undefined' &&
        navigator.product === 'ReactNative') {
        return new ReactNativeInfo();
    }
    if (typeof navigator !== 'undefined') {
        return parseUserAgent(navigator.userAgent);
    }
    return getNodeVersion();
}
function matchUserAgent(ua) {
    // opted for using reduce here rather than Array#first with a regex.test call
    // this is primarily because using the reduce we only perform the regex
    // execution once rather than once for the test and for the exec again below
    // probably something that needs to be benchmarked though
    return (ua !== '' &&
        userAgentRules.reduce(function (matched, _a) {
            var browser = _a[0], regex = _a[1];
            if (matched) {
                return matched;
            }
            var uaMatch = regex.exec(ua);
            return !!uaMatch && [browser, uaMatch];
        }, false));
}
function browserName(ua) {
    var data = matchUserAgent(ua);
    return data ? data[0] : null;
}
function parseUserAgent(ua) {
    var matchedRule = matchUserAgent(ua);
    if (!matchedRule) {
        return null;
    }
    var name = matchedRule[0], match = matchedRule[1];
    if (name === 'searchbot') {
        return new BotInfo();
    }
    var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);
    if (versionParts) {
        if (versionParts.length < REQUIRED_VERSION_PARTS) {
            versionParts = __spreadArrays(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));
        }
    }
    else {
        versionParts = [];
    }
    var version = versionParts.join('.');
    var os = detectOS(ua);
    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
    if (searchBotMatch && searchBotMatch[1]) {
        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
    }
    return new BrowserInfo(name, version, os);
}
function detectOS(ua) {
    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];
        var match = regex.exec(ua);
        if (match) {
            return os;
        }
    }
    return null;
}
function getNodeVersion() {
    var isNode = typeof process !== 'undefined' && process.version;
    return isNode ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
    var output = [];
    for (var ii = 0; ii < count; ii++) {
        output.push('0');
    }
    return output;
}


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.20';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "./resources/css/app.css":
/*!*******************************!*\
  !*** ./resources/css/app.css ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// minimal library entry point.


module.exports = __webpack_require__(/*! ./src/index-minimal */ "./node_modules/protobufjs/src/index-minimal.js");


/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = __webpack_require__(/*! ./writer */ "./node_modules/protobufjs/src/writer.js");
protobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ "./node_modules/protobufjs/src/writer_buffer.js");
protobuf.Reader       = __webpack_require__(/*! ./reader */ "./node_modules/protobufjs/src/reader.js");
protobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ "./node_modules/protobufjs/src/reader_buffer.js");

// Utility
protobuf.util         = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");
protobuf.rpc          = __webpack_require__(/*! ./rpc */ "./node_modules/protobufjs/src/rpc.js");
protobuf.roots        = __webpack_require__(/*! ./roots */ "./node_modules/protobufjs/src/roots.js");
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.Reader._configure(protobuf.BufferReader);
    protobuf.util._configure();
}

// Set up buffer utility according to the environment
protobuf.Writer._configure(protobuf.BufferWriter);
configure();


/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Reader;

var util      = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = util.Buffer
    ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer) {
            return util.Buffer.isBuffer(buffer)
                ? new BufferReader(buffer)
                /* istanbul ignore next */
                : create_array(buffer);
        })(buffer);
    }
    /* istanbul ignore next */
    : create_array;

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};


/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = BufferReader;

// extends Reader
var Reader = __webpack_require__(/*! ./reader */ "./node_modules/protobufjs/src/reader.js");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

/* istanbul ignore else */
if (util.Buffer)
    BufferReader.prototype._slice = util.Buffer.prototype.slice;

/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */


/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";

module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */


/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = __webpack_require__(/*! ./rpc/service */ "./node_modules/protobufjs/src/rpc/service.js");


/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Service;

var util = __webpack_require__(/*! ../util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = LongBits;

var util = __webpack_require__(/*! ../util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ "./node_modules/@protobufjs/aspromise/index.js");

// converts to / from base64 encoded strings
util.base64 = __webpack_require__(/*! @protobufjs/base64 */ "./node_modules/@protobufjs/base64/index.js");

// base class of rpc.Service
util.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ "./node_modules/@protobufjs/eventemitter/index.js");

// float handling accross browsers
util.float = __webpack_require__(/*! @protobufjs/float */ "./node_modules/@protobufjs/float/index.js");

// requires modules optionally and hides the call from bundlers
util.inquire = __webpack_require__(/*! @protobufjs/inquire */ "./node_modules/@protobufjs/inquire/index.js");

// converts to / from utf8 encoded strings
util.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ "./node_modules/@protobufjs/utf8/index.js");

// provides a node-like buffer pool in the browser
util.pool = __webpack_require__(/*! @protobufjs/pool */ "./node_modules/@protobufjs/pool/index.js");

// utility to work with the low and high bits of a 64 bit value
util.LongBits = __webpack_require__(/*! ./longbits */ "./node_modules/protobufjs/src/util/longbits.js");

// global object reference
util.global = typeof window !== "undefined" && window
           || typeof __webpack_require__.g !== "undefined" && __webpack_require__.g
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 * @const
 */
util.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: (new Error()).stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};


/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Writer;

var util      = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = util.Buffer
    ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
            return new BufferWriter();
        })();
    }
    /* istanbul ignore next */
    : function create_array() {
        return new Writer();
    };

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = BufferWriter;

// extends Writer
var Writer = __webpack_require__(/*! ./writer */ "./node_modules/protobufjs/src/writer.js");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

var Buffer = util.Buffer;

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Buffer} Buffer
 */
BufferWriter.alloc = function alloc_buffer(size) {
    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
};

var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === "set"
    ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
                           // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
        else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
    };

/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else
        buf.utf8Write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */


/***/ }),

/***/ "./node_modules/ua-parser-js/src/ua-parser.js":
/*!****************************************************!*\
  !*** ./node_modules/ua-parser-js/src/ua-parser.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * UAParser.js v0.7.24
 * Lightweight JavaScript-based User-Agent string parser
 * https://github.com/faisalman/ua-parser-js
 *
 * Copyright © 2012-2021 Faisal Salman <f@faisalman.com>
 * Licensed under MIT License
 */

(function (window, undefined) {

    'use strict';

    //////////////
    // Constants
    /////////////


    var LIBVERSION  = '0.7.24',
        EMPTY       = '',
        UNKNOWN     = '?',
        FUNC_TYPE   = 'function',
        UNDEF_TYPE  = 'undefined',
        OBJ_TYPE    = 'object',
        STR_TYPE    = 'string',
        MAJOR       = 'major', // deprecated
        MODEL       = 'model',
        NAME        = 'name',
        TYPE        = 'type',
        VENDOR      = 'vendor',
        VERSION     = 'version',
        ARCHITECTURE= 'architecture',
        CONSOLE     = 'console',
        MOBILE      = 'mobile',
        TABLET      = 'tablet',
        SMARTTV     = 'smarttv',
        WEARABLE    = 'wearable',
        EMBEDDED    = 'embedded';


    ///////////
    // Helper
    //////////


    var util = {
        extend : function (regexes, extensions) {
            var mergedRegexes = {};
            for (var i in regexes) {
                if (extensions[i] && extensions[i].length % 2 === 0) {
                    mergedRegexes[i] = extensions[i].concat(regexes[i]);
                } else {
                    mergedRegexes[i] = regexes[i];
                }
            }
            return mergedRegexes;
        },
        has : function (str1, str2) {
          if (typeof str1 === "string") {
            return str2.toLowerCase().indexOf(str1.toLowerCase()) !== -1;
          } else {
            return false;
          }
        },
        lowerize : function (str) {
            return str.toLowerCase();
        },
        major : function (version) {
            return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g,'').split(".")[0] : undefined;
        },
        trim : function (str) {
          return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
        }
    };


    ///////////////
    // Map helper
    //////////////


    var mapper = {

        rgx : function (ua, arrays) {

            var i = 0, j, k, p, q, matches, match;

            // loop through all regexes maps
            while (i < arrays.length && !matches) {

                var regex = arrays[i],       // even sequence (0,2,4,..)
                    props = arrays[i + 1];   // odd sequence (1,3,5,..)
                j = k = 0;

                // try matching uastring with regexes
                while (j < regex.length && !matches) {

                    matches = regex[j++].exec(ua);

                    if (!!matches) {
                        for (p = 0; p < props.length; p++) {
                            match = matches[++k];
                            q = props[p];
                            // check if given property is actually array
                            if (typeof q === OBJ_TYPE && q.length > 0) {
                                if (q.length == 2) {
                                    if (typeof q[1] == FUNC_TYPE) {
                                        // assign modified match
                                        this[q[0]] = q[1].call(this, match);
                                    } else {
                                        // assign given value, ignore regex match
                                        this[q[0]] = q[1];
                                    }
                                } else if (q.length == 3) {
                                    // check whether function or regex
                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                        // call function (usually string mapper)
                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                    } else {
                                        // sanitize match using given regex
                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                    }
                                } else if (q.length == 4) {
                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                }
                            } else {
                                this[q] = match ? match : undefined;
                            }
                        }
                    }
                }
                i += 2;
            }
        },

        str : function (str, map) {

            for (var i in map) {
                // check if array
                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                    for (var j = 0; j < map[i].length; j++) {
                        if (util.has(map[i][j], str)) {
                            return (i === UNKNOWN) ? undefined : i;
                        }
                    }
                } else if (util.has(map[i], str)) {
                    return (i === UNKNOWN) ? undefined : i;
                }
            }
            return str;
        }
    };


    ///////////////
    // String map
    //////////////


    var maps = {

        browser : {
            oldsafari : {
                version : {
                    '1.0'   : '/8',
                    '1.2'   : '/1',
                    '1.3'   : '/3',
                    '2.0'   : '/412',
                    '2.0.2' : '/416',
                    '2.0.3' : '/417',
                    '2.0.4' : '/419',
                    '?'     : '/'
                }
            }
        },

        device : {
            amazon : {
                model : {
                    'Fire Phone' : ['SD', 'KF']
                }
            },
            sprint : {
                model : {
                    'Evo Shift 4G' : '7373KT'
                },
                vendor : {
                    'HTC'       : 'APA',
                    'Sprint'    : 'Sprint'
                }
            }
        },

        os : {
            windows : {
                version : {
                    'ME'        : '4.90',
                    'NT 3.11'   : 'NT3.51',
                    'NT 4.0'    : 'NT4.0',
                    '2000'      : 'NT 5.0',
                    'XP'        : ['NT 5.1', 'NT 5.2'],
                    'Vista'     : 'NT 6.0',
                    '7'         : 'NT 6.1',
                    '8'         : 'NT 6.2',
                    '8.1'       : 'NT 6.3',
                    '10'        : ['NT 6.4', 'NT 10.0'],
                    'RT'        : 'ARM'
                }
            }
        }
    };


    //////////////
    // Regex map
    /////////////


    var regexes = {

        browser : [[

            // Presto based
            /(opera\smini)\/([\w\.-]+)/i,                                       // Opera Mini
            /(opera\s[mobiletab]{3,6}).+version\/([\w\.-]+)/i,                  // Opera Mobi/Tablet
            /(opera).+version\/([\w\.]+)/i,                                     // Opera > 9.80
            /(opera)[\/\s]+([\w\.]+)/i                                          // Opera < 9.80
            ], [NAME, VERSION], [

            /(opios)[\/\s]+([\w\.]+)/i                                          // Opera mini on iphone >= 8.0
            ], [[NAME, 'Opera Mini'], VERSION], [

            /\s(opr)\/([\w\.]+)/i                                               // Opera Webkit
            ], [[NAME, 'Opera'], VERSION], [

            // Mixed
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i,
                                                                                // Lunascape/Maxthon/Netfront/Jasmine/Blazer
            // Trident based
            /(avant\s|iemobile|slim)(?:browser)?[\/\s]?([\w\.]*)/i,
                                                                                // Avant/IEMobile/SlimBrowser
            /(bidubrowser|baidubrowser)[\/\s]?([\w\.]+)/i,                      // Baidu Browser
            /(?:ms|\()(ie)\s([\w\.]+)/i,                                        // Internet Explorer

            // Webkit/KHTML based
            /(rekonq)\/([\w\.]*)/i,                                             // Rekonq
            /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon)\/([\w\.-]+)/i
                                                                                // Chromium/Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
            ], [NAME, VERSION], [

            /(konqueror)\/([\w\.]+)/i                                           // Konqueror
            ], [[NAME, 'Konqueror'], VERSION], [

            /(trident).+rv[:\s]([\w\.]{1,9}).+like\sgecko/i                     // IE11
            ], [[NAME, 'IE'], VERSION], [

            /(edge|edgios|edga|edg)\/((\d+)?[\w\.]+)/i                          // Microsoft Edge
            ], [[NAME, 'Edge'], VERSION], [

            /(yabrowser)\/([\w\.]+)/i                                           // Yandex
            ], [[NAME, 'Yandex'], VERSION], [

            /(Avast)\/([\w\.]+)/i                                               // Avast Secure Browser
            ], [[NAME, 'Avast Secure Browser'], VERSION], [

            /(AVG)\/([\w\.]+)/i                                                 // AVG Secure Browser
            ], [[NAME, 'AVG Secure Browser'], VERSION], [

            /(puffin)\/([\w\.]+)/i                                              // Puffin
            ], [[NAME, 'Puffin'], VERSION], [

            /(focus)\/([\w\.]+)/i                                               // Firefox Focus
            ], [[NAME, 'Firefox Focus'], VERSION], [

            /(opt)\/([\w\.]+)/i                                                 // Opera Touch
            ], [[NAME, 'Opera Touch'], VERSION], [

            /((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i         // UCBrowser
            ], [[NAME, 'UCBrowser'], VERSION], [

            /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
            ], [[NAME, /_/g, ' '], VERSION], [

            /(windowswechat qbcore)\/([\w\.]+)/i                                // WeChat Desktop for Windows Built-in Browser
            ], [[NAME, 'WeChat(Win) Desktop'], VERSION], [

            /(micromessenger)\/([\w\.]+)/i                                      // WeChat
            ], [[NAME, 'WeChat'], VERSION], [

            /(brave)\/([\w\.]+)/i                                               // Brave browser
            ], [[NAME, 'Brave'], VERSION], [

            /(whale)\/([\w\.]+)/i                                               // Whale browser
            ], [[NAME, 'Whale'], VERSION], [

            /(qqbrowserlite)\/([\w\.]+)/i                                       // QQBrowserLite
            ], [NAME, VERSION], [

            /(QQ)\/([\d\.]+)/i                                                  // QQ, aka ShouQ
            ], [NAME, VERSION], [

            /m?(qqbrowser)[\/\s]?([\w\.]+)/i                                    // QQBrowser
            ], [NAME, VERSION], [

            /(baiduboxapp)[\/\s]?([\w\.]+)/i                                    // Baidu App
            ], [NAME, VERSION], [

            /(2345Explorer)[\/\s]?([\w\.]+)/i                                   // 2345 Browser
            ], [NAME, VERSION], [

            /(MetaSr)[\/\s]?([\w\.]+)/i                                         // SouGouBrowser
            ], [NAME], [

            /(LBBROWSER)/i                                                      // LieBao Browser
            ], [NAME], [

            /xiaomi\/miuibrowser\/([\w\.]+)/i                                   // MIUI Browser
            ], [VERSION, [NAME, 'MIUI Browser']], [

            /;fbav\/([\w\.]+);/i                                                // Facebook App for iOS & Android with version
            ], [VERSION, [NAME, 'Facebook']], [
            
            /FBAN\/FBIOS|FB_IAB\/FB4A/i                                         // Facebook App for iOS & Android without version
            ], [[NAME, 'Facebook']], [

            /safari\s(line)\/([\w\.]+)/i,                                       // Line App for iOS
            /android.+(line)\/([\w\.]+)\/iab/i                                  // Line App for Android
            ], [NAME, VERSION], [

            /headlesschrome(?:\/([\w\.]+)|\s)/i                                 // Chrome Headless
            ], [VERSION, [NAME, 'Chrome Headless']], [

            /\swv\).+(chrome)\/([\w\.]+)/i                                      // Chrome WebView
            ], [[NAME, /(.+)/, '$1 WebView'], VERSION], [

            /((?:oculus|samsung)browser)\/([\w\.]+)/i
            ], [[NAME, /(.+(?:g|us))(.+)/, '$1 $2'], VERSION], [                // Oculus / Samsung Browser

            /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i        // Android Browser
            ], [VERSION, [NAME, 'Android Browser']], [

            /(coc_coc_browser)\/([\w\.]+)/i                                     // Coc Coc Browser
            ], [[NAME, 'Coc Coc'], VERSION], [

              /(sailfishbrowser)\/([\w\.]+)/i                                     // Sailfish Browser
            ], [[NAME, 'Sailfish Browser'], VERSION], [

            /(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i
                                                                                // Chrome/OmniWeb/Arora/Tizen/Nokia
            ], [NAME, VERSION], [

            /(dolfin)\/([\w\.]+)/i                                              // Dolphin
            ], [[NAME, 'Dolphin'], VERSION], [

            /(qihu|qhbrowser|qihoobrowser|360browser)/i                         // 360
            ], [[NAME, '360 Browser']], [

            /((?:android.+)crmo|crios)\/([\w\.]+)/i                             // Chrome for Android/iOS
            ], [[NAME, 'Chrome'], VERSION], [

            /(coast)\/([\w\.]+)/i                                               // Opera Coast
            ], [[NAME, 'Opera Coast'], VERSION], [

            /fxios\/([\w\.-]+)/i                                                // Firefox for iOS
            ], [VERSION, [NAME, 'Firefox']], [

            /version\/([\w\.]+)\s.*mobile\/\w+\s(safari)/i                      // Mobile Safari
            ], [VERSION, [NAME, 'Mobile Safari']], [

            /version\/([\w\.]+)\s.*(mobile\s?safari|safari)/i                   // Safari & Safari Mobile
            ], [VERSION, NAME], [

            /webkit.+?(gsa)\/([\w\.]+)\s.*(mobile\s?safari|safari)(\/[\w\.]+)/i // Google Search Appliance on iOS
            ], [[NAME, 'GSA'], VERSION], [

            /webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i                     // Safari < 3.0
            ], [NAME, [VERSION, mapper.str, maps.browser.oldsafari.version]], [

            /(webkit|khtml)\/([\w\.]+)/i
            ], [NAME, VERSION], [

            // Gecko based
            /(navigator|netscape)\/([\w\.-]+)/i                                 // Netscape
            ], [[NAME, 'Netscape'], VERSION], [
            /(swiftfox)/i,                                                      // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,
                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
            /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)$/i,

                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(firefox)\/([\w\.]+)\s[\w\s\-]+\/[\w\.]+$/i,                       // Other Firefox-based
            /(mozilla)\/([\w\.]+)\s.+rv\:.+gecko\/\d+/i,                        // Mozilla

            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,
                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir
            /(links)\s\(([\w\.]+)/i,                                            // Links
            /(gobrowser)\/?([\w\.]*)/i,                                         // GoBrowser
            /(ice\s?browser)\/v?([\w\._]+)/i,                                   // ICE Browser
            /(mosaic)[\/\s]([\w\.]+)/i                                          // Mosaic
            ], [NAME, VERSION]
        ],

        cpu : [[

            /(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i                     // AMD64
            ], [[ARCHITECTURE, 'amd64']], [

            /(ia32(?=;))/i                                                      // IA32 (quicktime)
            ], [[ARCHITECTURE, util.lowerize]], [

            /((?:i[346]|x)86)[;\)]/i                                            // IA32
            ], [[ARCHITECTURE, 'ia32']], [

            // PocketPC mistakenly identified as PowerPC
            /windows\s(ce|mobile);\sppc;/i
            ], [[ARCHITECTURE, 'arm']], [

            /((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i                           // PowerPC
            ], [[ARCHITECTURE, /ower/, '', util.lowerize]], [

            /(sun4\w)[;\)]/i                                                    // SPARC
            ], [[ARCHITECTURE, 'sparc']], [

            /((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+[;l]))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i
                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
            ], [[ARCHITECTURE, util.lowerize]]
        ],

        device : [[

            /\((ipad|playbook);[\w\s\),;-]+(rim|apple)/i                        // iPad/PlayBook
            ], [MODEL, VENDOR, [TYPE, TABLET]], [

            /applecoremedia\/[\w\.]+ \((ipad)/                                  // iPad
            ], [MODEL, [VENDOR, 'Apple'], [TYPE, TABLET]], [

            /(apple\s{0,1}tv)/i                                                 // Apple TV
            ], [[MODEL, 'Apple TV'], [VENDOR, 'Apple'], [TYPE, SMARTTV]], [

            /(archos)\s(gamepad2?)/i,                                           // Archos
            /(hp).+(touchpad)/i,                                                // HP TouchPad
            /(hp).+(tablet)/i,                                                  // HP Tablet
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /\s(nook)[\w\s]+build\/(\w+)/i,                                     // Nook
            /(dell)\s(strea[kpr\s\d]*[\dko])/i                                  // Dell Streak
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /(kf[A-z]+)(\sbuild\/|\)).+silk\//i                                 // Kindle Fire HD
            ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [
            /(sd|kf)[0349hijorstuw]+(\sbuild\/|\)).+silk\//i                    // Fire Phone
            ], [[MODEL, mapper.str, maps.device.amazon.model], [VENDOR, 'Amazon'], [TYPE, MOBILE]], [
            /android.+aft([\w])(\sbuild\/|\))/i                                 // Fire TV
            ], [MODEL, [VENDOR, 'Amazon'], [TYPE, SMARTTV]], [

            /\((ip[honed|\s\w*]+);.+(apple)/i                                   // iPod/iPhone
            ], [MODEL, VENDOR, [TYPE, MOBILE]], [
            /\((ip[honed|\s\w*]+);/i                                            // iPod/iPhone
            ], [MODEL, [VENDOR, 'Apple'], [TYPE, MOBILE]], [

            /(blackberry)[\s-]?(\w+)/i,                                         // BlackBerry
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i,
                                                                                // BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
            /(hp)\s([\w\s]+\w)/i,                                               // HP iPAQ
            /(asus)-?(\w+)/i                                                    // Asus
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /\(bb10;\s(\w+)/i                                                   // BlackBerry 10
            ], [MODEL, [VENDOR, 'BlackBerry'], [TYPE, MOBILE]], [
                                                                                // Asus Tablets
            /android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone|p00c)/i
            ], [MODEL, [VENDOR, 'Asus'], [TYPE, TABLET]], [

            /(sony)\s(tablet\s[ps])\sbuild\//i,                                  // Sony
            /(sony)?(?:sgp.+)\sbuild\//i
            ], [[VENDOR, 'Sony'], [MODEL, 'Xperia Tablet'], [TYPE, TABLET]], [
            /android.+\s([c-g]\d{4}|so[-l]\w+)(?=\sbuild\/|\).+chrome\/(?![1-6]{0,1}\d\.))/i
            ], [MODEL, [VENDOR, 'Sony'], [TYPE, MOBILE]], [

            /\s(ouya)\s/i,                                                      // Ouya
            /(nintendo)\s([wids3u]+)/i                                          // Nintendo
            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [

            /android.+;\s(shield)\sbuild/i                                      // Nvidia
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [

            /(playstation\s[34portablevi]+)/i                                   // Playstation
            ], [MODEL, [VENDOR, 'Sony'], [TYPE, CONSOLE]], [

            /(sprint\s(\w+))/i                                                  // Sprint Phones
            ], [[VENDOR, mapper.str, maps.device.sprint.vendor], [MODEL, mapper.str, maps.device.sprint.model], [TYPE, MOBILE]], [

            /(htc)[;_\s-]{1,2}([\w\s]+(?=\)|\sbuild)|\w+)/i,                    // HTC
            /(zte)-(\w*)/i,                                                     // ZTE
            /(alcatel|geeksphone|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i
                                                                                // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

            /(nexus\s9)/i                                                       // HTC Nexus 9
            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [

            /d\/huawei([\w\s-]+)[;\)]/i,                                        // Huawei
            /android.+\s(nexus\s6p|vog-[at]?l\d\d|ane-[at]?l[x\d]\d|eml-a?l\d\da?|lya-[at]?l\d[\dc]|clt-a?l\d\di?)/i

            ], [MODEL, [VENDOR, 'Huawei'], [TYPE, MOBILE]], [

            /android.+(bah2?-a?[lw]\d{2})/i                                     // Huawei MediaPad
            ], [MODEL, [VENDOR, 'Huawei'], [TYPE, TABLET]], [

            /(microsoft);\s(lumia[\s\w]+)/i                                     // Microsoft Lumia
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /[\s\(;](xbox(?:\sone)?)[\s\);]/i                                   // Microsoft Xbox
            ], [MODEL, [VENDOR, 'Microsoft'], [TYPE, CONSOLE]], [
            /(kin\.[onetw]{3})/i                                                // Microsoft Kin
            ], [[MODEL, /\./g, ' '], [VENDOR, 'Microsoft'], [TYPE, MOBILE]], [

                                                                                // Motorola
            /\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)[\w\s]+build\//i,
            /mot[\s-]?(\w*)/i,
            /(XT\d{3,4}) build\//i,
            /(nexus\s6)/i
            ], [MODEL, [VENDOR, 'Motorola'], [TYPE, MOBILE]], [
            /android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i
            ], [MODEL, [VENDOR, 'Motorola'], [TYPE, TABLET]], [

            /hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i            // HbbTV devices
            ], [[VENDOR, util.trim], [MODEL, util.trim], [TYPE, SMARTTV]], [

            /hbbtv.+maple;(\d+)/i
            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, 'Samsung'], [TYPE, SMARTTV]], [

            /\(dtv[\);].+(aquos)/i                                              // Sharp
            ], [MODEL, [VENDOR, 'Sharp'], [TYPE, SMARTTV]], [

            /android.+((sch-i[89]0\d|shw-m380s|SM-P605|SM-P610|SM-P587|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,
            /((SM-T\w+))/i
            ], [[VENDOR, 'Samsung'], MODEL, [TYPE, TABLET]], [                  // Samsung
            /smart-tv.+(samsung)/i
            ], [VENDOR, [TYPE, SMARTTV], MODEL], [
            /((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,
            /(sam[sung]*)[\s-]*(\w+-?[\w-]*)/i,
            /sec-((sgh\w+))/i
            ], [[VENDOR, 'Samsung'], MODEL, [TYPE, MOBILE]], [

            /sie-(\w*)/i                                                        // Siemens
            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [

            /(maemo|nokia).*(n900|lumia\s\d+)/i,                                // Nokia
            /(nokia)[\s_-]?([\w-]*)/i
            ], [[VENDOR, 'Nokia'], MODEL, [TYPE, MOBILE]], [

            /android[x\d\.\s;]+\s([ab][1-7]\-?[0178a]\d\d?)/i                   // Acer
            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

            /android.+([vl]k\-?\d{3})\s+build/i                                 // LG Tablet
            ], [MODEL, [VENDOR, 'LG'], [TYPE, TABLET]], [
            /android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i                     // LG Tablet
            ], [[VENDOR, 'LG'], MODEL, [TYPE, TABLET]], [
            /linux;\snetcast.+smarttv/i,                                        // LG SmartTV
            /lg\snetcast\.tv-201\d/i
            ], [[VENDOR, 'LG'], MODEL, [TYPE, SMARTTV]], [
            /(nexus\s[45])/i,                                                   // LG
            /lg[e;\s\/-]+(\w*)/i,
            /android.+lg(\-?[\d\w]+)\s+build/i
            ], [MODEL, [VENDOR, 'LG'], [TYPE, MOBILE]], [

            /(lenovo)\s?(s(?:5000|6000)(?:[\w-]+)|tab(?:[\s\w]+))/i             // Lenovo tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [
            /android.+(ideatab[a-z0-9\-\s]+)/i                                  // Lenovo
            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [
            /(lenovo)[_\s-]?([\w-]+)/i
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /linux;.+((jolla));/i                                               // Jolla
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /((pebble))app\/[\d\.]+\s/i                                         // Pebble
            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [

            /android.+;\s(oppo)\s?([\w\s]+)\sbuild/i                            // OPPO
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /crkey/i                                                            // Google Chromecast
            ], [[MODEL, 'Chromecast'], [VENDOR, 'Google'], [TYPE, SMARTTV]], [

            /android.+;\s(glass)\s\d/i                                          // Google Glass
            ], [MODEL, [VENDOR, 'Google'], [TYPE, WEARABLE]], [

            /android.+;\s(pixel c)[\s)]/i                                       // Google Pixel C
            ], [MODEL, [VENDOR, 'Google'], [TYPE, TABLET]], [

            /android.+;\s(pixel( [2-9]a?)?( xl)?)[\s)]/i                        // Google Pixel
            ], [MODEL, [VENDOR, 'Google'], [TYPE, MOBILE]], [

            /android.+;\s(\w+)\s+build\/hm\1/i,                                 // Xiaomi Hongmi 'numeric' models
            /android.+(hm[\s\-_]?note?[\s_]?(?:\d\w)?)\sbuild/i,                // Xiaomi Hongmi
            /android.+(redmi[\s\-_]?(?:note|k)?(?:[\s_]?[\w\s]+))(?:\sbuild|\))/i,      
                                                                                // Xiaomi Redmi
            /android.+(mi[\s\-_]?(?:a\d|one|one[\s_]plus|note lte)?[\s_]?(?:\d?\w?)[\s_]?(?:plus)?)\sbuild/i    
                                                                                // Xiaomi Mi
            ], [[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, MOBILE]], [
            /android.+(mi[\s\-_]?(?:pad)(?:[\s_]?[\w\s]+))(?:\sbuild|\))/i     // Mi Pad tablets
            ],[[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, TABLET]], [
            /android.+;\s(m[1-5]\snote)\sbuild/i                                // Meizu
            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [
            /(mz)-([\w-]{2,})/i
            ], [[VENDOR, 'Meizu'], MODEL, [TYPE, MOBILE]], [

            /android.+a000(1)\s+build/i,                                        // OnePlus
            /android.+oneplus\s(a\d{4})[\s)]/i
            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

            /android.+[;\/]\s*(RCT[\d\w]+)\s+build/i                            // RCA Tablets
            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [

            /android.+[;\/\s](Venue[\d\s]{2,7})\s+build/i                       // Dell Venue Tablets
            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Q[T|M][\d\w]+)\s+build/i                         // Verizon Tablet
            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [

            /android.+[;\/]\s+(Barnes[&\s]+Noble\s+|BN[RT])(\S(?:.*\S)?)\s+build/i     // Barnes & Noble Tablet
            ], [[VENDOR, 'Barnes & Noble'], MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s+(TM\d{3}.*\b)\s+build/i                           // Barnes & Noble Tablet
            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [

            /android.+;\s(k88)\sbuild/i                                         // ZTE K Series Tablet
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(gen\d{3})\s+build.*49h/i                         // Swiss GEN Mobile
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [

            /android.+[;\/]\s*(zur\d{3})\s+build/i                              // Swiss ZUR Tablet
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [

            /android.+[;\/]\s*((Zeki)?TB.*\b)\s+build/i                         // Zeki Tablets
            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [

            /(android).+[;\/]\s+([YR]\d{2})\s+build/i,
            /android.+[;\/]\s+(Dragon[\-\s]+Touch\s+|DT)(\w{5})\sbuild/i        // Dragon Touch Tablet
            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s*(NS-?\w{0,9})\sbuild/i                            // Insignia Tablets
            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [

            /android.+[;\/]\s*((NX|Next)-?\w{0,9})\s+build/i                    // NextBook Tablets
            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Xtreme\_)?(V(1[045]|2[015]|30|40|60|7[05]|90))\s+build/i
            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [                    // Voice Xtreme Phones

            /android.+[;\/]\s*(LVTEL\-)?(V1[12])\s+build/i                     // LvTel Phones
            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [

            /android.+;\s(PH-1)\s/i
            ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [                // Essential PH-1

            /android.+[;\/]\s*(V(100MD|700NA|7011|917G).*\b)\s+build/i          // Envizen Tablets
            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Le[\s\-]+Pan)[\s\-]+(\w{1,9})\s+build/i          // Le Pan Tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s*(Trio[\s\w\-\.]+)\s+build/i                       // MachSpeed Tablets
            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [

            /android.+[;\/]\s*(Trinity)[\-\s]*(T\d{3})\s+build/i                // Trinity Tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /android.+[;\/]\s*TU_(1491)\s+build/i                               // Rotor Tablets
            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [

            //android.+(KS(.+))\s+build/i                                        // Amazon Kindle Tablets
            //], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [

            /android.+(Gigaset)[\s\-]+(Q\w{1,9})\s+build/i                      // Gigaset Tablets
            ], [VENDOR, MODEL, [TYPE, TABLET]], [
                                                                                // Android Phones from Unidentified Vendors
            /android .+?; ([^;]+?)(?: build|\) applewebkit).+? mobile safari/i
            ], [MODEL, [TYPE, MOBILE]], [
                                                                                // Android Tablets from Unidentified Vendors
            /android .+?;\s([^;]+?)(?: build|\) applewebkit).+?(?! mobile) safari/i
            ], [MODEL, [TYPE, TABLET]], [

            /\s(tablet|tab)[;\/]/i,                                             // Unidentifiable Tablet
            /\s(mobile)(?:[;\/]|\ssafari)/i                                     // Unidentifiable Mobile
            ], [[TYPE, util.lowerize], VENDOR, MODEL], [

            /[\s\/\(](smart-?tv)[;\)]/i                                         // SmartTV
            ], [[TYPE, SMARTTV]], [

            /(android[\w\.\s\-]{0,9});.+build/i                                 // Generic Android Device
            ], [MODEL, [VENDOR, 'Generic']], [

            /(phone)/i
            ], [[TYPE, MOBILE]]
        ],

        engine : [[

            /windows.+\sedge\/([\w\.]+)/i                                       // EdgeHTML
            ], [VERSION, [NAME, 'EdgeHTML']], [

            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i                         // Blink
            ], [VERSION, [NAME, 'Blink']], [

            /(presto)\/([\w\.]+)/i,                                             // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
                                                                                // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
            /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,                          // KHTML/Tasman/Links
            /(icab)[\/\s]([23]\.[\d\.]+)/i                                      // iCab
            ], [NAME, VERSION], [

            /rv\:([\w\.]{1,9}).+(gecko)/i                                       // Gecko
            ], [VERSION, NAME]
        ],

        os : [[

            // Xbox, consider this before other Windows-based devices
            /(xbox);\s+xbox\s([^\);]+)/i,                                       // Microsoft Xbox (360, One, X, S, Series X, Series S)

            // Windows based
            /microsoft\s(windows)\s(vista|xp)/i                                 // Windows (iTunes)
            ], [NAME, VERSION], [
            /(windows)\snt\s6\.2;\s(arm)/i,                                     // Windows RT
            /(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i,                   // Windows Phone
            /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i
            ], [NAME, [VERSION, mapper.str, maps.os.windows.version]], [
            /(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i
            ], [[NAME, 'Windows'], [VERSION, mapper.str, maps.os.windows.version]], [

            // Mobile/Embedded OS
            /\((bb)(10);/i                                                      // BlackBerry 10
            ], [[NAME, 'BlackBerry'], VERSION], [
            /(blackberry)\w*\/?([\w\.]*)/i,                                     // Blackberry
            /(tizen|kaios)[\/\s]([\w\.]+)/i,                                    // Tizen/KaiOS
            /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|sailfish|contiki)[\/\s-]?([\w\.]*)/i
                                                                                // Android/WebOS/Palm/QNX/Bada/RIM/MeeGo/Contiki/Sailfish OS
            ], [NAME, VERSION], [
            /(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]*)/i                  // Symbian
            ], [[NAME, 'Symbian'], VERSION], [
            /\((series40);/i                                                    // Series 40
            ], [NAME], [
            /mozilla.+\(mobile;.+gecko.+firefox/i                               // Firefox OS
            ], [[NAME, 'Firefox OS'], VERSION], [

            // Google Chromecast
            /crkey\/([\d\.]+)/i                                                 // Google Chromecast
            ], [VERSION, [NAME, 'Chromecast']], [

            // Console
            /(nintendo|playstation)\s([wids34portablevu]+)/i,                   // Nintendo/Playstation

            // GNU/Linux based
            /(mint)[\/\s\(]?(\w*)/i,                                            // Mint
            /(mageia|vectorlinux)[;\s]/i,                                       // Mageia/VectorLinux
            /(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]*)/i,
                                                                                // Joli/Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware
                                                                                // Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus
            /(hurd|linux)\s?([\w\.]*)/i,                                        // Hurd/Linux
            /(gnu)\s?([\w\.]*)/i                                                // GNU
            ], [NAME, VERSION], [

            /(cros)\s[\w]+\s([\w\.]+\w)/i                                       // Chromium OS
            ], [[NAME, 'Chromium OS'], VERSION],[

            // Solaris
            /(sunos)\s?([\w\.\d]*)/i                                            // Solaris
            ], [[NAME, 'Solaris'], VERSION], [

            // BSD based
            /\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]*)/i                    // FreeBSD/NetBSD/OpenBSD/PC-BSD/DragonFly
            ], [NAME, VERSION],[

            /(haiku)\s(\w+)/i                                                   // Haiku
            ], [NAME, VERSION],[

            /cfnetwork\/.+darwin/i,
            /ip[honead]{2,4}(?:.*os\s([\w]+)\slike\smac|;\sopera)/i             // iOS
            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [

            /(mac\sos\sx)\s?([\w\s\.]*)/i,
            /(macintosh|mac(?=_powerpc)\s)/i                                    // Mac OS
            ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [

            // Other
            /((?:open)?solaris)[\/\s-]?([\w\.]*)/i,                             // Solaris
            /(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i,                                // AIX
            /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms|fuchsia)/i,
                                                                                // Plan9/Minix/BeOS/OS2/AmigaOS/MorphOS/RISCOS/OpenVMS/Fuchsia
            /(unix)\s?([\w\.]*)/i                                               // UNIX
            ], [NAME, VERSION]
        ]
    };


    /////////////////
    // Constructor
    ////////////////
    var UAParser = function (uastring, extensions) {

        if (typeof uastring === 'object') {
            extensions = uastring;
            uastring = undefined;
        }

        if (!(this instanceof UAParser)) {
            return new UAParser(uastring, extensions).getResult();
        }

        var ua = uastring || ((window && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);
        var rgxmap = extensions ? util.extend(regexes, extensions) : regexes;

        this.getBrowser = function () {
            var browser = { name: undefined, version: undefined };
            mapper.rgx.call(browser, ua, rgxmap.browser);
            browser.major = util.major(browser.version); // deprecated
            return browser;
        };
        this.getCPU = function () {
            var cpu = { architecture: undefined };
            mapper.rgx.call(cpu, ua, rgxmap.cpu);
            return cpu;
        };
        this.getDevice = function () {
            var device = { vendor: undefined, model: undefined, type: undefined };
            mapper.rgx.call(device, ua, rgxmap.device);
            return device;
        };
        this.getEngine = function () {
            var engine = { name: undefined, version: undefined };
            mapper.rgx.call(engine, ua, rgxmap.engine);
            return engine;
        };
        this.getOS = function () {
            var os = { name: undefined, version: undefined };
            mapper.rgx.call(os, ua, rgxmap.os);
            return os;
        };
        this.getResult = function () {
            return {
                ua      : this.getUA(),
                browser : this.getBrowser(),
                engine  : this.getEngine(),
                os      : this.getOS(),
                device  : this.getDevice(),
                cpu     : this.getCPU()
            };
        };
        this.getUA = function () {
            return ua;
        };
        this.setUA = function (uastring) {
            ua = uastring;
            return this;
        };
        return this;
    };

    UAParser.VERSION = LIBVERSION;
    UAParser.BROWSER = {
        NAME    : NAME,
        MAJOR   : MAJOR, // deprecated
        VERSION : VERSION
    };
    UAParser.CPU = {
        ARCHITECTURE : ARCHITECTURE
    };
    UAParser.DEVICE = {
        MODEL   : MODEL,
        VENDOR  : VENDOR,
        TYPE    : TYPE,
        CONSOLE : CONSOLE,
        MOBILE  : MOBILE,
        SMARTTV : SMARTTV,
        TABLET  : TABLET,
        WEARABLE: WEARABLE,
        EMBEDDED: EMBEDDED
    };
    UAParser.ENGINE = {
        NAME    : NAME,
        VERSION : VERSION
    };
    UAParser.OS = {
        NAME    : NAME,
        VERSION : VERSION
    };

    ///////////
    // Export
    //////////


    // check js environment
    if (typeof(exports) !== UNDEF_TYPE) {
        // nodejs env
        if ("object" !== UNDEF_TYPE && module.exports) {
            exports = module.exports = UAParser;
        }
        exports.UAParser = UAParser;
    } else {
        // requirejs env (optional)
        if (true) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                return UAParser;
            }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
    }

    // jQuery/Zepto specific (optional)
    // Note:
    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
    //   and we should catch that.
    var $ = window && (window.jQuery || window.Zepto);
    if ($ && !$.ua) {
        var parser = new UAParser();
        $.ua = parser.getResult();
        $.ua.get = function () {
            return parser.getUA();
        };
        $.ua.set = function (uastring) {
            parser.setUA(uastring);
            var result = parser.getResult();
            for (var prop in result) {
                $.ua[prop] = result[prop];
            }
        };
    }

})(typeof window === 'object' ? window : this);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	// It's empty as some runtime module handles the default behavior
/******/ 	__webpack_require__.x = x => {};
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// Promise = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0
/******/ 		};
/******/ 		
/******/ 		var deferredModules = [
/******/ 			["./resources/js/app.js"],
/******/ 			["./resources/css/app.css"]
/******/ 		];
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		var checkDeferredModules = x => {};
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime, executeModules] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0, resolves = [];
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					resolves.push(installedChunks[chunkId][0]);
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			while(resolves.length) {
/******/ 				resolves.shift()();
/******/ 			}
/******/ 		
/******/ 			// add entry modules from loaded chunk to deferred list
/******/ 			if(executeModules) deferredModules.push.apply(deferredModules, executeModules);
/******/ 		
/******/ 			// run deferred modules when all chunks ready
/******/ 			return checkDeferredModules();
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 		
/******/ 		function checkDeferredModulesImpl() {
/******/ 			var result;
/******/ 			for(var i = 0; i < deferredModules.length; i++) {
/******/ 				var deferredModule = deferredModules[i];
/******/ 				var fulfilled = true;
/******/ 				for(var j = 1; j < deferredModule.length; j++) {
/******/ 					var depId = deferredModule[j];
/******/ 					if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferredModules.splice(i--, 1);
/******/ 					result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 				}
/******/ 			}
/******/ 			if(deferredModules.length === 0) {
/******/ 				__webpack_require__.x();
/******/ 				__webpack_require__.x = x => {};
/******/ 			}
/******/ 			return result;
/******/ 		}
/******/ 		var startup = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			// reset startup function so it can be called again when more startup code is added
/******/ 			__webpack_require__.x = startup || (x => {});
/******/ 			return (checkDeferredModules = checkDeferredModulesImpl)();
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	
/******/ })()
;